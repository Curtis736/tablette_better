# Dockerfile multi-stage pour le backend SEDI Tablette Node.js

# Stage 1: Base image avec dépendances communes
# Utilisation d'Alpine Linux avec installation manuelle de Node.js
FROM alpine:3.18 AS base
RUN apk add --no-cache nodejs npm curl dumb-init
WORKDIR /app

# Stage 2: Dependencies (pour le cache des layers)
FROM base AS dependencies
COPY backend/package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Stage 3: Development
FROM base AS development
COPY backend/package*.json ./
RUN npm ci && npm cache clean --force
COPY backend/ ./
EXPOSE 3001 9229
USER node
CMD ["npm", "run", "dev"]

# Stage 4: Production build
FROM dependencies AS production

# Copier le code source
COPY backend/ ./

# Créer les répertoires nécessaires
RUN mkdir -p logs && \
    chown -R node:node /app

# Utiliser l'utilisateur non-root
USER node

# Exposer le port
EXPOSE 3001

# Variables d'environnement par défaut
ENV NODE_ENV=production \
    PORT=3001 \
    DB_SERVER=192.168.1.14 \
    DB_DATABASE=SEDI_ERP \
    DB_USER=QUALITE \
    DB_PASSWORD=QUALITE \
    DB_ENCRYPT=false \
    DB_TRUST_CERT=true \
    API_TIMEOUT=30000 \
    CACHE_ENABLED=true \
    LOG_LEVEL=info

# Health check optimisé
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3001/api/health || exit 1

# Labels pour la traçabilité
LABEL maintainer="SEDI Team" \
      version="2.2" \
      description="SEDI Tablette Backend API with Pause Management" \
      com.sedi.component="backend"

# Utiliser dumb-init pour une gestion propre des signaux
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server.js"]
