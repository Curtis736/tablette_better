[{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\config\\database.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":28,"suggestions":[{"fix":{"range":[912,960],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":36,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":24,"suggestions":[{"fix":{"range":[1095,1150],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":22,"suggestions":[{"fix":{"range":[1212,1279],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-shadow","severity":2,"message":"'pool' is already declared in the upper scope on line 24 column 5.","line":47,"column":11,"nodeType":"Identifier","messageId":"noShadow","endLine":47,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":20,"suggestions":[{"fix":{"range":[1546,1604],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":66,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":22,"suggestions":[{"fix":{"range":[1997,2065],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-shadow","severity":2,"message":"'pool' is already declared in the upper scope on line 24 column 5.","line":73,"column":11,"nodeType":"Identifier","messageId":"noShadow","endLine":73,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":20,"suggestions":[{"fix":{"range":[2354,2418],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":22,"suggestions":[{"fix":{"range":[2821,2891],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-shadow","severity":2,"message":"'pool' is already declared in the upper scope on line 24 column 5.","line":99,"column":11,"nodeType":"Identifier","messageId":"noShadow","endLine":99,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":20,"suggestions":[{"fix":{"range":[3209,3289],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":22,"suggestions":[{"fix":{"range":[3865,3934],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":20,"suggestions":[{"fix":{"range":[4110,4166],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":135,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":18,"suggestions":[{"fix":{"range":[4243,4285],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const sql = require('mssql');\n\n// Configuration de la base de données SQL Server\nconst config = {\n    server: process.env.DB_SERVER || 'SERVEURERP',\n    database: process.env.DB_DATABASE || 'SEDI_ERP',\n    user: process.env.DB_USER || 'QUALITE',\n    password: process.env.DB_PASSWORD || 'QUALITE',\n    options: {\n        encrypt: process.env.DB_ENCRYPT === 'true' || false,\n        trustServerCertificate: process.env.DB_TRUST_CERT === 'true' || true,\n        enableArithAbort: true,\n        requestTimeout: 30000,\n        connectionTimeout: 30000\n    },\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n};\n\n// Pool de connexions\nlet pool = null;\n\n// Fonction pour obtenir une connexion\nasync function getConnection() {\n    try {\n        if (!pool) {\n            // En mode test, simuler une connexion réussie\n            if (process.env.NODE_ENV === 'test') {\n                console.log('🧪 Mode test - Connexion simulée');\n                return null; // Retourner null pour les tests\n            }\n            pool = await sql.connect(config);\n            console.log(' Connexion à la base de données établie');\n        }\n        return pool;\n    } catch (error) {\n        console.error(' Erreur de connexion à la base de données:', error);\n        throw error;\n    }\n}\n\n// Fonction pour exécuter une requête\nasync function executeQuery(query, params = {}) {\n    const pool = await getConnection();\n    \n    // En mode test, retourner des données simulées\n    if (process.env.NODE_ENV === 'test') {\n        console.log('🧪 Mode test - Données simulées retournées');\n        return []; // Retourner un tableau vide pour les tests\n    }\n    \n    try {\n        const request = pool.request();\n        \n        // Ajouter les paramètres\n        Object.keys(params).forEach(key => {\n            request.input(key, params[key]);\n        });\n        \n        const result = await request.query(query);\n        return result.recordset;\n    } catch (error) {\n        console.error(' Erreur lors de l\\'exécution de la requête:', error);\n        throw error;\n    }\n}\n\n// Fonction pour exécuter une procédure stockée\nasync function executeProcedure(procedureName, params = {}) {\n    const pool = await getConnection();\n    \n    // En mode test, retourner des données simulées\n    if (process.env.NODE_ENV === 'test') {\n        console.log('🧪 Mode test - Procédure simulée:', procedureName);\n        return []; // Retourner un tableau vide pour les tests\n    }\n    \n    try {\n        const request = pool.request();\n        \n        // Ajouter les paramètres\n        Object.keys(params).forEach(key => {\n            request.input(key, params[key]);\n        });\n        \n        const result = await request.execute(procedureName);\n        return result.recordset;\n    } catch (error) {\n        console.error(' Erreur lors de l\\'exécution de la procédure:', error);\n        throw error;\n    }\n}\n\n// Exécuter une commande non séléctive (INSERT/UPDATE/DELETE) et retourner rowsAffected\nasync function executeNonQuery(query, params = {}) {\n    const pool = await getConnection();\n    \n    // En mode test, retourner un résultat simulé\n    if (process.env.NODE_ENV === 'test') {\n        console.log('🧪 Mode test - Commande simulée:', query.substring(0, 50) + '...');\n        return { rowsAffected: 1 }; // Simuler une ligne affectée\n    }\n    \n    try {\n        const request = pool.request();\n        Object.keys(params).forEach(key => {\n            request.input(key, params[key]);\n        });\n        const result = await request.query(query);\n        // mssql retourne un tableau rowsAffected par commande\n        const affected = Array.isArray(result.rowsAffected) ? result.rowsAffected.reduce((a, b) => a + b, 0) : (result.rowsAffected || 0);\n        return {\n            rowsAffected: affected\n        };\n    } catch (error) {\n        console.error(' Erreur lors de l\\'exécution de la commande:', error);\n        throw error;\n    }\n}\n\n// Fonction pour fermer la connexion\nasync function closeConnection() {\n    if (pool) {\n        await pool.close();\n        pool = null;\n        console.log('🔌 Connexion à la base de données fermée');\n    }\n}\n\n// Gestion des erreurs de connexion\nsql.on('error', (err) => {\n    console.error(' Erreur SQL Server:', err);\n});\n\nmodule.exports = {\n    config,\n    getConnection,\n    executeQuery,\n    executeProcedure,\n    executeNonQuery,\n    closeConnection,\n    sql\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\middleware\\auth.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'jwt' is assigned a value but never used.","line":2,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"jwt"},"fix":{"range":[34,70],"text":""},"desc":"Remove unused variable 'jwt'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":18,"suggestions":[{"fix":{"range":[806,867],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":18,"suggestions":[{"fix":{"range":[1072,1133],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":18,"suggestions":[{"fix":{"range":[1343,1404],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":18,"suggestions":[{"fix":{"range":[2404,2456],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Middleware d'authentification\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst authMiddleware = (req, res, next) => {\r\n  try {\r\n    const authHeader = req.headers.authorization;\r\n    \r\n    if (!authHeader) {\r\n      return res.status(401).json({\r\n        success: false,\r\n        error: 'Token manquant'\r\n      });\r\n    }\r\n\r\n    const parts = authHeader.split(' ');\r\n    if (parts.length !== 2 || parts[0] !== 'Bearer') {\r\n      return res.status(401).json({\r\n        success: false,\r\n        error: 'Format d\\'autorisation invalide'\r\n      });\r\n    }\r\n\r\n    const token = parts[1];\r\n    \r\n    // Simulation de validation de token\r\n    if (token === 'valid-token-123') {\r\n      req.user = {\r\n        id: 1,\r\n        code: 'OP001',\r\n        name: 'Test Operator',\r\n        role: 'operator'\r\n      };\r\n      console.log('Authentification réussie pour:', req.user.name);\r\n      return next();\r\n    }\r\n    \r\n    if (token === 'admin-token-123') {\r\n      req.user = {\r\n        id: 2,\r\n        code: 'ADMIN',\r\n        name: 'Admin User',\r\n        role: 'admin'\r\n      };\r\n      console.log('Authentification réussie pour:', req.user.name);\r\n      return next();\r\n    }\r\n    \r\n    if (token === 'user-token-123') {\r\n      req.user = {\r\n        id: 3,\r\n        code: 'OP002',\r\n        name: 'User Operator',\r\n        role: 'operator'\r\n      };\r\n      console.log('Authentification réussie pour:', req.user.name);\r\n      return next();\r\n    }\r\n\r\n    if (token === 'expired-token-123') {\r\n      return res.status(401).json({\r\n        success: false,\r\n        error: 'Token expiré'\r\n      });\r\n    }\r\n\r\n    if (token === 'invalid-signature-token') {\r\n      return res.status(401).json({\r\n        success: false,\r\n        error: 'Signature invalide'\r\n      });\r\n    }\r\n\r\n    if (token === 'malformed-json-token') {\r\n      return res.status(401).json({\r\n        success: false,\r\n        error: 'Token malformé'\r\n      });\r\n    }\r\n\r\n    if (token === 'no-user-token') {\r\n      return res.status(401).json({\r\n        success: false,\r\n        error: 'Utilisateur non trouvé'\r\n      });\r\n    }\r\n\r\n    if (token === 'db-error-token') {\r\n      return res.status(500).json({\r\n        success: false,\r\n        error: 'Erreur de base de données'\r\n      });\r\n    }\r\n\r\n    // Token invalide par défaut\r\n    return res.status(401).json({\r\n      success: false,\r\n      error: 'Token invalide'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Erreur d\\'authentification:', error);\r\n    return res.status(500).json({\r\n      success: false,\r\n      error: 'Erreur interne du serveur'\r\n    });\r\n  }\r\n};\r\n\r\nmodule.exports = authMiddleware;\r\n\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\models\\Comment.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":28,"suggestions":[{"fix":{"range":[1365,1432],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":26,"suggestions":[{"fix":{"range":[2007,2076],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":26,"suggestions":[{"fix":{"range":[3143,3218],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":120,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":120,"endColumn":26,"suggestions":[{"fix":{"range":[4157,4240],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":154,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":154,"endColumn":26,"suggestions":[{"fix":{"range":[5326,5414],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":26,"suggestions":[{"fix":{"range":[6446,6518],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":196,"column":30,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":196,"endColumn":43,"fix":{"range":[6769,6782],"text":"{return 'N/A';}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":209,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":209,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const { executeQuery, executeNonQuery } = require('../config/database');\r\n\r\nclass Comment {\r\n    constructor(data) {\r\n        this.id = data.id;\r\n        this.operatorCode = data.operatorCode;\r\n        this.operatorName = data.operatorName;\r\n        this.lancementCode = data.lancementCode;\r\n        this.comment = data.comment;\r\n        this.timestamp = data.timestamp;\r\n        this.createdAt = data.createdAt;\r\n    }\r\n\r\n    // Créer un nouveau commentaire\r\n    static async create(commentData) {\r\n        try {\r\n            const { operatorCode, operatorName, lancementCode, comment } = commentData;\r\n            const timestamp = new Date().toISOString();\r\n            \r\n            const query = `\r\n                INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[AB_COMMENTAIRES_OPERATEURS]\r\n                (OperatorCode, OperatorName, LancementCode, Comment, Timestamp, CreatedAt)\r\n                VALUES (@operatorCode, @operatorName, @lancementCode, @comment, @timestamp, GETDATE())\r\n            `;\r\n            \r\n            const params = {\r\n                operatorCode,\r\n                operatorName,\r\n                lancementCode,\r\n                comment,\r\n                timestamp\r\n            };\r\n            \r\n            const result = await executeNonQuery(query, params);\r\n            \r\n            if (result.rowsAffected > 0) {\r\n                console.log(`✅ Commentaire créé pour l'opérateur ${operatorCode}`);\r\n                return {\r\n                    success: true,\r\n                    message: 'Commentaire enregistré avec succès',\r\n                    data: {\r\n                        operatorCode,\r\n                        operatorName,\r\n                        lancementCode,\r\n                        comment,\r\n                        timestamp\r\n                    }\r\n                };\r\n            } else {\r\n                throw new Error('Aucune ligne affectée lors de la création du commentaire');\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur lors de la création du commentaire:', error);\r\n            return {\r\n                success: false,\r\n                error: error.message\r\n            };\r\n        }\r\n    }\r\n\r\n    // Récupérer les commentaires d'un opérateur\r\n    static async getByOperator(operatorCode, limit = 50) {\r\n        try {\r\n            const query = `\r\n                SELECT TOP ${limit}\r\n                    Id,\r\n                    OperatorCode,\r\n                    OperatorName,\r\n                    LancementCode,\r\n                    Comment,\r\n                    Timestamp,\r\n                    CreatedAt\r\n                FROM [SEDI_APP_INDEPENDANTE].[dbo].[AB_COMMENTAIRES_OPERATEURS]\r\n                WHERE OperatorCode = @operatorCode\r\n                ORDER BY CreatedAt DESC\r\n            `;\r\n            \r\n            const params = { operatorCode };\r\n            const comments = await executeQuery(query, params);\r\n            \r\n            return {\r\n                success: true,\r\n                data: comments.map(comment => new Comment(comment))\r\n            };\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur lors de la récupération des commentaires:', error);\r\n            return {\r\n                success: false,\r\n                error: error.message\r\n            };\r\n        }\r\n    }\r\n\r\n    // Récupérer tous les commentaires récents\r\n    static async getAll(limit = 100) {\r\n        try {\r\n            const query = `\r\n                SELECT TOP ${limit}\r\n                    Id,\r\n                    OperatorCode,\r\n                    OperatorName,\r\n                    LancementCode,\r\n                    Comment,\r\n                    Timestamp,\r\n                    CreatedAt\r\n                FROM [SEDI_APP_INDEPENDANTE].[dbo].[AB_COMMENTAIRES_OPERATEURS]\r\n                ORDER BY CreatedAt DESC\r\n            `;\r\n            \r\n            const comments = await executeQuery(query);\r\n            \r\n            return {\r\n                success: true,\r\n                data: comments.map(comment => new Comment(comment))\r\n            };\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur lors de la récupération de tous les commentaires:', error);\r\n            return {\r\n                success: false,\r\n                error: error.message\r\n            };\r\n        }\r\n    }\r\n\r\n    // Récupérer les commentaires pour un lancement spécifique\r\n    static async getByLancement(lancementCode, limit = 50) {\r\n        try {\r\n            const query = `\r\n                SELECT TOP ${limit}\r\n                    Id,\r\n                    OperatorCode,\r\n                    OperatorName,\r\n                    LancementCode,\r\n                    Comment,\r\n                    Timestamp,\r\n                    CreatedAt\r\n                FROM [SEDI_APP_INDEPENDANTE].[dbo].[AB_COMMENTAIRES_OPERATEURS]\r\n                WHERE LancementCode = @lancementCode\r\n                ORDER BY CreatedAt DESC\r\n            `;\r\n            \r\n            const params = { lancementCode };\r\n            const comments = await executeQuery(query, params);\r\n            \r\n            return {\r\n                success: true,\r\n                data: comments.map(comment => new Comment(comment))\r\n            };\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur lors de la récupération des commentaires du lancement:', error);\r\n            return {\r\n                success: false,\r\n                error: error.message\r\n            };\r\n        }\r\n    }\r\n\r\n    // Supprimer un commentaire\r\n    static async delete(commentId, operatorCode) {\r\n        try {\r\n            const query = `\r\n                DELETE FROM [SEDI_APP_INDEPENDANTE].[dbo].[AB_COMMENTAIRES_OPERATEURS]\r\n                WHERE Id = @commentId AND OperatorCode = @operatorCode\r\n            `;\r\n            \r\n            const params = { commentId, operatorCode };\r\n            const result = await executeNonQuery(query, params);\r\n            \r\n            if (result.rowsAffected > 0) {\r\n                return {\r\n                    success: true,\r\n                    message: 'Commentaire supprimé avec succès'\r\n                };\r\n            } else {\r\n                return {\r\n                    success: false,\r\n                    error: 'Commentaire non trouvé ou non autorisé à supprimer'\r\n                };\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Erreur lors de la suppression du commentaire:', error);\r\n            return {\r\n                success: false,\r\n                error: error.message\r\n            };\r\n        }\r\n    }\r\n\r\n    // Méthode pour formater le timestamp pour l'affichage\r\n    getFormattedTimestamp() {\r\n        if (!this.timestamp) return 'N/A';\r\n        \r\n        try {\r\n            const date = new Date(this.timestamp);\r\n            return date.toLocaleString('fr-FR', {\r\n                timeZone: 'Europe/Paris',\r\n                year: 'numeric',\r\n                month: '2-digit',\r\n                day: '2-digit',\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                second: '2-digit'\r\n            });\r\n        } catch (error) {\r\n            return this.timestamp;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Comment;\r\n\r\n\r\n\r\n\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\routes\\admin.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":9,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":9,"endColumn":20,"suggestions":[{"fix":{"range":[310,382],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":27,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":27,"endColumn":24,"suggestions":[{"fix":{"range":[911,1140],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":24,"suggestions":[{"fix":{"range":[1267,1331],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":22,"suggestions":[{"fix":{"range":[1540,1608],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":54,"column":21,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":54,"endColumn":33,"fix":{"range":[1860,1872],"text":"{return null;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":57,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":57,"endColumn":20,"suggestions":[{"fix":{"range":[1896,1981],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":70,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":28,"suggestions":[{"fix":{"range":[2526,2587],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":28,"suggestions":[{"fix":{"range":[3073,3134],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":24,"suggestions":[{"fix":{"range":[3605,3662],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":21,"suggestions":[{"fix":{"range":[3721,3781],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":22,"suggestions":[{"fix":{"range":[3833,3885],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":109,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":109,"endColumn":31,"fix":{"range":[4036,4045],"text":"{return 0;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":112,"column":27,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":112,"endColumn":36,"fix":{"range":[4118,4127],"text":"{return 0;}"}},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":114,"column":19,"nodeType":"CallExpression","messageId":"missingRadix","endLine":114,"endColumn":37,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4168,4168],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":115,"column":21,"nodeType":"CallExpression","messageId":"missingRadix","endLine":115,"endColumn":39,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4213,4213],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":122,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":122,"endColumn":62,"fix":{"range":[4437,4477],"text":"{return { isValid: true, warning: null };}"}},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":125,"column":18,"nodeType":"CallExpression","messageId":"missingRadix","endLine":125,"endColumn":35,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4556,4556],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":126,"column":20,"nodeType":"CallExpression","messageId":"missingRadix","endLine":126,"endColumn":37,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4594,4594],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":20,"suggestions":[{"fix":{"range":[5371,5433],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":29,"suggestions":[{"fix":{"range":[5961,5994],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":29,"suggestions":[{"fix":{"range":[6627,6660],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":184,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":184,"endColumn":24,"suggestions":[{"fix":{"range":[6700,6763],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":25,"suggestions":[{"fix":{"range":[6953,7013],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":206,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":206,"endColumn":25,"suggestions":[{"fix":{"range":[7493,7526],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":209,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":209,"endColumn":20,"suggestions":[{"fix":{"range":[7554,7617],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":212,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":212,"endColumn":22,"suggestions":[{"fix":{"range":[7675,7751],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":219,"column":33,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":219,"endColumn":45,"fix":{"range":[7926,7938],"text":"{return null;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":225,"column":61,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":225,"endColumn":73,"fix":{"range":[8105,8117],"text":"{return null;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":24,"suggestions":[{"fix":{"range":[8357,8447],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":256,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":256,"endColumn":22,"suggestions":[{"fix":{"range":[9357,9402],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":20,"suggestions":[{"fix":{"range":[9608,9689],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":275,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":275,"endColumn":41,"fix":{"range":[10117,10124],"text":"{return;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":281,"column":39,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":281,"endColumn":46,"fix":{"range":[10332,10339],"text":"{return;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":305,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":305,"endColumn":28,"suggestions":[{"fix":{"range":[11565,11680],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":336,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":336,"endColumn":24,"suggestions":[{"fix":{"range":[12996,13074],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":358,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":358,"endColumn":20,"suggestions":[{"fix":{"range":[13864,13993],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":361,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":361,"endColumn":22,"suggestions":[{"fix":{"range":[14025,14078],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'processLancementEventsSingleLine' is defined but never used.","line":366,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":366,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"processLancementEventsSingleLine"},"fix":{"range":[14187,16707],"text":""},"desc":"Remove unused variable 'processLancementEventsSingleLine'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":385,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":385,"endColumn":20,"suggestions":[{"fix":{"range":[14813,15038],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":420,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":420,"endColumn":24,"suggestions":[{"fix":{"range":[16287,16339],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'createLancementItem' was used before it was defined.","line":421,"column":33,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":421,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":424,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":424,"endColumn":20,"suggestions":[{"fix":{"range":[16476,16518],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":427,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":427,"endColumn":16,"suggestions":[{"fix":{"range":[16536,16600],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":453,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":453,"endColumn":20,"suggestions":[{"fix":{"range":[17441,17666],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":461,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":461,"endColumn":20,"suggestions":[{"fix":{"range":[17747,17824],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":490,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":490,"endColumn":24,"suggestions":[{"fix":{"range":[18957,19020],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'createLancementItem' was used before it was defined.","line":491,"column":33,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":491,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":495,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":495,"endColumn":20,"suggestions":[{"fix":{"range":[19210,19311],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":496,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":496,"endColumn":20,"suggestions":[{"fix":{"range":[19320,19432],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":497,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":497,"endColumn":20,"suggestions":[{"fix":{"range":[19441,19557],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":500,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":500,"endColumn":20,"suggestions":[{"fix":{"range":[19638,19759],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":520,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":520,"endColumn":28,"suggestions":[{"fix":{"range":[20880,20972],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":522,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":522,"endColumn":28,"suggestions":[{"fix":{"range":[21010,21087],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":525,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":525,"endColumn":24,"suggestions":[{"fix":{"range":[21127,21442],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-shadow","severity":2,"message":"'statusLabel' is already declared in the upper scope on line 470 column 13.","line":532,"column":25,"nodeType":"Identifier","messageId":"noShadow","endLine":532,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":545,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":545,"endColumn":28,"suggestions":[{"fix":{"range":[22077,22178],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":553,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":553,"endColumn":24,"suggestions":[{"fix":{"range":[22410,22482],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'createLancementItem' was used before it was defined.","line":554,"column":33,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":554,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":557,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":557,"endColumn":20,"suggestions":[{"fix":{"range":[22622,22688],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":560,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":560,"endColumn":16,"suggestions":[{"fix":{"range":[22706,22770],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":573,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":573,"endColumn":20,"suggestions":[{"fix":{"range":[23323,23543],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":607,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":607,"endColumn":24,"suggestions":[{"fix":{"range":[24758,24812],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":656,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":656,"endColumn":24,"suggestions":[{"fix":{"range":[26988,27069],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":657,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":657,"endColumn":24,"suggestions":[{"fix":{"range":[27082,27163],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":666,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":666,"endColumn":24,"suggestions":[{"fix":{"range":[27488,27548],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":783,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":783,"endColumn":20,"suggestions":[{"fix":{"range":[32128,32169],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'getAdminStats' was used before it was defined.","line":788,"column":29,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":788,"endColumn":42},{"ruleId":"no-use-before-define","severity":2,"message":"'getAdminOperations' was used before it was defined.","line":791,"column":40,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":791,"endColumn":58},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":801,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":801,"endColumn":22,"suggestions":[{"fix":{"range":[32793,32867],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'getAdminOperations' was used before it was defined.","line":819,"column":30,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":819,"endColumn":48},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":819,"column":61,"nodeType":"CallExpression","messageId":"missingRadix","endLine":819,"endColumn":75,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[33536,33536],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":819,"column":77,"nodeType":"CallExpression","messageId":"missingRadix","endLine":819,"endColumn":92,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[33553,33553],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":820,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":820,"endColumn":20,"suggestions":[{"fix":{"range":[33565,33655],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":824,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":824,"endColumn":22,"suggestions":[{"fix":{"range":[33721,33792],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'getAdminStats' was used before it was defined.","line":837,"column":29,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":837,"endColumn":42},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":841,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":841,"endColumn":22,"suggestions":[{"fix":{"range":[34263,34336],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'getAdminOperations' was used before it was defined.","line":861,"column":34,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":861,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":874,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":874,"endColumn":22,"suggestions":[{"fix":{"range":[35498,35560],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'date' is defined but never used.","line":882,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":882,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"date"},"fix":{"range":[35771,35775],"text":""},"desc":"Remove unused variable 'date'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":922,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":922,"endColumn":22,"suggestions":[{"fix":{"range":[37364,37437],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":935,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":935,"endColumn":20,"suggestions":[{"fix":{"range":[37777,37866],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":936,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":936,"endColumn":20,"suggestions":[{"fix":{"range":[37875,37955],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":959,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":959,"endColumn":20,"suggestions":[{"fix":{"range":[38791,38844],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":962,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":962,"endColumn":20,"suggestions":[{"fix":{"range":[38913,38979],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":965,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":965,"endColumn":20,"suggestions":[{"fix":{"range":[39079,39146],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":971,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":971,"endColumn":24,"suggestions":[{"fix":{"range":[39436,39721],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":981,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":981,"endColumn":20,"suggestions":[{"fix":{"range":[39899,39976],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":982,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":982,"endColumn":20,"suggestions":[{"fix":{"range":[39985,40244],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1024,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1024,"endColumn":20,"suggestions":[{"fix":{"range":[41740,41882],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1038,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1038,"endColumn":22,"suggestions":[{"fix":{"range":[42351,42424],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1049,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1049,"endColumn":20,"suggestions":[{"fix":{"range":[42712,42770],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":1053,"column":30,"nodeType":"CallExpression","messageId":"missingRadix","endLine":1053,"endColumn":42,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[42915,42915],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1066,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1066,"endColumn":24,"suggestions":[{"fix":{"range":[43421,43486],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1079,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1079,"endColumn":24,"suggestions":[{"fix":{"range":[43934,43993],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1088,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1088,"endColumn":29,"suggestions":[{"fix":{"range":[44311,44415],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1095,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1095,"endColumn":24,"suggestions":[{"fix":{"range":[44645,44704],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1111,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1111,"endColumn":20,"suggestions":[{"fix":{"range":[45138,45193],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1112,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1112,"endColumn":20,"suggestions":[{"fix":{"range":[45202,45240],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1116,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1116,"endColumn":20,"suggestions":[{"fix":{"range":[45316,45370],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1125,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1125,"endColumn":22,"suggestions":[{"fix":{"range":[45551,45607],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'startTime' is assigned a value but never used.","line":1137,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":1137,"endColumn":53,"suggestions":[{"messageId":"removeVar","data":{"varName":"startTime"},"fix":{"range":[45957,45968],"text":""},"desc":"Remove unused variable 'startTime'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1139,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1139,"endColumn":20,"suggestions":[{"fix":{"range":[46030,46078],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1140,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1140,"endColumn":20,"suggestions":[{"fix":{"range":[46087,46128],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1151,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1151,"endColumn":20,"suggestions":[{"fix":{"range":[46447,46499],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1170,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1170,"endColumn":20,"suggestions":[{"fix":{"range":[47306,47345],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1171,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1171,"endColumn":20,"suggestions":[{"fix":{"range":[47354,47379],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1175,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1175,"endColumn":20,"suggestions":[{"fix":{"range":[47447,47523],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1194,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1194,"endColumn":22,"suggestions":[{"fix":{"range":[48057,48108],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1195,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1195,"endColumn":22,"suggestions":[{"fix":{"range":[48117,48168],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1196,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1196,"endColumn":22,"suggestions":[{"fix":{"range":[48177,48214],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1211,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1211,"endColumn":20,"suggestions":[{"fix":{"range":[48626,48694],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":1220,"column":75,"nodeType":"CallExpression","messageId":"missingRadix","endLine":1220,"endColumn":87,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[49077,49077],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1222,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1222,"endColumn":20,"suggestions":[{"fix":{"range":[49100,49171],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1225,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1225,"endColumn":24,"suggestions":[{"fix":{"range":[49235,49293],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1234,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1234,"endColumn":20,"suggestions":[{"fix":{"range":[49535,49631],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1247,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1247,"endColumn":20,"suggestions":[{"fix":{"range":[50075,50166],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1255,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1255,"endColumn":22,"suggestions":[{"fix":{"range":[50328,50383],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1266,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1266,"endColumn":20,"suggestions":[{"fix":{"range":[50676,50764],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1282,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1282,"endColumn":20,"suggestions":[{"fix":{"range":[51302,51370],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1295,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1295,"endColumn":22,"suggestions":[{"fix":{"range":[51717,51790],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1308,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1308,"endColumn":20,"suggestions":[{"fix":{"range":[52186,52268],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1354,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1354,"endColumn":20,"suggestions":[{"fix":{"range":[54367,54466],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1364,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1364,"endColumn":22,"suggestions":[{"fix":{"range":[54688,54761],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1375,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1375,"endColumn":20,"suggestions":[{"fix":{"range":[55030,55098],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1409,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1409,"endColumn":20,"suggestions":[{"fix":{"range":[56225,56303],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1416,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1416,"endColumn":20,"suggestions":[{"fix":{"range":[56458,56562],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1431,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1431,"endColumn":22,"suggestions":[{"fix":{"range":[56894,56963],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1443,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1443,"endColumn":20,"suggestions":[{"fix":{"range":[57304,57384],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":1454,"column":9,"nodeType":"VariableDeclaration","messageId":"unreachableCode","endLine":1511,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1470,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1470,"endColumn":20,"suggestions":[{"fix":{"range":[58373,58449],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1495,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1495,"endColumn":28,"suggestions":[{"fix":{"range":[59475,59541],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1498,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1498,"endColumn":30,"suggestions":[{"fix":{"range":[59595,59696],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1502,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1502,"endColumn":20,"suggestions":[{"fix":{"range":[59730,59838],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'testResult' is not defined.","line":1510,"column":38,"nodeType":"Identifier","messageId":"undef","endLine":1510,"endColumn":48},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1514,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1514,"endColumn":22,"suggestions":[{"fix":{"range":[60208,60259],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1534,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1534,"endColumn":22,"suggestions":[{"fix":{"range":[60834,60886],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1561,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1561,"endColumn":22,"suggestions":[{"fix":{"range":[61922,61967],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1581,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1581,"endColumn":22,"suggestions":[{"fix":{"range":[62537,62581],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1591,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1591,"endColumn":20,"suggestions":[{"fix":{"range":[62865,62921],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1638,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1638,"endColumn":22,"suggestions":[{"fix":{"range":[64377,64437],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1650,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1650,"endColumn":20,"suggestions":[{"fix":{"range":[64800,64877],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1662,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1662,"endColumn":28,"suggestions":[{"fix":{"range":[65353,65413],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1663,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":1663,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1664,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1664,"endColumn":28,"suggestions":[{"fix":{"range":[65460,65530],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1678,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1678,"endColumn":28,"suggestions":[{"fix":{"range":[66058,66115],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1680,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1680,"endColumn":28,"suggestions":[{"fix":{"range":[66162,66223],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1684,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1684,"endColumn":20,"suggestions":[{"fix":{"range":[66265,66303],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1697,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1697,"endColumn":22,"suggestions":[{"fix":{"range":[66658,66726],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1708,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1708,"endColumn":20,"suggestions":[{"fix":{"range":[66979,67044],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1752,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1752,"endColumn":20,"suggestions":[{"fix":{"range":[68980,69033],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1756,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1756,"endColumn":20,"suggestions":[{"fix":{"range":[69133,69183],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1783,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1783,"endColumn":24,"suggestions":[{"fix":{"range":[70435,70513],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1784,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":1784,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1785,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1785,"endColumn":24,"suggestions":[{"fix":{"range":[70548,70612],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1789,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1789,"endColumn":20,"suggestions":[{"fix":{"range":[70691,70746],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1798,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1798,"endColumn":22,"suggestions":[{"fix":{"range":[71006,71058],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1810,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1810,"endColumn":20,"suggestions":[{"fix":{"range":[71376,71445],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1845,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1845,"endColumn":20,"suggestions":[{"fix":{"range":[73108,73168],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1848,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1848,"endColumn":20,"suggestions":[{"fix":{"range":[73224,73281],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1857,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1857,"endColumn":22,"suggestions":[{"fix":{"range":[73553,73609],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1869,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1869,"endColumn":20,"suggestions":[{"fix":{"range":[73936,74000],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1931,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1931,"endColumn":22,"suggestions":[{"fix":{"range":[76863,76913],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1941,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1941,"endColumn":20,"suggestions":[{"fix":{"range":[77184,77234],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1958,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1958,"endColumn":22,"suggestions":[{"fix":{"range":[77640,77707],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1972,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1972,"endColumn":24,"suggestions":[{"fix":{"range":[78070,78141],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1987,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1987,"endColumn":24,"suggestions":[{"fix":{"range":[78619,78702],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1995,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1995,"endColumn":24,"suggestions":[{"fix":{"range":[78888,78952],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2009,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2009,"endColumn":24,"suggestions":[{"fix":{"range":[79373,79442],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2018,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2018,"endColumn":22,"suggestions":[{"fix":{"range":[79610,79680],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2031,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2031,"endColumn":20,"suggestions":[{"fix":{"range":[80005,80074],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":2034,"column":26,"nodeType":"CallExpression","messageId":"missingRadix","endLine":2034,"endColumn":41,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[80147,80147],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2047,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2047,"endColumn":20,"suggestions":[{"fix":{"range":[80514,80580],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2056,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2056,"endColumn":22,"suggestions":[{"fix":{"range":[80752,80829],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2076,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2076,"endColumn":20,"suggestions":[{"fix":{"range":[81352,81417],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":2080,"column":26,"nodeType":"CallExpression","messageId":"missingRadix","endLine":2080,"endColumn":41,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[81530,81530],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2096,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2096,"endColumn":20,"suggestions":[{"fix":{"range":[82062,82114],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2104,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2104,"endColumn":22,"suggestions":[{"fix":{"range":[82252,82320],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2115,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2115,"endColumn":20,"suggestions":[{"fix":{"range":[82595,82661],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2142,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2142,"endColumn":20,"suggestions":[{"fix":{"range":[83942,84006],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2150,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2150,"endColumn":22,"suggestions":[{"fix":{"range":[84168,84240],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2162,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2162,"endColumn":20,"suggestions":[{"fix":{"range":[84590,84640],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2235,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2235,"endColumn":20,"suggestions":[{"fix":{"range":[87345,87413],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2244,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2244,"endColumn":22,"suggestions":[{"fix":{"range":[87660,87720],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2256,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2256,"endColumn":20,"suggestions":[{"fix":{"range":[88065,88128],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2296,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2296,"endColumn":20,"suggestions":[{"fix":{"range":[89514,89554],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2310,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2310,"endColumn":22,"suggestions":[{"fix":{"range":[89896,89952],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2322,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2322,"endColumn":20,"suggestions":[{"fix":{"range":[90277,90339],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2399,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2399,"endColumn":22,"suggestions":[{"fix":{"range":[93310,93368],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2413,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2413,"endColumn":20,"suggestions":[{"fix":{"range":[93750,93826],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2436,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2436,"endColumn":20,"suggestions":[{"fix":{"range":[94619,95044],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2487,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2487,"endColumn":22,"suggestions":[{"fix":{"range":[96578,96632],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2499,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2499,"endColumn":20,"suggestions":[{"fix":{"range":[96926,96968],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2518,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2518,"endColumn":20,"suggestions":[{"fix":{"range":[97582,97630],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2534,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2534,"endColumn":22,"suggestions":[{"fix":{"range":[98049,98095],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":160,"fixableErrorCount":8,"fixableWarningCount":0,"source":"const express = require('express');\nconst { executeQuery } = require('../config/database');\nconst moment = require('moment');\nconst router = express.Router();\n\n// Fonction pour valider et récupérer les informations d'un lancement depuis LCTE\nasync function validateLancement(codeLancement) {\n    try {\n        console.log(`🔍 Validation du lancement ${codeLancement} dans LCTE...`);\n        \n        const query = `\n            SELECT TOP 1 \n                [CodeLancement],\n                [CodeArticle],\n                [DesignationLct1],\n                [CodeModele],\n                [DesignationArt1],\n                [DesignationArt2]\n            FROM [SEDI_ERP].[dbo].[LCTE]\n            WHERE [CodeLancement] = '${codeLancement}'\n        `;\n        \n        const result = await executeQuery(query);\n        \n        if (result && result.length > 0) {\n            const lancement = result[0];\n            console.log(` Lancement ${codeLancement} trouvé:`, {\n                CodeArticle: lancement.CodeArticle,\n                DesignationLct1: lancement.DesignationLct1,\n                CodeModele: lancement.CodeModele\n            });\n            return {\n                valid: true,\n                data: lancement\n            };\n        } else {\n            console.log(` Lancement ${codeLancement} non trouvé dans LCTE`);\n            return {\n                valid: false,\n                error: `Le numéro de lancement ${codeLancement} n'existe pas dans la base de données`\n            };\n        }\n    } catch (error) {\n        console.error(' Erreur lors de la validation du lancement:', error);\n        return {\n            valid: false,\n            error: 'Erreur lors de la validation du lancement'\n        };\n    }\n}\n\n// Fonction pour valider et formater une heure au format TIME SQL\nfunction formatTimeForSQL(timeInput) {\n    if (!timeInput) return null;\n    \n    try {\n        console.log(`🔧 formatTimeForSQL input: \"${timeInput}\" (type: ${typeof timeInput})`);\n        \n        // Si c'est déjà une chaîne au format HH:mm ou HH:mm:ss\n        if (typeof timeInput === 'string') {\n            // Nettoyer la chaîne (enlever espaces, etc.)\n            const cleanTime = timeInput.trim();\n            \n            // Format HH:mm\n            const timeMatch = cleanTime.match(/^(\\d{1,2}):(\\d{2})$/);\n            if (timeMatch) {\n                const hours = timeMatch[1].padStart(2, '0');\n                const minutes = timeMatch[2];\n                const result = `${hours}:${minutes}:00`;\n                console.log(`🔧 formatTimeForSQL: ${timeInput} → ${result}`);\n                return result;\n            }\n            \n            // Format HH:mm:ss\n            const timeWithSecondsMatch = cleanTime.match(/^(\\d{1,2}):(\\d{2}):(\\d{2})$/);\n            if (timeWithSecondsMatch) {\n                const hours = timeWithSecondsMatch[1].padStart(2, '0');\n                const minutes = timeWithSecondsMatch[2];\n                const seconds = timeWithSecondsMatch[3];\n                const result = `${hours}:${minutes}:${seconds}`;\n                console.log(`🔧 formatTimeForSQL: ${timeInput} → ${result}`);\n                return result;\n            }\n        }\n        \n        // Si c'est un objet Date, extraire seulement l'heure avec fuseau horaire français\n        if (timeInput instanceof Date) {\n            const timeString = timeInput.toLocaleTimeString('fr-FR', {\n                timeZone: 'Europe/Paris',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n                hour12: false\n            });\n            console.log(`🔧 formatTimeForSQL: Date → ${timeString}`);\n            return timeString;\n        }\n        \n        console.warn(`⚠️ Format d'heure non reconnu: ${timeInput}`);\n        return null;\n    } catch (error) {\n        console.error('Erreur formatage heure SQL:', error);\n        return null;\n    }\n}\n\n// Fonction pour convertir une heure en minutes depuis minuit\nfunction timeToMinutes(timeString) {\n    if (!timeString) return 0;\n    \n    const parts = timeString.split(':');\n    if (parts.length < 2) return 0;\n    \n    const hours = parseInt(parts[0]) || 0;\n    const minutes = parseInt(parts[1]) || 0;\n    \n    return hours * 60 + minutes;\n}\n\n// Fonction pour valider les heures suspectes (comme 02:00 qui pourrait indiquer un problème)\nfunction validateSuspiciousTime(timeString, context = '') {\n    if (!timeString) return { isValid: true, warning: null };\n    \n    const time = timeString.split(':');\n    const hour = parseInt(time[0]);\n    const minute = parseInt(time[1]);\n    \n    // Détecter les heures suspectes\n    if (hour === 2 && minute === 0) {\n        return {\n            isValid: true,\n            warning: `⚠️ Heure suspecte détectée: ${timeString} ${context}. Cela pourrait indiquer une opération terminée à 2h du matin ou un problème de calcul de durée.`\n        };\n    }\n    \n    // Détecter les heures très tardives ou très matinales\n    if (hour >= 22 || hour <= 4) {\n        return {\n            isValid: true,\n            warning: `ℹ Heure inhabituelle: ${timeString} ${context}. Vérifiez si cette opération traverse minuit.`\n        };\n    }\n    \n    return { isValid: true, warning: null };\n}\n\n// Fonction pour formater une date en HH:mm (fuseau horaire Paris)\nfunction formatDateTime(dateTime) {\n    if (!dateTime) {\n        console.log('🔍 formatDateTime: dateTime est null/undefined');\n        return null;\n    }\n    \n    try {\n        // Si c'est déjà une chaîne au format HH:mm ou HH:mm:ss, la retourner directement\n        if (typeof dateTime === 'string' && /^\\d{2}:\\d{2}(:\\d{2})?$/.test(dateTime)) {\n            const parts = dateTime.split(':');\n            const formattedTime = `${parts[0]}:${parts[1]}`;\n            \n            // Valider les heures suspectes\n            const validation = validateSuspiciousTime(formattedTime, '(format direct)');\n            if (validation.warning) {\n                console.warn(validation.warning);\n            }\n            \n            return formattedTime;\n        }\n        \n        // Si c'est un objet Date, extraire l'heure avec fuseau horaire français\n        if (dateTime instanceof Date) {\n            const timeString = dateTime.toLocaleTimeString('fr-FR', {\n                timeZone: 'Europe/Paris',\n                hour: '2-digit',\n                minute: '2-digit',\n                hour12: false\n            });\n            \n            // Valider les heures suspectes\n            const validation = validateSuspiciousTime(timeString, '(formatage Date object)');\n            if (validation.warning) {\n                console.warn(validation.warning);\n            }\n            \n            console.log(`🔍 formatDateTime: Date object -> ${timeString}`);\n            return timeString;\n        }\n        \n        // Sinon, essayer de créer un objet Date\n        const date = new Date(dateTime);\n        if (isNaN(date.getTime())) {\n            console.warn('🔍 formatDateTime: Date invalide:', dateTime);\n            return null;\n        }\n        \n        // Utiliser fuseau horaire français (Europe/Paris)\n        const timeString = date.toLocaleTimeString('fr-FR', {\n            timeZone: 'Europe/Paris',\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: false\n        });\n        \n        // Valider les heures suspectes\n        const validation = validateSuspiciousTime(timeString, '(formatage date)');\n        if (validation.warning) {\n            console.warn(validation.warning);\n        }\n        \n        console.log(`🔍 formatDateTime: ${dateTime} -> ${timeString}`);\n        return timeString;\n    } catch (error) {\n        console.error('🔍 formatDateTime: Erreur formatage date:', dateTime, error);\n        return null;\n    }\n}\n\n// Fonction pour calculer la durée entre deux dates en minutes\nfunction calculateDuration(startDate, endDate) {\n    if (!startDate || !endDate) return null;\n    \n    try {\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        \n        if (isNaN(start.getTime()) || isNaN(end.getTime())) return null;\n        \n        const diffMs = end.getTime() - start.getTime();\n        const diffMinutes = Math.floor(diffMs / (1000 * 60));\n        \n        // Gérer les durées négatives (traversée de minuit)\n        if (diffMinutes < 0) {\n            console.log(`⚠️ Durée négative détectée: ${startDate} -> ${endDate} (${diffMinutes}min)`);\n            // Si la durée est négative, cela peut indiquer une traversée de minuit\n            // Dans ce cas, on peut soit retourner null soit ajuster\n            return null;\n        }\n        \n        const hours = Math.floor(diffMinutes / 60);\n        const minutes = diffMinutes % 60;\n        \n        // Format amélioré pour les durées longues\n        if (hours >= 24) {\n            const days = Math.floor(hours / 24);\n            const remainingHours = hours % 24;\n            if (remainingHours > 0) {\n                return `${days}j${remainingHours}h${minutes.toString().padStart(2, '0')}`;\n            } else {\n                return `${days}j${minutes.toString().padStart(2, '0')}min`;\n            }\n        } else if (hours > 0) {\n            return `${hours}h${minutes.toString().padStart(2, '0')}`;\n        } else {\n            return `${minutes}min`;\n        }\n    } catch (error) {\n        console.error('Erreur calcul durée:', error);\n        return null;\n    }\n}\n\n// Fonction pour consolider les temps d'un lancement terminé dans ABTEMPS_OPERATEURS\nasync function consolidateLancementTimes(operatorCode, lancementCode) {\n    try {\n        console.log(` Consolidation des temps pour ${operatorCode}/${lancementCode}...`);\n\n        // Récupérer tous les événements de ce lancement\n        const eventsQuery = `\n            SELECT * FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            WHERE CodeRubrique = @operatorCode AND CodeLanctImprod = @lancementCode\n            ORDER BY DateCreation ASC\n        `;\n\n        const events = await executeQuery(eventsQuery, { operatorCode, lancementCode });\n\n        if (events.length === 0) return;\n\n        // Trouver les événements clés\n        const debutEvent = events.find(e => e.Ident === 'DEBUT');\n        const finEvent = events.find(e => e.Ident === 'FIN');\n\n        if (!debutEvent || !finEvent) return; // Lancement pas encore terminé\n\n        // Calculer les durées en utilisant DateCreation pour éviter les problèmes de minuit\n        const startDateTime = new Date(debutEvent.DateCreation);\n        const endDateTime = new Date(finEvent.DateCreation);\n        \n        // Si les heures sont disponibles, les utiliser pour un calcul plus précis\n        let totalDuration;\n        if (debutEvent.HeureDebut && finEvent.HeureFin) {\n            // Créer des objets Date avec les vraies dates et heures\n            const startDate = new Date(debutEvent.DateCreation);\n            const endDate = new Date(finEvent.DateCreation);\n            \n            // Extraire les heures et minutes\n            const [startHour, startMin] = debutEvent.HeureDebut.split(':').map(Number);\n            const [endHour, endMin] = finEvent.HeureFin.split(':').map(Number);\n            \n            // Créer des dates complètes\n            startDate.setHours(startHour, startMin, 0, 0);\n            endDate.setHours(endHour, endMin, 0, 0);\n            \n            // Si l'heure de fin est antérieure à l'heure de début, ajouter un jour\n            if (endDate < startDate) {\n                endDate.setDate(endDate.getDate() + 1);\n                console.log(`⚠️ Opération traversant minuit détectée: ${debutEvent.HeureDebut} -> ${finEvent.HeureFin} (+1 jour)`);\n            }\n            \n            totalDuration = Math.floor((endDate - startDate) / (1000 * 60)); // en minutes\n        } else {\n            // Fallback sur DateCreation si les heures ne sont pas disponibles\n            totalDuration = Math.floor((endDateTime - startDateTime) / (1000 * 60));\n        }\n\n        // Calculer le temps de pause\n        const pauseEvents = events.filter(e => e.Ident === 'PAUSE');\n        const repriseEvents = events.filter(e => e.Ident === 'REPRISE');\n        \n        let pauseDuration = 0;\n        for (let i = 0; i < Math.min(pauseEvents.length, repriseEvents.length); i++) {\n            const pauseStart = new Date(pauseEvents[i].DateCreation);\n            const pauseEnd = new Date(repriseEvents[i].DateCreation);\n            pauseDuration += Math.floor((pauseEnd - pauseStart) / (1000 * 60));\n        }\n\n        const productiveDuration = totalDuration - pauseDuration;\n\n        // Vérifier si déjà consolidé\n        const existingQuery = `\n            SELECT COUNT(*) as count FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]\n            WHERE OperatorCode = @operatorCode AND LancementCode = @lancementCode\n        `;\n\n        const existing = await executeQuery(existingQuery, { operatorCode, lancementCode });\n\n        if (existing[0].count > 0) {\n            console.log(`⚠️ Temps déjà consolidés pour ${operatorCode}/${lancementCode}`);\n            return;\n        }\n\n        // Insérer dans ABTEMPS_OPERATEURS\n        const insertQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]\n            (OperatorCode, LancementCode, StartTime, EndTime, TotalDuration, PauseDuration, ProductiveDuration, EventsCount)\n            VALUES (@operatorCode, @lancementCode, @startTime, @endTime, @totalDuration, @pauseDuration, @productiveDuration, @eventsCount)\n        `;\n\n        await executeQuery(insertQuery, {\n            operatorCode,\n            lancementCode,\n            startTime: debutEvent.DateCreation,\n            endTime: finEvent.DateCreation,\n            totalDuration,\n            pauseDuration,\n            productiveDuration,\n            eventsCount: events.length\n        });\n\n        console.log(` Temps consolidés pour ${operatorCode}/${lancementCode}: ${totalDuration}min (${productiveDuration}min productif)`);\n\n    } catch (error) {\n        console.error(' Erreur consolidation temps:', error);\n    }\n}\n\n// Fonction pour regrouper les événements par lancement sur une seule ligne (sans pauses séparées)\nfunction processLancementEventsSingleLine(events) {\n    const lancementGroups = {};\n    \n    // Regrouper par CodeLanctImprod et CodeRubrique\n    events.forEach(event => {\n        const key = `${event.CodeLanctImprod}_${event.CodeRubrique}`;\n        if (!lancementGroups[key]) {\n            lancementGroups[key] = [];\n        }\n        lancementGroups[key].push(event);\n    });\n    \n    const processedItems = [];\n    \n    Object.keys(lancementGroups).forEach(key => {\n        const groupEvents = lancementGroups[key].sort((a, b) => \n            new Date(a.DateCreation) - new Date(b.DateCreation)\n        );\n        \n        console.log(`🔍 Traitement du groupe ${key}:`, groupEvents.map(e => ({\n            ident: e.Ident,\n            dateCreation: e.DateCreation,\n            heureDebut: e.HeureDebut,\n            heureFin: e.HeureFin\n        })));\n        \n        // Trouver les événements clés\n        const debutEvent = groupEvents.find(e => e.Ident === 'DEBUT');\n        const finEvent = groupEvents.find(e => e.Ident === 'FIN');\n        const pauseEvents = groupEvents.filter(e => e.Ident === 'PAUSE');\n        const repriseEvents = groupEvents.filter(e => e.Ident === 'REPRISE');\n        \n        if (debutEvent) {\n            let status, statusLabel;\n            let endTime = null;\n            \n            if (finEvent) {\n                // DÉMARRÉ → FIN = TERMINÉ\n                status = 'TERMINE';\n                statusLabel = 'Terminé';\n                endTime = finEvent.HeureFin ? formatDateTime(finEvent.HeureFin) : formatDateTime(finEvent.DateCreation);\n            } else if (pauseEvents.length > 0 && pauseEvents.length > repriseEvents.length) {\n                // DÉMARRÉ → PAUSE = EN PAUSE\n                status = 'PAUSE';\n                statusLabel = 'En pause';\n                // Pas d'heure de fin pour une pause en cours\n                endTime = null;\n            } else {\n                // DÉMARRÉ seul = EN COURS\n                status = 'EN_COURS';\n                statusLabel = 'En cours';\n                endTime = null;\n            }\n            \n            console.log(`🔍 Ligne unique pour ${key}:`, status);\n            processedItems.push(createLancementItem(debutEvent, groupEvents, status, statusLabel, endTime));\n        }\n        \n        console.log(`🔍 Créé 1 item pour ${key}`);\n    });\n    \n    console.log(`🔍 Total d'items créés: ${processedItems.length}`);\n    return processedItems.sort((a, b) => \n        new Date(b.lastUpdate) - new Date(a.lastUpdate)\n    );\n}\n\n// Fonction pour regrouper les événements par lancement et calculer les temps (garde les pauses séparées)\nfunction processLancementEventsWithPauses(events) {\n    const lancementGroups = {};\n    \n    // Regrouper par CodeLanctImprod et CodeRubrique\n    events.forEach(event => {\n        const key = `${event.CodeLanctImprod}_${event.CodeRubrique}`;\n        if (!lancementGroups[key]) {\n            lancementGroups[key] = [];\n        }\n        lancementGroups[key].push(event);\n    });\n    \n    const processedItems = [];\n    \n    Object.keys(lancementGroups).forEach(key => {\n        const groupEvents = lancementGroups[key].sort((a, b) => \n            new Date(a.DateCreation) - new Date(b.DateCreation)\n        );\n        \n        console.log(`🔍 Traitement du groupe ${key}:`, groupEvents.map(e => ({\n            ident: e.Ident,\n            dateCreation: e.DateCreation,\n            heureDebut: e.HeureDebut,\n            heureFin: e.HeureFin\n        })));\n        \n        // Logique : DÉMARRÉ+FIN sur une ligne, PAUSE séparées\n        console.log(`🔍 Traitement de ${groupEvents.length} événements pour ${key}`);\n        \n        const debutEvent = groupEvents.find(e => e.Ident === 'DEBUT');\n        const finEvent = groupEvents.find(e => e.Ident === 'FIN');\n        const pauseEvents = groupEvents.filter(e => e.Ident === 'PAUSE');\n        const repriseEvents = groupEvents.filter(e => e.Ident === 'REPRISE');\n        \n        // Déterminer le statut de la ligne principale (jamais \"EN PAUSE\")\n        let currentStatus = 'EN_COURS';\n        let statusLabel = 'En cours';\n        \n        if (finEvent) {\n            currentStatus = 'TERMINE';\n            statusLabel = 'Terminé';\n        } else {\n            // La ligne principale ne doit jamais être \"EN PAUSE\"\n            // Elle reste \"EN COURS\" même si il y a des pauses\n            currentStatus = 'EN_COURS';\n            statusLabel = 'En cours';\n        }\n        \n        // Créer la ligne principale avec le statut correct\n        if (debutEvent) {\n            let endTime = null;\n            \n            if (finEvent) {\n                endTime = finEvent.HeureFin ? formatDateTime(finEvent.HeureFin) : formatDateTime(finEvent.DateCreation);\n            }\n            \n            console.log(`🔍 Ligne principale pour ${key}:`, currentStatus);\n            processedItems.push(createLancementItem(debutEvent, groupEvents, currentStatus, statusLabel, endTime));\n        }\n        \n        // Créer les lignes de pause séparées\n        console.log(`🔍 Pauses trouvées: ${pauseEvents.length}, Reprises trouvées: ${repriseEvents.length}`);\n        console.log(`🔍 Pauses:`, pauseEvents.map(p => ({ id: p.NoEnreg, date: p.DateCreation, heure: p.HeureDebut })));\n        console.log(`🔍 Reprises:`, repriseEvents.map(r => ({ id: r.NoEnreg, date: r.DateCreation, heure: r.HeureDebut })));\n        \n        const lastEvent = groupEvents[groupEvents.length - 1];\n        console.log(`🔍 Dernier événement pour ${key}:`, lastEvent ? `${lastEvent.Ident} à ${lastEvent.DateCreation}` : 'AUCUN');\n        \n        // Créer une copie des reprises pour éviter les doublons\n        const availableReprises = [...repriseEvents];\n        \n        pauseEvents.forEach((pauseEvent, index) => {\n            // Trouver la reprise correspondante (la plus proche dans le temps après la pause)\n            // et qui correspond au même lancement et opérateur\n            const repriseIndex = availableReprises.findIndex(reprise => \n                (new Date(reprise.DateCreation) > new Date(pauseEvent.DateCreation) ||\n                 (new Date(reprise.DateCreation).getTime() === new Date(pauseEvent.DateCreation).getTime() && reprise.NoEnreg > pauseEvent.NoEnreg)) &&\n                reprise.CodeLanctImprod === pauseEvent.CodeLanctImprod &&\n                reprise.CodeRubrique === pauseEvent.CodeRubrique\n            );\n            \n            const repriseEvent = repriseIndex >= 0 ? availableReprises[repriseIndex] : null;\n            \n            // Retirer la reprise utilisée pour éviter qu'elle soit réutilisée\n            if (repriseEvent) {\n                availableReprises.splice(repriseIndex, 1);\n                console.log(`🔍 Pause ${pauseEvent.NoEnreg} associée à la reprise ${repriseEvent.NoEnreg}`);\n            } else {\n                console.log(`⚠️ Aucune reprise trouvée pour la pause ${pauseEvent.NoEnreg}`);\n            }\n            \n            console.log(`🔍 Traitement pause ${index}:`, {\n                pauseId: pauseEvent.NoEnreg,\n                pauseDate: pauseEvent.DateCreation,\n                repriseId: repriseEvent ? repriseEvent.NoEnreg : 'AUCUNE',\n                repriseDate: repriseEvent ? repriseEvent.DateCreation : 'AUCUNE'\n            });\n            \n            let status, statusLabel;\n            let endTime = null;\n            \n            if (repriseEvent) {\n                status = 'PAUSE_TERMINEE';\n                statusLabel = 'Pause terminée';\n                // Pour une pause terminée, l'heure de fin = heure de la reprise\n                // Utiliser HeureDebut de la reprise (moment où l'opérateur reprend)\n                if (repriseEvent.HeureDebut) {\n                    endTime = formatDateTime(repriseEvent.HeureDebut);\n                } else {\n                    endTime = formatDateTime(repriseEvent.DateCreation);\n                }\n                console.log(`🔍 Pause terminée: début=${pauseEvent.DateCreation}, fin=${repriseEvent.DateCreation}`);\n            } else {\n                status = 'PAUSE';\n                statusLabel = 'En pause';\n                // Pour une pause en cours, pas d'heure de fin\n                endTime = null;\n            }\n            \n            console.log(`🔍 Ligne pause pour ${key}:`, status, 'endTime:', endTime);\n            processedItems.push(createLancementItem(pauseEvent, [pauseEvent], status, statusLabel, endTime));\n        });\n        \n        console.log(`🔍 Créé ${processedItems.length} items pour ${key}`);\n    });\n    \n    console.log(`🔍 Total d'items créés: ${processedItems.length}`);\n    return processedItems.sort((a, b) => \n        new Date(b.lastUpdate) - new Date(a.lastUpdate)\n    );\n}\n\n// Fonction helper pour créer un item de lancement\nfunction createLancementItem(startEvent, sequence, status, statusLabel, endTime = null) {\n    const finEvent = sequence.find(e => e.Ident === 'FIN');\n    const pauseEvent = sequence.find(e => e.Ident === 'PAUSE');\n    \n    // Debug uniquement si problème détecté\n    if (startEvent.HeureDebut && typeof startEvent.HeureDebut !== 'string' && !(startEvent.HeureDebut instanceof Date)) {\n        console.log(`⚠️ createLancementItem - HeureDebut problématique:`, {\n            HeureDebut: startEvent.HeureDebut,\n            HeureDebutType: typeof startEvent.HeureDebut,\n            Ident: startEvent.Ident\n        });\n    }\n    \n    // Traitement sécurisé de l'heure de début\n    let startTime;\n    if (startEvent.HeureDebut) {\n        if (typeof startEvent.HeureDebut === 'string' && /^\\d{2}:\\d{2}(:\\d{2})?$/.test(startEvent.HeureDebut)) {\n            // Format HH:mm ou HH:mm:ss - retourner directement\n            startTime = startEvent.HeureDebut.substring(0, 5);\n        } else if (startEvent.HeureDebut instanceof Date) {\n            // Objet Date - extraire l'heure avec fuseau horaire français\n            startTime = startEvent.HeureDebut.toLocaleTimeString('fr-FR', {\n                timeZone: 'Europe/Paris',\n                hour: '2-digit',\n                minute: '2-digit',\n                hour12: false\n            });\n        } else {\n            // Autre format - utiliser formatDateTime\n            startTime = formatDateTime(startEvent.HeureDebut);\n        }\n    } else {\n        // Pas d'heure de début - utiliser DateCreation\n        startTime = formatDateTime(startEvent.DateCreation);\n    }\n    \n    // Debug uniquement si problème détecté\n    if (startTime && startTime.includes(':')) {\n        const [hours, minutes] = startTime.split(':').map(Number);\n        if (hours > 23 || minutes > 59) {\n            console.log(`⚠️ startTime problématique:`, startTime);\n        }\n    }\n    \n    // Utiliser l'endTime fourni ou calculer selon le contexte\n    let finalEndTime;\n    if (endTime !== null) {\n        // Si endTime est fourni explicitement (cas des pauses terminées), l'utiliser\n        finalEndTime = endTime;\n    } else if (finEvent) {\n        // Pour les opérations terminées, utiliser HeureFin ou DateCreation\n        if (finEvent.HeureFin) {\n            if (typeof finEvent.HeureFin === 'string' && /^\\d{2}:\\d{2}(:\\d{2})?$/.test(finEvent.HeureFin)) {\n                // Format HH:mm ou HH:mm:ss - retourner directement\n                finalEndTime = finEvent.HeureFin.substring(0, 5);\n            } else if (finEvent.HeureFin instanceof Date) {\n                // Objet Date - extraire l'heure avec fuseau horaire français\n                finalEndTime = finEvent.HeureFin.toLocaleTimeString('fr-FR', {\n                    timeZone: 'Europe/Paris',\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    hour12: false\n                });\n            } else {\n                // Autre format - utiliser formatDateTime\n                finalEndTime = formatDateTime(finEvent.HeureFin);\n            }\n        } else {\n            // Pas d'heure de fin - utiliser DateCreation\n            finalEndTime = formatDateTime(finEvent.DateCreation);\n        }\n    } else if (pauseEvent && status === 'PAUSE') {\n        // Pour les pauses en cours, pas d'heure de fin\n        finalEndTime = null;\n    } else {\n        // Fallback par défaut\n        finalEndTime = null;\n    }\n    \n    // Validation et correction des heures incohérentes\n    if (startTime && finalEndTime && startTime.includes(':') && finalEndTime.includes(':')) {\n        const [startHours, startMinutes] = startTime.split(':').map(Number);\n        const [endHours, endMinutes] = finalEndTime.split(':').map(Number);\n        \n        const startTotalMinutes = startHours * 60 + startMinutes;\n        const endTotalMinutes = endHours * 60 + endMinutes;\n        \n        // Si l'heure de fin est avant l'heure de début (et pas de traversée de minuit)\n        if (endTotalMinutes < startTotalMinutes && endTotalMinutes > 0) {\n            console.log(`⚠️ Heures incohérentes détectées: ${startTime} -> ${finalEndTime}`);\n            console.log(`🔧 Correction: heure de fin mise à null pour éviter l'incohérence`);\n            finalEndTime = null; // Mettre à null plutôt qu'une heure incorrecte\n        }\n    }\n    \n    // Debug uniquement si problème détecté\n    if (finalEndTime && finalEndTime.includes(':')) {\n        const [hours, minutes] = finalEndTime.split(':').map(Number);\n        if (hours > 23 || minutes > 59) {\n            console.log(`⚠️ finalEndTime problématique:`, finalEndTime);\n        }\n    }\n    \n    const duration = finalEndTime ? \n        calculateDuration(startEvent.DateCreation, new Date(finalEndTime)) : null;\n    \n    return {\n        id: startEvent.NoEnreg,\n        operatorId: startEvent.CodeRubrique,\n        operatorName: startEvent.operatorName || 'Non assigné',\n        lancementCode: startEvent.CodeLanctImprod,\n        article: startEvent.Article || 'N/A',\n        phase: startEvent.Phase,\n        startTime: startTime,\n        endTime: finalEndTime,\n        pauseTime: pauseEvent ? formatDateTime(pauseEvent.DateCreation) : null,\n        duration: duration,\n        pauseDuration: null,\n        status: statusLabel,\n        statusCode: status,\n        generalStatus: status,\n        events: sequence.length,\n        lastUpdate: finEvent ? finEvent.DateCreation : (pauseEvent ? pauseEvent.DateCreation : startEvent.DateCreation),\n        type: (status === 'PAUSE' || status === 'PAUSE_TERMINEE') ? 'pause' : 'lancement'\n    };\n}\n\n// Fonction originale pour regrouper les événements par lancement et calculer les temps\nfunction processLancementEvents(events) {\n    const lancementGroups = {};\n    \n    // Regrouper par CodeLanctImprod et CodeRubrique\n    events.forEach(event => {\n        const key = `${event.CodeLanctImprod}_${event.CodeRubrique}`;\n        if (!lancementGroups[key]) {\n            lancementGroups[key] = [];\n        }\n        lancementGroups[key].push(event);\n    });\n    \n    const processedLancements = [];\n    \n    Object.keys(lancementGroups).forEach(key => {\n        const groupEvents = lancementGroups[key].sort((a, b) => \n            new Date(a.DateCreation) - new Date(b.DateCreation)\n        );\n        \n        // Trouver les événements clés\n        const debutEvent = groupEvents.find(e => e.Ident === 'DEBUT');\n        const finEvent = groupEvents.find(e => e.Ident === 'FIN');\n        const pauseEvents = groupEvents.filter(e => e.Ident === 'PAUSE');\n        const repriseEvents = groupEvents.filter(e => e.Ident === 'REPRISE');\n        \n        // Déterminer le statut de la ligne principale (jamais \"EN PAUSE\")\n        let currentStatus = 'EN_COURS';\n        let statusLabel = 'En cours';\n        \n        if (finEvent) {\n            currentStatus = 'TERMINE';\n            statusLabel = 'Terminé';\n        } else {\n            // La ligne principale ne doit jamais être \"EN PAUSE\"\n            // Elle reste \"EN COURS\" même si il y a des pauses\n            currentStatus = 'EN_COURS';\n            statusLabel = 'En cours';\n        }\n        \n        // Calculer les temps\n        const startTime = debutEvent ? formatDateTime(debutEvent.DateCreation) : null;\n        const endTime = finEvent ? formatDateTime(finEvent.DateCreation) : null;\n        const duration = (debutEvent && finEvent) ? \n            calculateDuration(debutEvent.DateCreation, finEvent.DateCreation) : null;\n        \n        // Calculer le temps de pause total\n        let totalPauseTime = 0;\n        for (let i = 0; i < Math.min(pauseEvents.length, repriseEvents.length); i++) {\n            const pauseStart = new Date(pauseEvents[i].DateCreation);\n            const pauseEnd = new Date(repriseEvents[i].DateCreation);\n            if (!isNaN(pauseStart.getTime()) && !isNaN(pauseEnd.getTime())) {\n                totalPauseTime += pauseEnd.getTime() - pauseStart.getTime();\n            }\n        }\n        \n        const pauseDuration = totalPauseTime > 0 ? \n            Math.floor(totalPauseTime / (1000 * 60)) + 'min' : null;\n        \n        // Utiliser le dernier événement pour les infos générales\n        const lastEvent = groupEvents[groupEvents.length - 1];\n        \n        processedLancements.push({\n            id: lastEvent.NoEnreg,\n            operatorId: lastEvent.CodeRubrique,\n            lancementCode: lastEvent.CodeLanctImprod,\n            phase: lastEvent.Phase,\n            startTime: startTime,\n            endTime: endTime,\n            pauseTime: pauseEvents.length > 0 ? formatDateTime(pauseEvents[0].DateCreation) : null,\n            duration: duration,\n            pauseDuration: pauseDuration,\n            status: statusLabel,\n            statusCode: currentStatus,\n            generalStatus: currentStatus,\n            events: groupEvents.length,\n            lastUpdate: lastEvent.DateCreation,\n            type: 'lancement' // Ligne principale toujours de type 'lancement'\n        });\n    });\n    \n    return processedLancements.sort((a, b) => \n        new Date(b.lastUpdate) - new Date(a.lastUpdate)\n    );\n}\n\n// GET /api/admin - Route racine admin\nrouter.get('/', async (req, res) => {\n    try {\n        console.log('🚀 DEBUT route /api/admin');\n        const { date } = req.query;\n        const targetDate = date || moment().format('YYYY-MM-DD');\n        \n        // Récupérer les statistiques\n        const stats = await getAdminStats(targetDate);\n        \n        // Récupérer les opérations (première page seulement pour la vue d'ensemble)\n        const operationsResult = await getAdminOperations(targetDate, 1, 25);\n        \n        res.json({\n            stats,\n            operations: operationsResult.operations || [],\n            pagination: operationsResult.pagination || null,\n            date: targetDate\n        });\n        \n    } catch (error) {\n        console.error('Erreur lors de la récupération des données admin:', error);\n        res.status(500).json({ \n            error: 'Erreur lors de la récupération des données admin' \n        });\n    }\n});\n\n// GET /api/admin/operations - Récupérer les opérations pour l'interface admin\nrouter.get('/operations', async (req, res) => {\n    try {\n        const { date, page = 1, limit = 25 } = req.query;\n        const targetDate = date || moment().format('YYYY-MM-DD');\n        \n        // Éviter le cache\n        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n        res.setHeader('Pragma', 'no-cache');\n        res.setHeader('Expires', '0');\n        \n        const result = await getAdminOperations(targetDate, parseInt(page), parseInt(limit));\n        console.log('🎯 Envoi des opérations admin:', result.operations?.length || 0, 'éléments');\n        res.json(result);\n        \n    } catch (error) {\n        console.error('Erreur lors de la récupération des opérations:', error);\n        res.status(500).json({ \n            error: 'Erreur lors de la récupération des opérations' \n        });\n    }\n});\n\n// GET /api/admin/stats - Récupérer uniquement les statistiques\nrouter.get('/stats', async (req, res) => {\n    try {\n        const { date } = req.query;\n        const targetDate = date || moment().format('YYYY-MM-DD');\n        \n        const stats = await getAdminStats(targetDate);\n        res.json(stats);\n        \n    } catch (error) {\n        console.error('Erreur lors de la récupération des statistiques:', error);\n        res.status(500).json({ \n            error: 'Erreur lors de la récupération des statistiques' \n        });\n    }\n});\n\n// GET /api/admin/export/:format - Exporter les données\nrouter.get('/export/:format', async (req, res) => {\n    try {\n        const { format } = req.params;\n        const { date } = req.query;\n        const targetDate = date || moment().format('MM-DD');\n        \n        if (format !== 'csv') {\n            return res.status(400).json({ \n                error: 'Format non supporté. Utilisez csv.' \n            });\n        }\n        \n        const operations = await getAdminOperations(targetDate);\n        \n        // Générer CSV\n        const csvHeader = 'ID,Opérateur,Code Lancement,Article,Date,Statut\\n';\n        const csvData = operations.map(op => \n            `${op.id},\"${op.operatorName}\",\"${op.lancementCode}\",\"${op.article}\",\"${op.startTime}\",\"${op.status}\"`\n        ).join('\\n');\n        \n            res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', `attachment; filename=\"operations-${targetDate}.csv\"`);\n        res.send(csvHeader + csvData);\n        \n    } catch (error) {\n        console.error('Erreur lors de l\\'export des données:', error);\n        res.status(500).json({ \n            error: 'Erreur lors de l\\'export des données' \n        });\n    }\n});\n\n// Fonction pour récupérer les statistiques avec les vraies tables\nasync function getAdminStats(date) {\n    try {\n        // Compter les opérateurs connectés depuis ABSESSIONS_OPERATEURS\n        const operatorsQuery = `\n            SELECT COUNT(DISTINCT OperatorCode) as totalOperators\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]\n            WHERE SessionStatus = 'ACTIVE'\n        `;\n        \n        // Récupérer tous les événements depuis ABHISTORIQUE_OPERATEURS\n        const eventsQuery = `\n        SELECT \n                CodeLanctImprod,\n                CodeRubrique,\n                Ident,\n                DateCreation\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            ORDER BY DateCreation ASC\n        `;\n        \n        const [operatorStats, events] = await Promise.all([\n            executeQuery(operatorsQuery),\n            executeQuery(eventsQuery)\n        ]);\n        \n        // Traiter les événements pour calculer les statuts\n        const processedLancements = processLancementEvents(events || []);\n        \n        // Compter par statut\n        const activeLancements = processedLancements.filter(l => l.status === 'En cours').length;\n        const pausedLancements = processedLancements.filter(l => l.status === 'En pause').length;\n        const completedLancements = processedLancements.filter(l => l.status === 'Terminé').length;\n    \n    return {\n            totalOperators: operatorStats[0]?.totalOperators || 0,\n            activeLancements: activeLancements,\n            pausedLancements: pausedLancements,\n            completedLancements: completedLancements\n        };\n    } catch (error) {\n        console.error('Erreur lors de la récupération des statistiques:', error);\n    return {\n            totalOperators: 0,\n            activeLancements: 0,\n            pausedLancements: 0,\n            completedLancements: 0\n        };\n    }\n}\n\n// Fonction pour récupérer les opérations basées sur les événements ABHISTORIQUE_OPERATEURS\nasync function getAdminOperations(date, page = 1, limit = 25) {\n    try {\n        console.log('🚀 DEBUT getAdminOperations - date:', date, 'page:', page, 'limit:', limit);\n        console.log('🔍 Récupération des événements depuis ABHISTORIQUE_OPERATEURS...');\n\n        // Récupérer tous les événements depuis ABHISTORIQUE_OPERATEURS\n        const eventsQuery = `\n        SELECT \n                h.NoEnreg,\n                h.Ident,\n                h.CodeLanctImprod,\n                h.Phase,\n                h.CodeRubrique,\n                h.Statut,\n                h.HeureDebut,\n                h.HeureFin,\n                h.DateCreation,\n            r.Designation1 as operatorName,\n                l.DesignationLct1 as Article,\n                l.DesignationLct2 as ArticleDetail\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS] h\n            LEFT JOIN [SEDI_ERP].[dbo].[RESSOURC] r ON h.CodeRubrique = r.Coderessource\n            LEFT JOIN [SEDI_ERP].[dbo].[LCTE] l ON l.CodeLancement = h.CodeLanctImprod\n            ORDER BY h.DateCreation DESC\n        `;\n    \n        console.log('Exécution de la requête événements...');\n        const allEvents = await executeQuery(eventsQuery);\n\n        console.log('Résultats:', allEvents.length, 'événements trouvés');\n        \n        // Regrouper les événements par lancement mais garder les pauses séparées\n        console.log('🔍 Événements avant regroupement:', allEvents.length);\n        // Debug des types d'heures (uniquement si problème détecté)\n        const problematicEvents = allEvents.filter(e => \n            e.HeureDebut && typeof e.HeureDebut !== 'string' && !(e.HeureDebut instanceof Date)\n        );\n        if (problematicEvents.length > 0) {\n            console.log('⚠️ Événements avec types d\\'heures problématiques:', problematicEvents.map(e => ({\n                ident: e.Ident,\n                lancement: e.CodeLanctImprod,\n                heureDebut: e.HeureDebut,\n                heureDebutType: typeof e.HeureDebut\n            })));\n        }\n        \n        // Utiliser la fonction de regroupement avec pauses séparées\n        const processedLancements = processLancementEventsWithPauses(allEvents);\n        console.log('🔍 Événements après regroupement:', processedLancements.length);\n        console.log('🔍 Détail des événements regroupés:', processedLancements.map(p => ({\n            lancement: p.lancementCode,\n            type: p.type,\n            status: p.status,\n            startTime: p.startTime,\n            endTime: p.endTime\n        })));\n        \n        // Appliquer la pagination\n        const startIndex = (page - 1) * limit;\n        const endIndex = startIndex + limit;\n        const limitedLancements = processedLancements.slice(startIndex, endIndex);\n        \n        const formattedOperations = limitedLancements.map(lancement => {\n            // Trouver les informations détaillées depuis les événements\n            const relatedEvents = allEvents.filter(e => \n                e.CodeLanctImprod === lancement.lancementCode && \n                e.CodeRubrique === lancement.operatorId\n            );\n            \n            const firstEvent = relatedEvents[0];\n            \n            return {\n                id: lancement.id,\n                operatorId: lancement.operatorId,\n                operatorName: firstEvent?.operatorName || 'Non assigné',\n                lancementCode: lancement.lancementCode,\n                article: firstEvent?.Article || 'N/A',\n                articleDetail: firstEvent?.ArticleDetail || '',\n                startTime: lancement.startTime,\n                endTime: lancement.endTime,\n                pauseTime: lancement.pauseTime,\n                duration: lancement.duration,\n                pauseDuration: lancement.pauseDuration,\n                status: lancement.status,\n                statusCode: lancement.statusCode,\n                generalStatus: lancement.generalStatus,\n                events: lancement.events,\n                editable: true\n            };\n        });\n\n        console.log(`🎯 Envoi de ${formattedOperations.length} lancements regroupés (page ${page}/${Math.ceil(processedLancements.length / limit)})`);\n        return {\n            operations: formattedOperations,\n            pagination: {\n                currentPage: page,\n                totalPages: Math.ceil(processedLancements.length / limit),\n                totalItems: processedLancements.length,\n                itemsPerPage: limit,\n                hasNextPage: page < Math.ceil(processedLancements.length / limit),\n                hasPrevPage: page > 1\n            }\n        };\n\n    } catch (error) {\n        console.error('❌ Erreur lors de la récupération des opérations:', error);\n        return [];\n    }\n}\n\n// PUT /api/admin/operations/:id - Modifier une opération\nrouter.put('/operations/:id', async (req, res) => {\n    try {\n        const { id } = req.params;\n        const { operatorName, lancementCode, article, startTime, endTime } = req.body;\n        \n        console.log(`🔧 Modification opération ${id}:`, req.body);\n        \n        // Construire la requête de mise à jour dynamiquement\n        const updateFields = [];\n        const params = { id: parseInt(id) };\n        \n        // Seules les heures sont modifiables\n        if (startTime !== undefined) {\n            const formattedStartTime = formatTimeForSQL(startTime);\n            if (!formattedStartTime) {\n                return res.status(400).json({\n                    success: false,\n                    error: 'Format d\\'heure de début invalide'\n                });\n            }\n            updateFields.push('HeureDebut = @startTime');\n            params.startTime = formattedStartTime;\n            console.log(`🔧 startTime: ${startTime} -> ${params.startTime}`);\n        }\n        \n        if (endTime !== undefined) {\n            const formattedEndTime = formatTimeForSQL(endTime);\n            if (!formattedEndTime) {\n                return res.status(400).json({\n                    success: false,\n                    error: 'Format d\\'heure de fin invalide'\n                });\n            }\n            updateFields.push('HeureFin = @endTime');\n            params.endTime = formattedEndTime;\n            console.log(`🔧 endTime: ${endTime} -> ${params.endTime}`);\n        }\n        \n        // Validation de cohérence des heures\n        if (params.startTime && params.endTime) {\n            const startMinutes = timeToMinutes(params.startTime);\n            const endMinutes = timeToMinutes(params.endTime);\n            \n            if (endMinutes < startMinutes) {\n                console.warn(`⚠️ Heure de fin (${params.endTime}) antérieure à l'heure de début (${params.startTime})`);\n                // Ne pas bloquer, juste avertir\n            }\n        }\n        \n        // Ignorer les autres champs\n        if (operatorName !== undefined || lancementCode !== undefined || article !== undefined) {\n            console.log('⚠️ Seules les heures peuvent être modifiées');\n        }\n        \n        if (updateFields.length === 0) {\n            return res.status(400).json({ \n                success: false, \n                error: 'Aucun champ à mettre à jour' \n            });\n        }\n        \n        const updateQuery = `\n            UPDATE [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            SET ${updateFields.join(', ')}\n            WHERE NoEnreg = @id\n        `;\n        \n        console.log(`🔧 Requête de mise à jour:`, updateQuery);\n        console.log(`🔧 Paramètres:`, params);\n        \n        await executeQuery(updateQuery, params);\n        \n        console.log(`✅ Opération ${id} modifiée avec succès`);\n        \n        res.json({\n            success: true,\n            message: 'Opération modifiée avec succès',\n            id: id\n        });\n        \n    } catch (error) {\n        console.error('Erreur lors de la modification:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors de la modification de l\\'opération',\n            details: error.message\n        });\n    }\n});\n\n// POST /api/admin/operations - Ajouter une nouvelle opération\nrouter.post('/operations', async (req, res) => {\n    try {\n        const { operatorId, lancementCode, startTime, status = 'DEBUT', phase = '' } = req.body;\n        \n        console.log('=== AJOUT NOUVELLE OPERATION ===');\n        console.log('Données reçues:', req.body);\n        \n        // Valider le numéro de lancement dans LCTE\n        const validation = await validateLancement(lancementCode);\n        if (!validation.valid) {\n            return res.status(400).json({\n                success: false,\n                error: validation.error\n            });\n        }\n        \n        console.log('✅ Lancement validé:', validation.data);\n        \n        // Insérer dans ABHISTORIQUE_OPERATEURS\n        const insertQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            (OperatorCode, CodeLanctImprod, CodeRubrique, Ident, Phase, Statut, HeureDebut, HeureFin, DateCreation)\n            VALUES (\n                '${operatorId}',\n                '${lancementCode}',\n                '${phase || 'ADMIN'}',\n                '${status}',\n                '${phase || 'ADMIN'}',\n                '${status === 'DEBUT' ? 'EN_COURS' : status === 'FIN' ? 'TERMINE' : status}',\n                ${status === 'DEBUT' ? 'CAST(GETDATE() AS TIME)' : 'NULL'},\n                ${status === 'FIN' ? 'CAST(GETDATE() AS TIME)' : 'NULL'},\n                CAST(GETDATE() AS DATE)\n            )\n        `;\n        \n        console.log('Requête SQL à exécuter:');\n        console.log(insertQuery);\n        \n        await executeQuery(insertQuery);\n        \n        console.log('✅ Opération ajoutée avec succès dans ABHISTORIQUE_OPERATEURS');\n        \n        // Si c'est une fin de lancement, consolider les temps\n        if (status === 'FIN' || status === 'TERMINE') {\n            await consolidateLancementTimes(operatorId, lancementCode);\n        }\n        \n        res.json({\n            success: true,\n            message: 'Opération ajoutée avec succès',\n            data: {\n                operatorId,\n                lancementCode,\n                phase,\n                lancementInfo: validation.data\n            }\n        });\n        \n    } catch (error) {\n        console.error('❌ ERREUR lors de l\\'ajout:', error);\n        console.error('Message d\\'erreur:', error.message);\n        console.error('Stack:', error.stack);\n        \n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors de l\\'ajout de l\\'opération',\n            details: error.message\n        });\n    }\n});\n\n// DELETE /api/admin/operations/:id - Supprimer une opération complète (tous les événements du lancement)\nrouter.delete('/operations/:id', async (req, res) => {\n    try {\n        const { id } = req.params;\n        \n        console.log(`🗑️ Suppression opération ${id} (type: ${typeof id})`);\n        \n        // D'abord, récupérer les informations du lancement à partir de l'ID\n        const getLancementQuery = `\n            SELECT CodeLanctImprod, CodeRubrique \n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            WHERE NoEnreg = @id\n        `;\n        \n        const lancementInfo = await executeQuery(getLancementQuery, { id: parseInt(id) });\n        \n        console.log(`🔍 Résultat de la requête pour ID ${id}:`, lancementInfo);\n        \n        if (lancementInfo.length === 0) {\n            console.log(`❌ Aucune opération trouvée avec l'ID ${id}`);\n            return res.status(404).json({\n                success: false,\n                error: 'Opération non trouvée'\n            });\n        }\n        \n        const { CodeLanctImprod, CodeRubrique } = lancementInfo[0];\n        \n        console.log(`🗑️ Suppression de tous les événements pour ${CodeLanctImprod} (${CodeRubrique})`);\n        \n        // Supprimer TOUS les événements de ce lancement\n        const deleteAllQuery = `\n            DELETE FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            WHERE CodeLanctImprod = @lancementCode AND CodeRubrique = @operatorCode\n        `;\n        \n        await executeQuery(deleteAllQuery, { \n            lancementCode: CodeLanctImprod, \n            operatorCode: CodeRubrique \n        });\n        \n        console.log(`✅ Tous les événements du lancement ${CodeLanctImprod} supprimés avec succès`);\n        \n        res.json({\n            success: true,\n            message: 'Opération supprimée avec succès'\n        });\n        \n    } catch (error) {\n        console.error('Erreur lors de la suppression:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors de la suppression de l\\'opération'\n        });\n    }\n});\n\n// Route pour récupérer les opérateurs connectés depuis ABSESSIONS_OPERATEURS\nrouter.get('/operators', async (req, res) => {\n    try {\n        console.log('🔍 Récupération des opérateurs connectés depuis ABSESSIONS_OPERATEURS...');\n\n        const operatorsQuery = `\n            SELECT DISTINCT \n                s.OperatorCode,\n                r.Designation1 as NomOperateur,\n                s.LoginTime,\n                s.SessionStatus\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS] s\n            LEFT JOIN [SEDI_ERP].[dbo].[RESSOURC] r ON s.OperatorCode = r.Coderessource\n            WHERE s.SessionStatus = 'ACTIVE'\n            ORDER BY r.Designation1\n        `;\n\n        const operators = await executeQuery(operatorsQuery);\n        \n        console.log(`✅ ${operators.length} opérateurs connectés récupérés`);\n\n        res.json({\n            success: true,\n            operators: operators.map(op => ({\n                code: op.OperatorCode,\n                name: op.NomOperateur || `Opérateur ${op.OperatorCode}`,\n                loginTime: op.LoginTime,\n                status: op.SessionStatus\n            }))\n        });\n\n    } catch (error) {\n        console.error('❌ Erreur lors de la récupération des opérateurs:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors de la récupération des opérateurs connectés',\n            details: error.message\n        });\n    }\n});\n\n// Route pour récupérer les lancements d'un opérateur spécifique\nrouter.get('/operators/:operatorCode/operations', async (req, res) => {\n    try {\n        const { operatorCode } = req.params;\n        console.log(`🔍 Récupération des événements pour l'opérateur ${operatorCode}...`);\n\n        // Récupérer tous les événements de cet opérateur depuis ABHISTORIQUE_OPERATEURS\n        const operatorEventsQuery = `\n        SELECT \n                h.NoEnreg,\n                h.Ident,\n                h.DateCreation,\n                h.CodeLanctImprod,\n                h.Phase,\n                h.CodeRubrique,\n                h.Statut,\n                h.DateCreation,\n            r.Designation1 as operatorName,\n                l.DesignationLct1 as Article,\n                l.DesignationLct2 as ArticleDetail\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS] h\n            LEFT JOIN [SEDI_ERP].[dbo].[RESSOURC] r ON h.CodeRubrique = r.Coderessource\n            LEFT JOIN [SEDI_ERP].[dbo].[LCTE] l ON l.CodeLancement = h.CodeLanctImprod\n            WHERE h.CodeRubrique = '${operatorCode}'\n            ORDER BY h.DateCreation DESC\n        `;\n        \n        const operatorEvents = await executeQuery(operatorEventsQuery);\n        \n        // Traiter les événements pour regrouper par lancement\n        const processedLancements = processLancementEvents(operatorEvents);\n        \n        // Formater les données pour l'interface opérateur (sans pauseTime)\n        const formattedOperations = processedLancements.map(lancement => ({\n            id: lancement.id,\n            operatorId: lancement.operatorId,\n            operatorName: operatorEvents.find(e => e.CodeRubrique === lancement.operatorId)?.operatorName || 'Non assigné',\n            lancementCode: lancement.lancementCode,\n            article: operatorEvents.find(e => e.CodeLanctImprod === lancement.lancementCode)?.Article || 'N/A',\n            articleDetail: operatorEvents.find(e => e.CodeLanctImprod === lancement.lancementCode)?.ArticleDetail || '',\n            startTime: lancement.startTime,\n            endTime: lancement.endTime,\n            duration: lancement.duration,\n            status: lancement.status,\n            statusCode: lancement.statusCode,\n            generalStatus: lancement.generalStatus,\n            events: lancement.events,\n            editable: true\n        }));\n\n        console.log(`✅ ${formattedOperations.length} lancements traités pour l'opérateur ${operatorCode}`);\n\n        res.json({\n            success: true,\n            operations: formattedOperations,\n            operatorCode: operatorCode,\n            count: formattedOperations.length\n        });\n\n    } catch (error) {\n        console.error(`❌ Erreur lors de la récupération des lancements:`, error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors de la récupération des lancements de l\\'opérateur',\n            details: error.message\n        });\n    }\n});\n\nrouter.get('/tables-info', async (req, res) => {\n    try {\n        console.log('🔍 Récupération des informations des tables abetemps');\n\n        // Requête pour abetemps_Pause avec informations opérateur\n        const pauseQuery = `\n            SELECT TOP 50\n                p.NoEnreg,\n            p.Ident,\n                p.DateTravail,\n                p.CodeLanctImprod,\n            p.Phase,\n            p.CodePoste,\n                p.CodeOperateur,\n                r.Designation1 as NomOperateur\n        FROM [SEDI_ERP].[GPSQL].[abetemps_Pause] p\n        LEFT JOIN [SEDI_ERP].[dbo].[RESSOURC] r ON p.CodeOperateur = r.Coderessource\n            ORDER BY p.DateTravail DESC\n        `;\n\n        // Requête pour abetemps_temp avec informations opérateur\n        const tempQuery = `\n            SELECT TOP 50\n                t.NoEnreg,\n                t.Ident,\n                t.DateTravail,\n                t.CodeLanctImprod,\n                t.Phase,\n                t.CodePoste,\n                t.CodeOperateur,\n                r.Designation1 as NomOperateur\n            FROM [SEDI_ERP].[GPSQL].[abetemps_temp] t\n            LEFT JOIN [SEDI_ERP].[dbo].[RESSOURC] r ON t.CodeOperateur = r.Coderessource\n            ORDER BY t.DateTravail DESC\n        `;\n\n        console.log('📊 Exécution des requêtes pour abetemps_Pause et abetemps_temp');\n\n        const [pauseData, tempData] = await Promise.all([\n            executeQuery(pauseQuery),\n            executeQuery(tempQuery)\n        ]);\n\n        console.log(`✅ Données récupérées: ${pauseData.length} entrées Pause, ${tempData.length} entrées Temp`);\n\n        res.json({\n            success: true,\n            data: {\n                abetemps_Pause: pauseData,\n                abetemps_temp: tempData\n            },\n            counts: {\n                pause: pauseData.length,\n                temp: tempData.length\n            }\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur lors de la récupération des tables:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors de la récupération des informations des tables',\n            details: error.message\n        });\n    }\n});\n\n// Route pour transférer les opérations terminées vers SEDI_APP_INDEPENDANTE\nrouter.post('/transfer', async (req, res) => {\n    try {\n        console.log('🔄 Fonction de transfert temporairement désactivée pour debug...');\n        \n        // Retourner un message informatif\n        res.json({\n            success: true,\n            message: 'Fonction de transfert temporairement désactivée - Fonctionnalités principales opérationnelles',\n            note: 'Cette fonction sera réactivée après résolution du problème de colonnes'\n        });\n        return;\n\n        // Récupérer toutes les opérations terminées (statut FIN) de la table abetemps\n        const getCompletedOperationsQuery = `\n            SELECT \n                a.NoEnreg,\n                a.CodeOperateur,\n                a.CodeLanctImprod,\n                a.Phase,\n                a.CodePoste,\n                a.Ident,\n                'TERMINE' as Statut,\n                a.DateTravail\n            FROM [SEDI_ERP].[GPSQL].[abetemps] a\n            WHERE a.Ident = 'FIN'\n            AND CAST(a.DateTravail AS DATE) = CAST(GETDATE() AS DATE)\n        `;\n\n        const completedOperations = await executeQuery(getCompletedOperationsQuery);\n        console.log(` ${completedOperations.length} opérations terminées trouvées`);\n\n        let transferredCount = 0;\n\n        // Transférer chaque opération vers SEDI_APP_INDEPENDANTE\n        for (const operation of completedOperations) {\n            try {\n                const insertQuery = `\n                    INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n                    (OperatorCode, CodeLanctImprod, CodeRubrique, Ident, Phase, Statut, HeureDebut, HeureFin, DateCreation)\n                    VALUES (\n                        '${operation.CodeOperateur}',\n                        '${operation.CodeLanctImprod}',\n                        '${operation.CodePoste || '929'}',\n                        '${operation.Ident}',\n                        '${operation.Phase || 'PRODUCTION'}',\n                        '${operation.Statut}',\n                        GETDATE(),\n                        GETDATE(),\n                        GETDATE()\n                    )\n                `;\n\n                await executeQuery(insertQuery);\n                transferredCount++;\n                console.log(` Opération ${operation.CodeLanctImprod} transférée`);\n\n            } catch (insertError) {\n                console.error(` Erreur lors du transfert de l'opération ${operation.CodeLanctImprod}:`, insertError);\n            }\n        }\n\n        console.log(` Transfert terminé: ${transferredCount}/${completedOperations.length} opérations transférées`);\n\n        res.json({\n            success: true,\n            message: 'Transfert terminé avec succès',\n            totalFound: completedOperations.length,\n            transferredCount: transferredCount,\n            errors: completedOperations.length - transferredCount,\n            testColumns: Object.keys(testResult[0] || {})\n        });\n\n    } catch (error) {\n        console.error(' Erreur lors du transfert:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors du transfert vers SEDI_APP_INDEPENDANTE',\n            details: error.message\n        });\n    }\n});\n\n// Route de test pour abetemps_temp\nrouter.get('/debug/temp-table', async (req, res) => {\n    try {\n        const query = `SELECT TOP 10 * FROM [SEDI_ERP].[GPSQL].[abetemps_temp]`;\n        const results = await executeQuery(query);\n        res.json({ \n            success: true, \n            count: results.length,\n            data: results\n        });\n    } catch (error) {\n        console.error('Erreur debug abetemps_temp:', error);\n        res.status(500).json({ success: false, error: error.message });\n    }\n});\n\n// Route de débogage pour voir le contenu des 3 tables\nrouter.get('/debug/tables-content', async (req, res) => {\n    try {\n        const tempQuery = `SELECT COUNT(*) as count FROM [SEDI_ERP].[GPSQL].[abetemps_temp]`;\n        const pauseQuery = `SELECT COUNT(*) as count FROM [SEDI_ERP].[GPSQL].[abetemps_Pause]`;\n        const completedQuery = `SELECT COUNT(*) as count FROM [SEDI_ERP].[GPSQL].[abetemps] WHERE Ident = 'Prod'`;\n        \n        const [tempResults, pauseResults, completedResults] = await Promise.all([\n            executeQuery(tempQuery),\n            executeQuery(pauseQuery),\n            executeQuery(completedQuery)\n        ]);\n        \n        res.json({ \n            success: true, \n            tables: {\n                abetemps_temp: tempResults[0].count,\n                abetemps_Pause: pauseResults[0].count,\n                abetemps_completed: completedResults[0].count\n            }\n        });\n    } catch (error) {\n        console.error('Erreur debug tables:', error);\n        res.status(500).json({ success: false, error: error.message });\n    }\n});\n\n// Route de débogage pour voir les valeurs de Ident\nrouter.get('/debug/ident-values', async (req, res) => {\n    try {\n        const query = `\n            SELECT \n                Ident, \n                COUNT(*) as count\n            FROM [SEDI_ERP].[GPSQL].[abetemps]\n            GROUP BY Ident\n            ORDER BY count DESC\n        `;\n        \n        const results = await executeQuery(query);\n        res.json({ success: true, identValues: results });\n    } catch (error) {\n        console.error('Erreur debug ident:', error);\n        res.status(500).json({ success: false, error: error.message });\n    }\n});\n\n// GET /api/admin/validate-lancement/:code - Valider un code de lancement\nrouter.get('/validate-lancement/:code', async (req, res) => {\n    try {\n        const { code } = req.params;\n        \n        console.log(`🔍 Validation du code lancement: ${code}`);\n        \n        // Valider le format du code (LT + 7 chiffres)\n        const codePattern = /^LT\\d{7}$/;\n        if (!codePattern.test(code)) {\n            return res.json({\n                success: false,\n                valid: false,\n                error: 'Format invalide. Le code doit être au format LT + 7 chiffres (ex: LT2501145)'\n            });\n        }\n        \n        // Vérifier l'existence dans la base de données\n        const validationQuery = `\n            SELECT TOP 1 \n                CodeLancement,\n                DesignationLct1,\n                DesignationLct2,\n                StatutLancement\n            FROM [SEDI_ERP].[dbo].[LCTE] \n            WHERE CodeLancement = @code\n        `;\n        \n        const result = await executeQuery(validationQuery, { code });\n        \n        if (result.length === 0) {\n            return res.json({\n                success: true,\n                valid: false,\n                error: 'Code de lancement non trouvé dans la base de données'\n            });\n        }\n        \n        const lancement = result[0];\n        \n        res.json({\n            success: true,\n            valid: true,\n            data: {\n                code: lancement.CodeLancement,\n                designation: lancement.DesignationLct1,\n                designationDetail: lancement.DesignationLct2,\n                statut: lancement.StatutLancement\n            }\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur validation code lancement:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur serveur lors de la validation'\n        });\n    }\n});\n\n// Route pour recréer les tables SEDI_APP_INDEPENDANTE avec la bonne structure\n// Route pour supprimer toutes les tables SEDI_APP_INDEPENDANTE\nrouter.post('/delete-all-sedi-tables', async (req, res) => {\n    try {\n        console.log('🗑️ Suppression de toutes les tables SEDI_APP_INDEPENDANTE...');\n        \n        // Supprimer toutes les données des tables\n        const deleteQueries = [\n            'DELETE FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]',\n            'DELETE FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]',\n            'DELETE FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]'\n        ];\n        \n        for (const query of deleteQueries) {\n            try {\n                await executeQuery(query);\n                console.log(`✅ Données supprimées: ${query.split('.')[3]}`);\n            } catch (error) {\n                console.log(`⚠️ Table peut-être inexistante: ${query.split('.')[3]}`);\n            }\n        }\n        \n        // Optionnel: Supprimer complètement les tables\n        const dropQueries = [\n            'DROP TABLE IF EXISTS [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]',\n            'DROP TABLE IF EXISTS [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]',\n            'DROP TABLE IF EXISTS [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]'\n        ];\n        \n        for (const query of dropQueries) {\n            try {\n                await executeQuery(query);\n                console.log(`✅ Table supprimée: ${query.split('.')[3]}`);\n            } catch (error) {\n                console.log(`⚠️ Erreur suppression table: ${error.message}`);\n            }\n        }\n        \n        console.log('✅ Suppression terminée');\n        \n        res.json({\n            success: true,\n            message: 'Toutes les tables SEDI_APP_INDEPENDANTE ont été supprimées',\n            deletedTables: [\n                'ABHISTORIQUE_OPERATEURS',\n                'ABSESSIONS_OPERATEURS', \n                'ABTEMPS_OPERATEURS'\n            ]\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur lors de la suppression des tables:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors de la suppression des tables',\n            details: error.message\n        });\n    }\n});\n\nrouter.post('/recreate-tables', async (req, res) => {\n    try {\n        console.log('🔧 Recréation des tables SEDI_APP_INDEPENDANTE...');\n\n        // Supprimer et recréer ABSESSIONS_OPERATEURS\n        const dropSessionsTable = `\n            IF OBJECT_ID('[SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]', 'U') IS NOT NULL\n            DROP TABLE [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]\n        `;\n\n        const createSessionsTable = `\n            CREATE TABLE [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS] (\n                SessionId INT IDENTITY(1,1) PRIMARY KEY,\n                OperatorCode NVARCHAR(50) NOT NULL,\n                LoginTime DATETIME2 NOT NULL,\n                LogoutTime DATETIME2 NULL,\n                SessionStatus NVARCHAR(20) NOT NULL DEFAULT 'ACTIVE',\n                DeviceInfo NVARCHAR(255) NULL,\n                DateCreation DATETIME2 NOT NULL DEFAULT GETDATE()\n            )\n        `;\n\n        // Supprimer et recréer ABTEMPS_OPERATEURS\n        const dropTempsTable = `\n            IF OBJECT_ID('[SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]', 'U') IS NOT NULL\n            DROP TABLE [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]\n        `;\n\n        const createTempsTable = `\n            CREATE TABLE [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS] (\n                TempsId INT IDENTITY(1,1) PRIMARY KEY,\n                OperatorCode NVARCHAR(50) NOT NULL,\n                LancementCode NVARCHAR(50) NOT NULL,\n                StartTime DATETIME2 NOT NULL,\n                EndTime DATETIME2 NOT NULL,\n                TotalDuration INT NOT NULL, -- en minutes\n                PauseDuration INT NOT NULL DEFAULT 0, -- en minutes\n                ProductiveDuration INT NOT NULL, -- en minutes\n                EventsCount INT NOT NULL DEFAULT 0,\n                DateCreation DATETIME2 NOT NULL DEFAULT GETDATE(),\n                UNIQUE(OperatorCode, LancementCode, StartTime)\n            )\n        `;\n\n        await executeQuery(dropSessionsTable);\n        await executeQuery(createSessionsTable);\n        console.log('✅ Table ABSESSIONS_OPERATEURS recréée');\n\n        await executeQuery(dropTempsTable);\n        await executeQuery(createTempsTable);\n        console.log('✅ Table ABTEMPS_OPERATEURS recréée');\n\n        // Supprimer et recréer ABHISTORIQUE_OPERATEURS\n        const dropHistoriqueTable = `\n            IF OBJECT_ID('[SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]', 'U') IS NOT NULL\n            DROP TABLE [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n        `;\n\n        const createHistoriqueTable = `\n            CREATE TABLE [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS] (\n                NoEnreg INT IDENTITY(1,1) PRIMARY KEY,\n                OperatorCode NVARCHAR(50) NOT NULL,\n                CodeLanctImprod NVARCHAR(50) NOT NULL,\n                CodeRubrique NVARCHAR(50) NOT NULL,\n                Ident NVARCHAR(20) NOT NULL, -- DEBUT, PAUSE, REPRISE, FIN\n                Phase NVARCHAR(50) NULL,\n                Statut NVARCHAR(20) NULL,\n                HeureDebut TIME NULL, -- Format HH:mm seulement\n                HeureFin TIME NULL, -- Format HH:mm seulement\n                DateCreation DATE NOT NULL DEFAULT CAST(GETDATE() AS DATE), -- Date seulement\n                INDEX IX_Historique_Operator_Lancement (OperatorCode, CodeLanctImprod),\n                INDEX IX_Historique_Date (DateCreation)\n            )\n        `;\n\n        try {\n            await executeQuery(dropHistoriqueTable);\n            console.log('🗑️ Table ABHISTORIQUE_OPERATEURS supprimée (si elle existait)');\n    } catch (error) {\n            console.log('⚠️ Table ABHISTORIQUE_OPERATEURS n\\'existait pas');\n        }\n        \n        await executeQuery(createHistoriqueTable);\n        console.log('✅ Table ABHISTORIQUE_OPERATEURS recréée');\n\n        res.json({\n            success: true,\n            message: 'Tables SEDI_APP_INDEPENDANTE recréées avec succès',\n            tables: ['ABHISTORIQUE_OPERATEURS', 'ABSESSIONS_OPERATEURS', 'ABTEMPS_OPERATEURS']\n        });\n\n    } catch (error) {\n        console.error('❌ Erreur recréation tables:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors de la recréation des tables',\n            details: error.message\n        });\n    }\n});\n\n// Route pour initialiser les tables manquantes SEDI_APP_INDEPENDANTE\nrouter.post('/init-tables', async (req, res) => {\n    try {\n        console.log('🔧 Initialisation des tables SEDI_APP_INDEPENDANTE...');\n\n        // Créer ABSESSIONS_OPERATEURS si elle n'existe pas\n        const createSessionsTable = `\n            IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='ABSESSIONS_OPERATEURS' AND xtype='U')\n            CREATE TABLE [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS] (\n                SessionId INT IDENTITY(1,1) PRIMARY KEY,\n                OperatorCode NVARCHAR(50) NOT NULL,\n                LoginTime DATETIME2 NOT NULL,\n                LogoutTime DATETIME2 NULL,\n                SessionStatus NVARCHAR(20) NOT NULL DEFAULT 'ACTIVE',\n                DeviceInfo NVARCHAR(255) NULL,\n                DateCreation DATETIME2 NOT NULL DEFAULT GETDATE()\n            )\n        `;\n\n        // Créer ABTEMPS_OPERATEURS si elle n'existe pas\n        const createTempsTable = `\n            IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='ABTEMPS_OPERATEURS' AND xtype='U')\n            CREATE TABLE [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS] (\n                TempsId INT IDENTITY(1,1) PRIMARY KEY,\n                OperatorCode NVARCHAR(50) NOT NULL,\n                LancementCode NVARCHAR(50) NOT NULL,\n                StartTime DATETIME2 NOT NULL,\n                EndTime DATETIME2 NOT NULL,\n                TotalDuration INT NOT NULL, -- en minutes\n                PauseDuration INT NOT NULL DEFAULT 0, -- en minutes\n                ProductiveDuration INT NOT NULL, -- en minutes\n                EventsCount INT NOT NULL DEFAULT 0,\n                DateCreation DATETIME2 NOT NULL DEFAULT GETDATE(),\n                UNIQUE(OperatorCode, LancementCode, StartTime)\n            )\n        `;\n\n        await executeQuery(createSessionsTable);\n        console.log('✅ Table ABSESSIONS_OPERATEURS créée/vérifiée');\n\n        await executeQuery(createTempsTable);\n        console.log('✅ Table ABTEMPS_OPERATEURS créée/vérifiée');\n\n        res.json({\n            success: true,\n            message: 'Tables SEDI_APP_INDEPENDANTE initialisées avec succès',\n            tables: ['ABHISTORIQUE_OPERATEURS', 'ABSESSIONS_OPERATEURS', 'ABTEMPS_OPERATEURS']\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur initialisation tables:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors de l\\'initialisation des tables',\n            details: error.message\n        });\n    }\n});\n\n// Route de débogage pour analyser les 3 tables SEDI_APP_INDEPENDANTE\nrouter.get('/debug/sedi-tables', async (req, res) => {\n    try {\n        console.log('🔍 Analyse des 3 tables SEDI_APP_INDEPENDANTE...');\n\n        // Analyser ABHISTORIQUE_OPERATEURS\n        const historiqueQuery = `\n            SELECT TOP 5 * \n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            ORDER BY DateCreation DESC\n        `;\n\n        // Analyser ABSESSIONS_OPERATEURS\n        const sessionsQuery = `\n            SELECT TOP 5 * \n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]\n            ORDER BY DateCreation DESC\n        `;\n\n        // Analyser ABTEMPS_OPERATEURS\n        const tempsQuery = `\n            SELECT TOP 5 * \n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]\n            ORDER BY DateCreation DESC\n        `;\n\n        const [historiqueResults, sessionsResults, tempsResults] = await Promise.all([\n            executeQuery(historiqueQuery).catch(err => ({ error: err.message })),\n            executeQuery(sessionsQuery).catch(err => ({ error: err.message })),\n            executeQuery(tempsQuery).catch(err => ({ error: err.message }))\n        ]);\n\n        // Compter les enregistrements\n        const countHistoriqueQuery = `SELECT COUNT(*) as count FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]`;\n        const countSessionsQuery = `SELECT COUNT(*) as count FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]`;\n        const countTempsQuery = `SELECT COUNT(*) as count FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]`;\n\n        const [countHistorique, countSessions, countTemps] = await Promise.all([\n            executeQuery(countHistoriqueQuery).catch(err => [{ count: 0, error: err.message }]),\n            executeQuery(countSessionsQuery).catch(err => [{ count: 0, error: err.message }]),\n            executeQuery(countTempsQuery).catch(err => [{ count: 0, error: err.message }])\n        ]);\n\n        res.json({\n            success: true,\n            tables: {\n                ABHISTORIQUE_OPERATEURS: {\n                    count: countHistorique[0]?.count || 0,\n                    sample: historiqueResults.error ? { error: historiqueResults.error } : historiqueResults,\n                    columns: historiqueResults.length > 0 ? Object.keys(historiqueResults[0]) : []\n                },\n                ABSESSIONS_OPERATEURS: {\n                    count: countSessions[0]?.count || 0,\n                    sample: sessionsResults.error ? { error: sessionsResults.error } : sessionsResults,\n                    columns: sessionsResults.length > 0 ? Object.keys(sessionsResults[0]) : []\n                },\n                ABTEMPS_OPERATEURS: {\n                    count: countTemps[0]?.count || 0,\n                    sample: tempsResults.error ? { error: tempsResults.error } : tempsResults,\n                    columns: tempsResults.length > 0 ? Object.keys(tempsResults[0]) : []\n                }\n            }\n        });\n        \n    } catch (error) {\n        console.error('Erreur debug tables SEDI:', error);\n        res.status(500).json({ success: false, error: error.message });\n    }\n});\n\n// GET /api/admin/lancement/:code - Rechercher un lancement dans LCTE\nrouter.get('/lancement/:code', async (req, res) => {\n    try {\n        const { code } = req.params;\n        \n        console.log(` Recherche du lancement ${code}...`);\n        \n        const validation = await validateLancement(code);\n        \n        if (validation.valid) {\n            res.json({\n                success: true,\n                data: validation.data\n            });\n        } else {\n            res.status(404).json({\n                success: false,\n                error: validation.error\n            });\n        }\n        \n    } catch (error) {\n        console.error(' Erreur lors de la recherche du lancement:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur serveur lors de la recherche du lancement'\n        });\n    }\n});\n\n// GET /api/admin/abetemps - Voir les données de la table abetemps\nrouter.get('/abetemps', async (req, res) => {\n    try {\n        const { lancement } = req.query;\n        \n        if (lancement) {\n            console.log(`🔍 Recherche du lancement ${lancement} dans abetemps...`);\n            \n            const query = `\n                SELECT TOP 10\n                    [NoEnreg],\n                    [Ident],\n                    [CodeLanctImprod],\n                    [Phase],\n                    [CodeOperateur]\n                FROM [SEDI_ERP].[GPSQL].[abetemps]\n                WHERE [CodeLanctImprod] = '${lancement}'\n                ORDER BY [NoEnreg] DESC\n            `;\n            \n            const result = await executeQuery(query);\n            console.log(`✅ ${result.length} entrées trouvées pour ${lancement} dans abetemps`);\n            \n            res.json({\n                success: true,\n                data: result || [],\n                lancement: lancement\n            });\n        } else {\n            console.log('🔍 Récupération de 10 entrées depuis abetemps...');\n            \n            const query = `\n                SELECT TOP 10\n                    [NoEnreg],\n                    [Ident],\n                    [CodeLanctImprod],\n                    [Phase],\n                    [CodeOperateur]\n                FROM [SEDI_ERP].[GPSQL].[abetemps]\n                ORDER BY [NoEnreg] DESC\n            `;\n            \n            const result = await executeQuery(query);\n            console.log(`✅ ${result.length} entrées récupérées depuis abetemps`);\n            \n            res.json({\n                success: true,\n                data: result || []\n            });\n        }\n        \n    } catch (error) {\n        console.error('❌ Erreur lors de la récupération de abetemps:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur serveur lors de la récupération de abetemps'\n        });\n    }\n});\n\n// GET /api/admin/lcte - Voir les données de la table LCTE\nrouter.get('/lcte', async (req, res) => {\n    try {\n        const { limit = 10 } = req.query;\n        \n        console.log(`🔍 Récupération de ${limit} lancements depuis LCTE...`);\n        \n        const query = `\n            SELECT TOP ${parseInt(limit)} \n                [CodeLancement],\n                [CodeArticle],\n                [DesignationLct1],\n                [CodeModele],\n                [DesignationArt1],\n                [DesignationArt2]\n            FROM [SEDI_ERP].[dbo].[LCTE]\n            ORDER BY [CodeLancement]\n        `;\n        \n        const result = await executeQuery(query);\n        \n        console.log(` ${result.length} lancements récupérés depuis LCTE`);\n        \n        res.json({\n            success: true,\n            data: result || [],\n            count: result.length\n        });\n        \n    } catch (error) {\n        console.error(' Erreur lors de la récupération des lancements LCTE:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur serveur lors de la récupération des lancements'\n        });\n    }\n});\n\n// GET /api/admin/lancements/search - Rechercher des lancements par terme\nrouter.get('/lancements/search', async (req, res) => {\n    try {\n        const { term, limit = 10 } = req.query;\n        \n        if (!term || term.length < 2) {\n            return res.json({\n                success: true,\n                data: []\n            });\n        }\n        \n        console.log(`🔍 Recherche de lancements avec le terme: ${term}`);\n        \n        const searchTerm = `%${term}%`;\n        const query = `\n            SELECT TOP ${parseInt(limit)} \n                [CodeLancement],\n                [CodeArticle],\n                [DesignationLct1],\n                [CodeModele],\n                [DesignationArt1],\n                [DesignationArt2]\n            FROM [SEDI_ERP].[dbo].[LCTE]\n            WHERE [CodeLancement] LIKE '${searchTerm}'\n               OR [DesignationLct1] LIKE '${searchTerm}'\n               OR [CodeArticle] LIKE '${searchTerm}'\n            ORDER BY [CodeLancement]\n        `;\n        \n        const result = await executeQuery(query);\n        \n        console.log(` ${result.length} lancements trouvés`);\n        \n        res.json({\n            success: true,\n            data: result || []\n        });\n        \n    } catch (error) {\n        console.error(' Erreur lors de la recherche de lancements:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur serveur lors de la recherche'\n        });\n    }\n});\n\n// Route spécifique pour créer ABHISTORIQUE_OPERATEURS\nrouter.post('/create-historique-table', async (req, res) => {\n    try {\n        console.log('🔧 Création de la table ABHISTORIQUE_OPERATEURS...');\n\n        // Supprimer et recréer ABHISTORIQUE_OPERATEURS\n        const dropHistoriqueTable = `\n            IF OBJECT_ID('[SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]', 'U') IS NOT NULL\n            DROP TABLE [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n        `;\n\n        const createHistoriqueTable = `\n            CREATE TABLE [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS] (\n                NoEnreg INT IDENTITY(1,1) PRIMARY KEY,\n                OperatorCode NVARCHAR(50) NOT NULL,\n                CodeLanctImprod NVARCHAR(50) NOT NULL,\n                CodeRubrique NVARCHAR(50) NOT NULL,\n                Ident NVARCHAR(20) NOT NULL, -- DEBUT, PAUSE, REPRISE, FIN\n                Phase NVARCHAR(50) NULL,\n                Statut NVARCHAR(20) NULL,\n                HeureDebut TIME NULL, -- Format HH:mm seulement\n                HeureFin TIME NULL, -- Format HH:mm seulement\n                DateCreation DATE NOT NULL DEFAULT CAST(GETDATE() AS DATE), -- Date seulement\n                INDEX IX_Historique_Operator_Lancement (OperatorCode, CodeLanctImprod),\n                INDEX IX_Historique_Date (DateCreation)\n            )\n        `;\n\n        await executeQuery(dropHistoriqueTable);\n        await executeQuery(createHistoriqueTable);\n        console.log(' Table ABHISTORIQUE_OPERATEURS créée avec succès');\n\n        res.json({\n            success: true,\n            message: 'Table ABHISTORIQUE_OPERATEURS créée avec succès'\n        });\n\n    } catch (error) {\n        console.error(' Erreur création table ABHISTORIQUE_OPERATEURS:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors de la création de la table ABHISTORIQUE_OPERATEURS',\n            details: error.message\n        });\n    }\n});\n\n// Route de debug pour tester la logique de tous les lancements\nrouter.get('/debug/all-lancements-status', async (req, res) => {\n    try {\n        console.log('🔍 Debug de tous les lancements...');\n        \n        // Récupérer tous les événements\n        const eventsQuery = `\n            SELECT \n                h.NoEnreg,\n                h.Ident,\n                h.CodeLanctImprod,\n                h.CodeRubrique,\n                h.HeureDebut,\n                h.HeureFin,\n                h.DateCreation\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS] h\n            ORDER BY h.CodeLanctImprod, h.CodeRubrique, h.DateCreation ASC\n        `;\n        \n        const events = await executeQuery(eventsQuery);\n        \n        // Grouper par lancement\n        const lancementGroups = {};\n        events.forEach(event => {\n            const key = `${event.CodeLanctImprod}_${event.CodeRubrique}`;\n            if (!lancementGroups[key]) {\n                lancementGroups[key] = [];\n            }\n            lancementGroups[key].push(event);\n        });\n        \n        const analysis = [];\n        \n        Object.keys(lancementGroups).forEach(key => {\n            const groupEvents = lancementGroups[key].sort((a, b) => \n                new Date(a.DateCreation) - new Date(b.DateCreation)\n            );\n            \n            const [lancementCode, operatorCode] = key.split('_');\n            const lastEvent = groupEvents[groupEvents.length - 1];\n            const finEvent = groupEvents.find(e => e.Ident === 'FIN');\n            const pauseEvents = groupEvents.filter(e => e.Ident === 'PAUSE');\n            const repriseEvents = groupEvents.filter(e => e.Ident === 'REPRISE');\n            \n            // Déterminer le statut selon la nouvelle logique\n            let currentStatus = 'EN_COURS';\n            if (finEvent) {\n                currentStatus = 'TERMINE';\n            } else if (lastEvent.Ident === 'PAUSE') {\n                currentStatus = 'PAUSE';\n            } else if (lastEvent.Ident === 'REPRISE') {\n                currentStatus = 'EN_COURS';\n            }\n            \n            analysis.push({\n                lancementCode,\n                operatorCode,\n                totalEvents: groupEvents.length,\n                pauseEvents: pauseEvents.length,\n                repriseEvents: repriseEvents.length,\n                lastEvent: lastEvent ? {\n                    ident: lastEvent.Ident,\n                    date: lastEvent.DateCreation,\n                    heure: lastEvent.HeureDebut\n                } : null,\n                currentStatus,\n                isFinished: !!finEvent,\n                events: groupEvents.map(e => ({\n                    id: e.NoEnreg,\n                    ident: e.Ident,\n                    date: e.DateCreation,\n                    heure: e.HeureDebut\n                }))\n            });\n        });\n        \n        console.log(`📊 Analyse de ${analysis.length} lancements terminée`);\n        \n        res.json({\n            success: true,\n            totalLancements: analysis.length,\n            analysis: analysis.sort((a, b) => a.lancementCode.localeCompare(b.lancementCode))\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur debug tous les lancements:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors du debug de tous les lancements',\n            details: error.message\n        });\n    }\n});\n\n// Route pour nettoyer les données de test et créer des pauses terminées\nrouter.post('/debug/create-test-pause-reprise', async (req, res) => {\n    try {\n        console.log('🧪 Création de données de test pause/reprise...');\n        \n        const { operatorCode = '929', lancementCode = 'LT2501148' } = req.body;\n        \n        // Créer une pause terminée pour tester\n        const pauseQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            (OperatorCode, CodeLanctImprod, CodeRubrique, Ident, Phase, Statut, HeureDebut, HeureFin, DateCreation)\n            VALUES (\n                '${operatorCode}',\n                '${lancementCode}',\n                'PRODUCTION',\n                'PAUSE',\n                'PRODUCTION',\n                'EN_PAUSE',\n                CAST('14:30:00' AS TIME),\n                NULL,\n                CAST(GETDATE() AS DATE)\n            )\n        `;\n        \n        const repriseQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            (OperatorCode, CodeLanctImprod, CodeRubrique, Ident, Phase, Statut, HeureDebut, HeureFin, DateCreation)\n            VALUES (\n                '${operatorCode}',\n                '${lancementCode}',\n                'PRODUCTION',\n                'REPRISE',\n                'PRODUCTION',\n                'EN_COURS',\n                CAST('14:45:00' AS TIME),\n                NULL,\n                CAST(GETDATE() AS DATE)\n            )\n        `;\n        \n        await executeQuery(pauseQuery);\n        await executeQuery(repriseQuery);\n        \n        console.log('✅ Données de test créées');\n        \n        res.json({\n            success: true,\n            message: 'Données de test pause/reprise créées',\n            data: {\n                operatorCode,\n                lancementCode,\n                pauseTime: '14:30:00',\n                repriseTime: '14:45:00'\n            }\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur création données test:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors de la création des données de test',\n            details: error.message\n        });\n    }\n});\n\n// Route de debug pour voir tous les lancements avec leurs pauses\nrouter.get('/debug/all-pauses', async (req, res) => {\n    try {\n        console.log('🔍 Debug de tous les lancements avec pauses...');\n        \n        // Récupérer tous les événements\n        const eventsQuery = `\n            SELECT \n                h.NoEnreg,\n                h.Ident,\n                h.CodeLanctImprod,\n                h.CodeRubrique,\n                h.HeureDebut,\n                h.HeureFin,\n                h.DateCreation\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS] h\n            ORDER BY h.CodeLanctImprod, h.CodeRubrique, h.DateCreation ASC\n        `;\n        \n        const events = await executeQuery(eventsQuery);\n        \n        // Grouper par lancement\n        const lancementGroups = {};\n        events.forEach(event => {\n            const key = `${event.CodeLanctImprod}_${event.CodeRubrique}`;\n            if (!lancementGroups[key]) {\n                lancementGroups[key] = [];\n            }\n            lancementGroups[key].push(event);\n        });\n        \n        const analysis = [];\n        \n        Object.keys(lancementGroups).forEach(key => {\n            const groupEvents = lancementGroups[key].sort((a, b) => \n                new Date(a.DateCreation) - new Date(b.DateCreation)\n            );\n            \n            const [lancementCode, operatorCode] = key.split('_');\n            const pauseEvents = groupEvents.filter(e => e.Ident === 'PAUSE');\n            const repriseEvents = groupEvents.filter(e => e.Ident === 'REPRISE');\n            \n            analysis.push({\n                lancementCode,\n                operatorCode,\n                totalEvents: groupEvents.length,\n                pauseEvents: pauseEvents.length,\n                repriseEvents: repriseEvents.length,\n                events: groupEvents.map(e => ({\n                    id: e.NoEnreg,\n                    ident: e.Ident,\n                    date: e.DateCreation,\n                    heure: e.HeureDebut\n                })),\n                pauseAnalysis: pauseEvents.map(pause => {\n                    const reprise = repriseEvents.find(r => \n                        new Date(r.DateCreation) > new Date(pause.DateCreation) &&\n                        r.CodeLanctImprod === pause.CodeLanctImprod &&\n                        r.CodeRubrique === pause.CodeRubrique\n                    );\n                    return {\n                        pauseId: pause.NoEnreg,\n                        pauseDate: pause.DateCreation,\n                        pauseHeure: pause.HeureDebut,\n                        hasReprise: !!reprise,\n                        repriseDate: reprise ? reprise.DateCreation : null,\n                        repriseHeure: reprise ? reprise.HeureDebut : null,\n                        status: reprise ? 'PAUSE_TERMINEE' : 'PAUSE'\n                    };\n                })\n            });\n        });\n        \n        res.json({\n            success: true,\n            totalLancements: analysis.length,\n            analysis: analysis.sort((a, b) => a.lancementCode.localeCompare(b.lancementCode))\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur debug toutes les pauses:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors du debug de toutes les pauses',\n            details: error.message\n        });\n    }\n});\n\n// Route de debug pour tester la logique pause/reprise\nrouter.get('/debug/pause-reprise/:lancementCode', async (req, res) => {\n    try {\n        const { lancementCode } = req.params;\n        \n        console.log(`🔍 Debug pause/reprise pour le lancement ${lancementCode}...`);\n        \n        // Récupérer tous les événements pour ce lancement\n        const eventsQuery = `\n            SELECT \n                h.NoEnreg,\n                h.Ident,\n                h.CodeLanctImprod,\n                h.CodeRubrique,\n                h.HeureDebut,\n                h.HeureFin,\n                h.DateCreation\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS] h\n            WHERE h.CodeLanctImprod = '${lancementCode}'\n            ORDER BY h.DateCreation ASC, h.NoEnreg ASC\n        `;\n        \n        const events = await executeQuery(eventsQuery);\n        \n        // Analyser les événements\n        const pauseEvents = events.filter(e => e.Ident === 'PAUSE');\n        const repriseEvents = events.filter(e => e.Ident === 'REPRISE');\n        \n        console.log(`📊 Événements trouvés pour ${lancementCode}:`, {\n            total: events.length,\n            pauses: pauseEvents.length,\n            reprises: repriseEvents.length,\n            events: events.map(e => ({\n                id: e.NoEnreg,\n                ident: e.Ident,\n                operator: e.CodeRubrique,\n                date: e.DateCreation,\n                heure: e.HeureDebut\n            }))\n        });\n        \n        res.json({\n            success: true,\n            lancementCode,\n            analysis: {\n                totalEvents: events.length,\n                pauseEvents: pauseEvents.length,\n                repriseEvents: repriseEvents.length,\n                events: events.map(e => ({\n                    id: e.NoEnreg,\n                    ident: e.Ident,\n                    operator: e.CodeRubrique,\n                    date: e.DateCreation,\n                    heure: e.HeureDebut\n                })),\n                pauseReprisePairs: pauseEvents.map(pause => {\n                    const reprise = repriseEvents.find(r => \n                        new Date(r.DateCreation) > new Date(pause.DateCreation) &&\n                        r.CodeLanctImprod === pause.CodeLanctImprod &&\n                        r.CodeRubrique === pause.CodeRubrique\n                    );\n                    return {\n                        pause: {\n                            id: pause.NoEnreg,\n                            date: pause.DateCreation,\n                            heure: pause.HeureDebut\n                        },\n                        reprise: reprise ? {\n                            id: reprise.NoEnreg,\n                            date: reprise.DateCreation,\n                            heure: reprise.HeureDebut\n                        } : null,\n                        status: reprise ? 'PAUSE_TERMINEE' : 'PAUSE'\n                    };\n                })\n            }\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur debug pause/reprise:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors du debug pause/reprise',\n            details: error.message\n        });\n    }\n});\n\n// Route de test pour vérifier le format HH:mm\nrouter.get('/test/time-format', async (req, res) => {\n    try {\n        console.log('🧪 Test du format HH:mm...');\n        \n        // Tests de formatTimeForSQL\n        const testCases = [\n            '14:30',      // Format HH:mm standard\n            '09:15',      // Format HH:mm avec zéro\n            '14:30:45',   // Format HH:mm:ss existant\n            '9:5',        // Format H:m (sans zéros)\n            null,         // Valeur null\n            '',           // Chaîne vide\n            'invalid'     // Format invalide\n        ];\n        \n        const results = testCases.map(input => ({\n            input: input,\n            output: formatTimeForSQL(input),\n            type: typeof input\n        }));\n        \n        console.log('🧪 Résultats des tests:', results);\n        \n        res.json({\n            success: true,\n            message: 'Tests du format HH:mm terminés',\n            format: 'HH:mm → HH:mm:ss (pour SQL)',\n            tests: results,\n            examples: {\n                'Frontend': '14:30',\n                'API': '14:30', \n                'SQL': '14:30:00',\n                'Display': '14:30'\n            }\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur test format:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur lors du test du format'\n        });\n    }\n});\n\nmodule.exports = router;\nmodule.exports.processLancementEventsWithPauses = processLancementEventsWithPauses;\nmodule.exports.getAdminOperations = getAdminOperations;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\routes\\auth.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":30,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":22,"suggestions":[{"fix":{"range":[892,951],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":22,"suggestions":[{"fix":{"range":[1312,1367],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":22,"suggestions":[{"fix":{"range":[2036,2092],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Routes d'authentification\nconst express = require('express');\nconst router = express.Router();\n\n// POST /api/auth/login - Connexion admin\nrouter.post('/login', async (req, res) => {\n    try {\n        const { username, password } = req.body;\n        \n        // Vérification simple des identifiants admin\n        if (username === 'admin' && password === 'admin') {\n            res.json({\n                success: true,\n                user: {\n                    id: 'admin',\n                    username: 'admin',\n                    role: 'admin',\n                    name: 'Administrateur SEDI'\n                },\n                message: 'Connexion administrateur réussie'\n            });\n        } else {\n            res.status(401).json({\n                success: false,\n                error: 'Identifiants invalides'\n            });\n        }\n        \n    } catch (error) {\n        console.error('Erreur lors de la connexion admin:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur interne du serveur'\n        });\n    }\n});\n\n// POST /api/auth/logout - Déconnexion admin\nrouter.post('/logout', async (req, res) => {\n    try {\n        res.json({\n            success: true,\n            message: 'Déconnexion réussie'\n        });\n    } catch (error) {\n        console.error('Erreur lors de la déconnexion:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur interne du serveur'\n        });\n    }\n});\n\n// GET /api/auth/verify - Vérifier la session admin\nrouter.get('/verify', async (req, res) => {\n    try {\n        // Pour l'instant, on considère que si la requête arrive ici, l'admin est connecté\n        // Dans une vraie application, on vérifierait le token JWT ou la session\n        res.json({\n            success: true,\n            user: {\n                id: 'admin',\n                username: 'admin',\n                role: 'admin',\n                name: 'Administrateur SEDI'\n            }\n        });\n    } catch (error) {\n        console.error('Erreur lors de la vérification:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur interne du serveur'\n        });\n    }\n});\n\nmodule.exports = router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\routes\\comments.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":20,"suggestions":[{"fix":{"range":[1364,1475],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":76,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":76,"endColumn":25,"suggestions":[{"fix":{"range":[2569,2653],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":22,"suggestions":[{"fix":{"range":[2933,3002],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":20,"suggestions":[{"fix":{"range":[3432,3513],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":103,"column":66,"nodeType":"CallExpression","messageId":"missingRadix","endLine":103,"endColumn":81,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[3604,3604],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":22,"suggestions":[{"fix":{"range":[3975,4050],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":20,"suggestions":[{"fix":{"range":[4491,4574],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":135,"column":68,"nodeType":"CallExpression","messageId":"missingRadix","endLine":135,"endColumn":83,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4667,4667],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":151,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":151,"endColumn":22,"suggestions":[{"fix":{"range":[5038,5126],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":20,"suggestions":[{"fix":{"range":[5470,5553],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":166,"column":45,"nodeType":"CallExpression","messageId":"missingRadix","endLine":166,"endColumn":60,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[5623,5623],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":182,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":182,"endColumn":22,"suggestions":[{"fix":{"range":[5994,6077],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":203,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":203,"endColumn":20,"suggestions":[{"fix":{"range":[6696,6787],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":205,"column":45,"nodeType":"CallExpression","messageId":"missingRadix","endLine":205,"endColumn":64,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6861,6861],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":220,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":220,"endColumn":22,"suggestions":[{"fix":{"range":[7212,7284],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":231,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":231,"endColumn":20,"suggestions":[{"fix":{"range":[7577,7621],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":22,"suggestions":[{"fix":{"range":[8107,8172],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":290,"column":32,"nodeType":"CallExpression","messageId":"missingRadix","endLine":290,"endColumn":61,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9561,9561],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":291,"column":34,"nodeType":"CallExpression","messageId":"missingRadix","endLine":291,"endColumn":65,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9628,9628],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":292,"column":35,"nodeType":"CallExpression","messageId":"missingRadix","endLine":292,"endColumn":67,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9697,9697],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":298,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":298,"endColumn":22,"suggestions":[{"fix":{"range":[9802,9877],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Routes pour la gestion des commentaires opérateurs\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst Comment = require('../models/Comment');\r\nconst emailService = require('../services/emailService');\r\nconst { executeQuery } = require('../config/database');\r\n\r\n// Validation des données d'entrée\r\nconst validateComment = (req, res, next) => {\r\n    const { operatorCode, operatorName, lancementCode, comment } = req.body;\r\n    \r\n    if (!operatorCode || !operatorName || !lancementCode || !comment) {\r\n        return res.status(400).json({\r\n            success: false,\r\n            error: 'Tous les champs sont requis (operatorCode, operatorName, lancementCode, comment)'\r\n        });\r\n    }\r\n    \r\n    if (comment.trim().length === 0) {\r\n        return res.status(400).json({\r\n            success: false,\r\n            error: 'Le commentaire ne peut pas être vide'\r\n        });\r\n    }\r\n    \r\n    if (comment.length > 2000) {\r\n        return res.status(400).json({\r\n            success: false,\r\n            error: 'Le commentaire ne peut pas dépasser 2000 caractères'\r\n        });\r\n    }\r\n    \r\n    next();\r\n};\r\n\r\n// POST /api/comments - Créer un nouveau commentaire\r\nrouter.post('/', validateComment, async (req, res) => {\r\n    try {\r\n        const { operatorCode, operatorName, lancementCode, comment } = req.body;\r\n        \r\n        console.log(`📝 Création d'un commentaire pour l'opérateur ${operatorCode} sur le lancement ${lancementCode}`);\r\n        \r\n        // Créer le commentaire en base de données\r\n        const commentResult = await Comment.create({\r\n            operatorCode,\r\n            operatorName,\r\n            lancementCode,\r\n            comment: comment.trim()\r\n        });\r\n        \r\n        if (!commentResult.success) {\r\n            return res.status(500).json({\r\n                success: false,\r\n                error: commentResult.error\r\n            });\r\n        }\r\n        \r\n        // Envoyer l'email de notification\r\n        const emailResult = await emailService.sendCommentNotification({\r\n            operatorCode,\r\n            operatorName,\r\n            lancementCode,\r\n            comment: comment.trim(),\r\n            timestamp: new Date().toLocaleString('fr-FR', {\r\n                timeZone: 'Europe/Paris',\r\n                year: 'numeric',\r\n                month: '2-digit',\r\n                day: '2-digit',\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                second: '2-digit'\r\n            })\r\n        });\r\n        \r\n        if (!emailResult.success) {\r\n            console.warn('⚠️ Commentaire enregistré mais email non envoyé:', emailResult.error);\r\n        }\r\n        \r\n        res.json({\r\n            success: true,\r\n            message: 'Commentaire enregistré et notification envoyée',\r\n            data: commentResult.data,\r\n            emailSent: emailResult.success\r\n        });\r\n        \r\n    } catch (error) {\r\n        console.error('❌ Erreur lors de la création du commentaire:', error);\r\n        res.status(500).json({\r\n            success: false,\r\n            error: 'Erreur serveur lors de la création du commentaire'\r\n        });\r\n    }\r\n});\r\n\r\n// GET /api/comments/operator/:operatorCode - Récupérer les commentaires d'un opérateur\r\nrouter.get('/operator/:operatorCode', async (req, res) => {\r\n    try {\r\n        const { operatorCode } = req.params;\r\n        const { limit = 50 } = req.query;\r\n        \r\n        console.log(`🔍 Récupération des commentaires pour l'opérateur ${operatorCode}`);\r\n        \r\n        const result = await Comment.getByOperator(operatorCode, parseInt(limit));\r\n        \r\n        if (!result.success) {\r\n            return res.status(500).json({\r\n                success: false,\r\n                error: result.error\r\n            });\r\n        }\r\n        \r\n        res.json({\r\n            success: true,\r\n            data: result.data,\r\n            count: result.data.length\r\n        });\r\n        \r\n    } catch (error) {\r\n        console.error('❌ Erreur lors de la récupération des commentaires:', error);\r\n        res.status(500).json({\r\n            success: false,\r\n            error: 'Erreur serveur lors de la récupération des commentaires'\r\n        });\r\n    }\r\n});\r\n\r\n// GET /api/comments/lancement/:lancementCode - Récupérer les commentaires d'un lancement\r\nrouter.get('/lancement/:lancementCode', async (req, res) => {\r\n    try {\r\n        const { lancementCode } = req.params;\r\n        const { limit = 50 } = req.query;\r\n        \r\n        console.log(`🔍 Récupération des commentaires pour le lancement ${lancementCode}`);\r\n        \r\n        const result = await Comment.getByLancement(lancementCode, parseInt(limit));\r\n        \r\n        if (!result.success) {\r\n            return res.status(500).json({\r\n                success: false,\r\n                error: result.error\r\n            });\r\n        }\r\n        \r\n        res.json({\r\n            success: true,\r\n            data: result.data,\r\n            count: result.data.length\r\n        });\r\n        \r\n    } catch (error) {\r\n        console.error('❌ Erreur lors de la récupération des commentaires du lancement:', error);\r\n        res.status(500).json({\r\n            success: false,\r\n            error: 'Erreur serveur lors de la récupération des commentaires'\r\n        });\r\n    }\r\n});\r\n\r\n// GET /api/comments - Récupérer tous les commentaires récents\r\nrouter.get('/', async (req, res) => {\r\n    try {\r\n        const { limit = 100 } = req.query;\r\n        \r\n        console.log(`🔍 Récupération de tous les commentaires récents (limite: ${limit})`);\r\n        \r\n        const result = await Comment.getAll(parseInt(limit));\r\n        \r\n        if (!result.success) {\r\n            return res.status(500).json({\r\n                success: false,\r\n                error: result.error\r\n            });\r\n        }\r\n        \r\n        res.json({\r\n            success: true,\r\n            data: result.data,\r\n            count: result.data.length\r\n        });\r\n        \r\n    } catch (error) {\r\n        console.error('❌ Erreur lors de la récupération de tous les commentaires:', error);\r\n        res.status(500).json({\r\n            success: false,\r\n            error: 'Erreur serveur lors de la récupération des commentaires'\r\n        });\r\n    }\r\n});\r\n\r\n// DELETE /api/comments/:commentId - Supprimer un commentaire\r\nrouter.delete('/:commentId', async (req, res) => {\r\n    try {\r\n        const { commentId } = req.params;\r\n        const { operatorCode } = req.body;\r\n        \r\n        if (!operatorCode) {\r\n            return res.status(400).json({\r\n                success: false,\r\n                error: 'operatorCode requis pour supprimer un commentaire'\r\n            });\r\n        }\r\n        \r\n        console.log(`🗑️ Suppression du commentaire ${commentId} par l'opérateur ${operatorCode}`);\r\n        \r\n        const result = await Comment.delete(parseInt(commentId), operatorCode);\r\n        \r\n        if (!result.success) {\r\n            return res.status(400).json({\r\n                success: false,\r\n                error: result.error\r\n            });\r\n        }\r\n        \r\n        res.json({\r\n            success: true,\r\n            message: result.message\r\n        });\r\n        \r\n    } catch (error) {\r\n        console.error('❌ Erreur lors de la suppression du commentaire:', error);\r\n        res.status(500).json({\r\n            success: false,\r\n            error: 'Erreur serveur lors de la suppression du commentaire'\r\n        });\r\n    }\r\n});\r\n\r\n// POST /api/comments/test-email - Tester l'envoi d'email\r\nrouter.post('/test-email', async (req, res) => {\r\n    try {\r\n        console.log('📧 Test d\\'envoi d\\'email...');\r\n        \r\n        const result = await emailService.sendTestEmail();\r\n        \r\n        if (result.success) {\r\n            res.json({\r\n                success: true,\r\n                message: 'Email de test envoyé avec succès',\r\n                messageId: result.messageId\r\n            });\r\n        } else {\r\n            res.status(500).json({\r\n                success: false,\r\n                error: result.error\r\n            });\r\n        }\r\n        \r\n    } catch (error) {\r\n        console.error('❌ Erreur lors du test d\\'envoi d\\'email:', error);\r\n        res.status(500).json({\r\n            success: false,\r\n            error: 'Erreur serveur lors du test d\\'envoi d\\'email'\r\n        });\r\n    }\r\n});\r\n\r\n// GET /api/comments/stats - Statistiques des commentaires\r\nrouter.get('/stats', async (req, res) => {\r\n    try {\r\n        const { period = 'today' } = req.query;\r\n        \r\n        let dateFilter = '';\r\n        switch (period) {\r\n            case 'today':\r\n                dateFilter = 'AND CAST(CreatedAt AS DATE) = CAST(GETDATE() AS DATE)';\r\n                break;\r\n            case 'week':\r\n                dateFilter = 'AND CreatedAt >= DATEADD(day, -7, GETDATE())';\r\n                break;\r\n            case 'month':\r\n                dateFilter = 'AND CreatedAt >= DATEADD(month, -1, GETDATE())';\r\n                break;\r\n        }\r\n        \r\n        const query = `\r\n            SELECT \r\n                COUNT(*) as totalComments,\r\n                COUNT(DISTINCT OperatorCode) as uniqueOperators,\r\n                COUNT(DISTINCT LancementCode) as uniqueLancements\r\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[AB_COMMENTAIRES_OPERATEURS]\r\n            WHERE 1=1 ${dateFilter}\r\n        `;\r\n        \r\n        const result = await executeQuery(query);\r\n        const stats = result[0];\r\n        \r\n        res.json({\r\n            success: true,\r\n            data: {\r\n                totalComments: parseInt(stats.totalComments),\r\n                uniqueOperators: parseInt(stats.uniqueOperators),\r\n                uniqueLancements: parseInt(stats.uniqueLancements),\r\n                period: period\r\n            }\r\n        });\r\n        \r\n    } catch (error) {\r\n        console.error('❌ Erreur lors de la récupération des statistiques:', error);\r\n        res.status(500).json({\r\n            success: false,\r\n            error: 'Erreur serveur lors de la récupération des statistiques'\r\n        });\r\n    }\r\n});\r\n\r\nmodule.exports = router;\r\n\r\n\r\n\r\n\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\routes\\lancements.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":22,"suggestions":[{"fix":{"range":[1436,1507],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":22,"suggestions":[{"fix":{"range":[2647,2716],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":22,"suggestions":[{"fix":{"range":[3525,3603],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":158,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":158,"endColumn":22,"suggestions":[{"fix":{"range":[4961,5048],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":236,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":236,"endColumn":22,"suggestions":[{"fix":{"range":[7265,7330],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":22,"suggestions":[{"fix":{"range":[8687,8755],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const express = require('express');\nconst { executeQuery, executeNonQuery } = require('../config/database');\nconst router = express.Router();\n\n// GET /api/lancements - Récupérer tous les lancements\nrouter.get('/', async (req, res) => {\n    try {\n        const { search, limit = 100 } = req.query;\n        \n        let query = `\n            SELECT TOP ${limit}\n                t.NoEnreg,\n                t.Ident,\n                t.DateTravail,\n                t.CodeLanctImprod as CodeLancement,\n                t.Phase,\n                t.CodePoste,\n                t.CodeOperateur,\n                l.DesignationLct1,\n                l.CodeArticle\n            FROM [SEDI_ERP].[GPSQL].[abetemps_temp] t\n            LEFT JOIN [SEDI_ERP].[dbo].[LCTE] l ON l.CodeLancement = t.CodeLanctImprod\n            WHERE 1=1\n        `;\n        \n        const params = {};\n        \n        // Filtre de recherche\n        if (search) {\n            query += ` AND (\n                t.CodeLanctImprod LIKE @search OR \n                l.DesignationLct1 LIKE @search OR \n                l.CodeArticle LIKE @search OR\n                t.CodeOperateur LIKE @search\n            )`;\n            params.search = `%${search}%`;\n        }\n        \n        query += ` ORDER BY t.DateTravail DESC, t.CodeLanctImprod`;\n        \n        const lancements = await executeQuery(query, params);\n        \n        res.json(lancements);\n        \n    } catch (error) {\n        console.error('Erreur lors de la récupération des lancements:', error);\n        res.status(500).json({ \n            error: 'Erreur lors de la récupération des lancements' \n        });\n    }\n});\n\n// GET /api/lancements/:code - Récupérer un lancement par son code\nrouter.get('/:code', async (req, res) => {\n    try {\n        const { code } = req.params;\n        \n        const query = `\n            SELECT TOP 1\n                t.NoEnreg,\n                t.Ident,\n                t.DateTravail,\n                t.CodeLanctImprod as CodeLancement,\n                t.Phase,\n                t.CodePoste,\n                t.CodeOperateur,\n                l.DesignationLct1,\n                l.CodeArticle\n            FROM [SEDI_ERP].[GPSQL].[abetemps_temp] t\n            LEFT JOIN [SEDI_ERP].[dbo].[LCTE] l ON l.CodeLancement = t.CodeLanctImprod\n            WHERE t.CodeLanctImprod = @code\n        `;\n        \n        const lancements = await executeQuery(query, { code });\n        \n        if (lancements.length === 0) {\n            return res.status(404).json({ \n                error: 'Lancement non trouvé' \n            });\n        }\n        \n        res.json(lancements[0]);\n        \n    } catch (error) {\n        console.error('Erreur lors de la récupération du lancement:', error);\n        res.status(500).json({ \n            error: 'Erreur lors de la récupération du lancement' \n        });\n    }\n});\n\n// GET /api/lancements/active - Récupérer les lancements actifs\nrouter.get('/active', async (req, res) => {\n    try {\n        const query = `\n            SELECT \n                CodeLancement,\n                DateMiseJour,\n                CodeArticle,\n                DesignationLct1,\n                Statut,\n                Quantite,\n                DateDebut,\n                DateFin\n            FROM [SEDI_ERP].[dbo].[LCTE]\n            WHERE Statut IN ('EN_COURS', 'EN_ATTENTE', 'PLANIFIE')\n            ORDER BY Priorite DESC, DateDebut ASC\n        `;\n        \n        const lancements = await executeQuery(query);\n        res.json(lancements);\n        \n    } catch (error) {\n        console.error('Erreur lors de la récupération des lancements actifs:', error);\n        res.status(500).json({ \n            error: 'Erreur lors de la récupération des lancements actifs' \n        });\n    }\n});\n\n// GET /api/lancements/by-operator/:operatorId - Récupérer les lancements d'un opérateur\nrouter.get('/by-operator/:operatorId', async (req, res) => {\n    try {\n        const { operatorId } = req.params;\n        const { date } = req.query;\n        \n        let query = `\n            SELECT DISTINCT\n                l.CodeLancement,\n                l.DateMiseJour,\n                l.CodeArticle,\n                l.DesignationLct1,\n                l.Statut,\n                l.Quantite,\n                l.DateDebut,\n                l.DateFin,\n                o.Statut as OperationStatut,\n                o.DateDebut as OperationDebut,\n                o.DateFin as OperationFin\n            FROM [SEDI_ERP].[dbo].[LCTE] l\n            LEFT JOIN GPSQL.abetemps o ON l.CodeLancement = o.CodeLancement\n            WHERE o.OperateurId = @operatorId\n        `;\n        \n        const params = { operatorId };\n        \n        if (date) {\n            query += ` AND CAST(o.DateDebut AS DATE) = @date`;\n            params.date = date;\n        }\n        \n        query += ` ORDER BY o.DateDebut DESC`;\n        \n        const lancements = await executeQuery(query, params);\n        res.json(lancements);\n        \n    } catch (error) {\n        console.error('Erreur lors de la récupération des lancements de l\\'opérateur:', error);\n        res.status(500).json({ \n            error: 'Erreur lors de la récupération des lancements de l\\'opérateur' \n        });\n    }\n});\n\n// POST /api/lancements - Créer un nouveau lancement\nrouter.post('/', async (req, res) => {\n    try {\n        const { \n            codeLancement, \n            codeArticle, \n            designation, \n            quantite, \n            priorite = 'NORMALE' \n        } = req.body;\n        \n        // Vérifier que tous les champs requis sont présents\n        if (!codeLancement || !codeArticle || !designation) {\n            return res.status(400).json({ \n                error: 'Code lancement, code article et désignation sont requis' \n            });\n        }\n        \n        // Vérifier si le lancement existe déjà\n        const checkQuery = `\n            SELECT COUNT(*) as count \n            FROM [SEDI_ERP].[dbo].[LCTE] \n            WHERE CodeLancement = @codeLancement\n        `;\n        \n        const existing = await executeQuery(checkQuery, { codeLancement });\n        \n        if (existing[0].count > 0) {\n            return res.status(409).json({ \n                error: 'Un lancement avec ce code existe déjà' \n            });\n        }\n        \n        // Insérer le nouveau lancement\n        const insertQuery = `\n            INSERT INTO [SEDI_ERP].[dbo].[LCTE] (\n                CodeLancement, \n                CodeArticle, \n                DesignationLct1, \n                Quantite, \n                Priorite,\n                Statut,\n                DateMiseJour,\n                DateCreation\n            )\n            VALUES (\n                @codeLancement, \n                @codeArticle, \n                @designation, \n                @quantite, \n                @priorite,\n                'PLANIFIE',\n                GETDATE(),\n                GETDATE()\n            )\n        `;\n        \n        await executeQuery(insertQuery, { \n            codeLancement, \n            codeArticle, \n            designation, \n            quantite: quantite || 0, \n            priorite \n        });\n        \n        res.status(201).json({ \n            message: 'Lancement créé avec succès',\n            codeLancement \n        });\n        \n    } catch (error) {\n        console.error('Erreur lors de la création du lancement:', error);\n        res.status(500).json({ \n            error: 'Erreur lors de la création du lancement' \n        });\n    }\n});\n\n// PUT /api/lancements/:code - Mettre à jour un lancement\nrouter.put('/:code', async (req, res) => {\n    try {\n        const { code } = req.params;\n        const { \n            codeArticle, \n            designation, \n            quantite, \n            statut, \n            priorite \n        } = req.body;\n        \n        const updateQuery = `\n            UPDATE [SEDI_ERP].[dbo].[LCTE] \n            SET CodeArticle = @codeArticle,\n                DesignationLct1 = @designation,\n                Quantite = @quantite,\n                Statut = @statut,\n                Priorite = @priorite,\n                DateMiseJour = GETDATE()\n            WHERE CodeLancement = @code\n        `;\n        \n        const result = await executeNonQuery(updateQuery, { \n            code, \n            codeArticle, \n            designation, \n            quantite, \n            statut, \n            priorite \n        });\n        \n        if (!result || !result.rowsAffected || result.rowsAffected === 0) {\n            return res.status(404).json({ \n                error: 'Lancement non trouvé' \n            });\n        }\n        \n        res.json({ \n            message: 'Lancement mis à jour avec succès' \n        });\n        \n    } catch (error) {\n        console.error('Erreur lors de la mise à jour du lancement:', error);\n        res.status(500).json({ \n            error: 'Erreur lors de la mise à jour du lancement' \n        });\n    }\n});\n\nmodule.exports = router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\routes\\operations.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":9,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":9,"endColumn":20,"suggestions":[{"fix":{"range":[339,401],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":14,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":14,"endColumn":20,"suggestions":[{"fix":{"range":[652,720],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":20,"suggestions":[{"fix":{"range":[1184,1248],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":20,"suggestions":[{"fix":{"range":[1365,1438],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":22,"suggestions":[{"fix":{"range":[2418,2489],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":20,"suggestions":[{"fix":{"range":[2833,2896],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":24,"suggestions":[{"fix":{"range":[3639,3698],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":24,"suggestions":[{"fix":{"range":[4200,4259],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":20,"suggestions":[{"fix":{"range":[4357,4407],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":125,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":125,"endColumn":28,"suggestions":[{"fix":{"range":[5421,5461],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":28,"suggestions":[{"fix":{"range":[5499,5550],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":130,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":130,"endColumn":24,"suggestions":[{"fix":{"range":[5603,5652],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":134,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":134,"endColumn":20,"suggestions":[{"fix":{"range":[5746,5801],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":141,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":141,"endColumn":20,"suggestions":[{"fix":{"range":[6266,6310],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":20,"suggestions":[{"fix":{"range":[6393,6435],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":28,"suggestions":[{"fix":{"range":[7578,7628],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":174,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":174,"endColumn":28,"suggestions":[{"fix":{"range":[8104,8153],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":177,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":177,"endColumn":24,"suggestions":[{"fix":{"range":[8206,8253],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":180,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":20,"suggestions":[{"fix":{"range":[8281,8348],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":194,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":194,"endColumn":22,"suggestions":[{"fix":{"range":[8924,8968],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":22,"suggestions":[{"fix":{"range":[10845,10884],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":304,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":304,"endColumn":22,"suggestions":[{"fix":{"range":[12760,12801],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":315,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":315,"endColumn":20,"suggestions":[{"fix":{"range":[13070,13138],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":343,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":343,"endColumn":20,"suggestions":[{"fix":{"range":[14111,14153],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":376,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":376,"endColumn":24,"suggestions":[{"fix":{"range":[15719,15838],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":378,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":378,"endColumn":24,"suggestions":[{"fix":{"range":[15877,15932],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":382,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":382,"endColumn":20,"suggestions":[{"fix":{"range":[16030,16083],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":389,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":389,"endColumn":20,"suggestions":[{"fix":{"range":[16558,16600],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":392,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":392,"endColumn":20,"suggestions":[{"fix":{"range":[16690,16741],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":414,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":414,"endColumn":24,"suggestions":[{"fix":{"range":[17596,17641],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":416,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":416,"endColumn":24,"suggestions":[{"fix":{"range":[17680,17740],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":420,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":420,"endColumn":20,"suggestions":[{"fix":{"range":[17830,17885],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":444,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":444,"endColumn":28,"suggestions":[{"fix":{"range":[19025,19073],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":446,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":446,"endColumn":28,"suggestions":[{"fix":{"range":[19111,19174],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":449,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":449,"endColumn":24,"suggestions":[{"fix":{"range":[19227,19286],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":452,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":452,"endColumn":20,"suggestions":[{"fix":{"range":[19314,19381],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":470,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":470,"endColumn":22,"suggestions":[{"fix":{"range":[19993,20033],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":520,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":520,"endColumn":22,"suggestions":[{"fix":{"range":[21612,21658],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":554,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":554,"endColumn":22,"suggestions":[{"fix":{"range":[22787,22838],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":590,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":590,"endColumn":22,"suggestions":[{"fix":{"range":[23980,24032],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":678,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":678,"endColumn":22,"suggestions":[{"fix":{"range":[27187,27239],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":690,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":690,"endColumn":20,"suggestions":[{"fix":{"range":[27572,27638],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":773,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":773,"endColumn":22,"suggestions":[{"fix":{"range":[31293,31337],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":43,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Routes pour les opérations - STOCKAGE RÉEL avec ABHISTORIQUE_OPERATEURS\nconst express = require('express');\nconst router = express.Router();\nconst { executeQuery } = require('../config/database');\n\n// Route de test pour insertion réelle dans SEDI_APP_INDEPENDANTE\nrouter.post('/test-sedi-table', async (req, res) => {\n    try {\n        console.log('🧪 Test insertion réelle SEDI_APP_INDEPENDANTE');\n        \n        // Test 1: Compter les enregistrements existants\n        const countQuery = `SELECT COUNT(*) as total FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]`;\n        const countBefore = await executeQuery(countQuery);\n        console.log(`📊 ${countBefore[0].total} enregistrements existants`);\n        \n        // Test 2: Insertion réelle avec données comme dans SSMS\n        const insertQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            (OperatorCode, CodeLanctImprod, CodeRubrique, Ident, Phase, Statut, HeureDebut, DateCreation)\n            VALUES ('843', 'LT2500643', '843', 'DEBUT', 'PRODUCTION', 'EN_COURS', GETDATE(), GETDATE())\n        `;\n        \n        await executeQuery(insertQuery);\n        console.log('✅ Insertion réussie dans ABHISTORIQUE_OPERATEURS');\n        \n        // Test 3: Vérifier l'insertion\n        const countAfter = await executeQuery(countQuery);\n        console.log(`📊 ${countAfter[0].total} enregistrements après insertion`);\n        \n        // Test 4: Lire les derniers enregistrements\n        const selectQuery = `\n            SELECT TOP 3 NoEnreg, OperatorCode, CodeLanctImprod, Ident, Phase, Statut, HeureDebut, DateCreation\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            ORDER BY DateCreation DESC\n        `;\n        \n        const lastRecords = await executeQuery(selectQuery);\n        \n        res.json({\n            message: '✅ Test insertion SEDI_APP_INDEPENDANTE réussi !',\n            recordsBefore: countBefore[0].total,\n            recordsAfter: countAfter[0].total,\n            newRecords: countAfter[0].total - countBefore[0].total,\n            lastRecords: lastRecords,\n            insertedData: {\n                OperatorCode: '843',\n                CodeLanctImprod: 'LT2500643',\n                Ident: 'DEBUT',\n                Phase: 'PRODUCTION',\n                Statut: 'EN_COURS'\n            }\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur test insertion SEDI_APP_INDEPENDANTE:', error);\n        res.status(500).json({\n            error: 'Erreur test insertion SEDI_APP_INDEPENDANTE',\n            details: error.message,\n            errorCode: error.code || 'UNKNOWN'\n        });\n    }\n});\n\n// POST /api/operations/start - Démarrer une opération (UTILISE LES 3 TABLES)\nrouter.post('/start', async (req, res) => {\n    try {\n        console.log('🚀 Démarrage opération avec 3 tables:', req.body);\n        const { operatorId, lancementCode } = req.body;\n        \n        if (!operatorId || !lancementCode) {\n            return res.status(400).json({ \n                error: 'operatorId et lancementCode sont requis' \n            });\n        }\n        \n        // Lire les infos de l'opérateur\n        let operatorInfo = null;\n        try {\n            const operatorQuery = `\n                SELECT TOP 1 Coderessource, Designation1, Typeressource\n                FROM [SEDI_ERP].[dbo].[RESSOURC]\n                WHERE Coderessource = @operatorId\n            `;\n            const operatorResult = await executeQuery(operatorQuery, { operatorId });\n            operatorInfo = operatorResult[0] || null;\n        } catch (error) {\n            console.log('⚠️ Erreur lecture opérateur:', error.message);\n        }\n        \n        // Lire les infos du lancement\n        let lancementInfo = null;\n        try {\n            const lancementQuery = `\n                SELECT TOP 1 CodeLancement, DesignationLct1\n                FROM [SEDI_ERP].[dbo].[LCTE]\n                WHERE CodeLancement = @lancementCode\n            `;\n            const lancementResult = await executeQuery(lancementQuery, { lancementCode });\n            lancementInfo = lancementResult[0] || null;\n        } catch (error) {\n            console.log('⚠️ Erreur lecture lancement:', error.message);\n        }\n        \n        // 1️⃣ CRÉER/METTRE À JOUR SESSION dans ABSESSIONS_OPERATEURS\n        console.log('📝 1. Gestion session opérateur...');\n        try {\n            // Vérifier s'il y a une session active\n            const sessionCheckQuery = `\n                SELECT TOP 1 SessionId \n                FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]\n                WHERE OperatorCode = @operatorId \n                AND SessionStatus = 'ACTIVE'\n                AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n            `;\n            const existingSession = await executeQuery(sessionCheckQuery, { operatorId });\n            \n            if (existingSession.length === 0) {\n                // Créer nouvelle session\n                const sessionInsertQuery = `\n                    INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]\n                    (OperatorCode, LoginTime, SessionStatus, DeviceInfo, DateCreation)\n                    VALUES (@operatorId, GETDATE(), 'ACTIVE', 'Tablette SEDI', GETDATE())\n                `;\n                await executeQuery(sessionInsertQuery, { operatorId });\n                console.log('✅ Nouvelle session créée');\n            } else {\n                console.log('✅ Session active existante utilisée');\n            }\n        } catch (error) {\n            console.log('⚠️ Erreur session:', error.message);\n        }\n        \n        // 2️⃣ ENREGISTRER ÉVÉNEMENT dans ABHISTORIQUE_OPERATEURS\n        console.log('📝 2. Enregistrement événement DEBUT...');\n        const histoInsertQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            (OperatorCode, CodeLanctImprod, CodeRubrique, Ident, Phase, Statut, HeureDebut, DateCreation)\n            VALUES (@operatorId, @lancementCode, @operatorId, 'DEBUT', 'PRODUCTION', 'EN_COURS', CAST(GETDATE() AS TIME), CAST(GETDATE() AS DATE))\n        `;\n        await executeQuery(histoInsertQuery, { operatorId, lancementCode });\n        console.log('✅ Événement DEBUT enregistré');\n        \n        // 3️⃣ CRÉER/METTRE À JOUR TEMPS dans ABTEMPS_OPERATEURS\n        console.log('📝 3. Gestion des temps...');\n        try {\n            // Vérifier s'il existe déjà un enregistrement temps pour aujourd'hui\n            const tempsCheckQuery = `\n                SELECT TOP 1 TempsId \n                FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]\n                WHERE OperatorCode = @operatorId \n                AND LancementCode = @lancementCode\n                AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n            `;\n            const existingTemps = await executeQuery(tempsCheckQuery, { operatorId, lancementCode });\n            \n            if (existingTemps.length === 0) {\n                // Créer nouvel enregistrement temps\n                const tempsInsertQuery = `\n                    INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]\n                    (OperatorCode, LancementCode, StartTime, EndTime, TotalDuration, PauseDuration, ProductiveDuration, EventsCount, DateCreation)\n                    VALUES (@operatorId, @lancementCode, GETDATE(), GETDATE(), 0, 0, 0, 1, GETDATE())\n                `;\n                await executeQuery(tempsInsertQuery, { operatorId, lancementCode });\n                console.log('✅ Nouvel enregistrement temps créé');\n            } else {\n                // Mettre à jour l'enregistrement existant\n                const tempsUpdateQuery = `\n                    UPDATE [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]\n                    SET EventsCount = EventsCount + 1,\n                        StartTime = GETDATE()\n                    WHERE TempsId = @tempsId\n                `;\n                await executeQuery(tempsUpdateQuery, { tempsId: existingTemps[0].TempsId });\n                console.log('✅ Enregistrement temps mis à jour');\n            }\n        } catch (error) {\n            console.log('⚠️ Erreur temps:', error.message);\n        }\n        \n        console.log('🎯 Opération démarrée avec succès dans les 3 tables');\n        \n        res.json({\n            message: '✅ Opération démarrée avec succès (3 tables mises à jour)',\n            operatorId: operatorId,\n            operatorName: operatorInfo?.Designation1 || 'Opérateur inconnu',\n            lancementCode: lancementCode,\n            lancementName: lancementInfo?.DesignationLct1 || 'Lancement libre',\n            status: 'DEBUT',\n            timestamp: new Date().toISOString(),\n            tablesUpdated: ['ABSESSIONS_OPERATEURS', 'ABHISTORIQUE_OPERATEURS', 'ABTEMPS_OPERATEURS']\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur démarrage:', error);\n        res.status(500).json({ \n            error: 'Erreur interne du serveur',\n            details: error.message\n        });\n    }\n});\n\n// POST /api/operations/pause - Mettre en pause\nrouter.post('/pause', async (req, res) => {\n    try {\n        const { operatorId } = req.body;\n        \n        if (!operatorId) {\n            return res.status(400).json({ error: 'operatorId requis' });\n        }\n        \n        // Vérifier qu'il y a une opération en cours\n        const checkQuery = `\n            SELECT TOP 1 CodeLanctImprod\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            WHERE OperatorCode = @operatorId \n            AND Ident = 'DEBUT'\n            AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n            ORDER BY DateCreation DESC\n        `;\n        \n        const activeOp = await executeQuery(checkQuery, { operatorId });\n        \n        if (activeOp.length === 0) {\n            return res.status(404).json({ \n                error: 'Aucune opération en cours pour cet opérateur' \n            });\n        }\n        \n        const lancementCode = activeOp[0].CodeLanctImprod;\n        \n        // Insérer la pause\n        const insertQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            (OperatorCode, CodeLanctImprod, CodeRubrique, Ident, Phase, Statut, HeureDebut, DateCreation)\n            VALUES (@operatorId, @lancementCode, @operatorId, 'PAUSE', 'PAUSE', 'PAUSE', GETDATE(), GETDATE())\n        `;\n        \n        await executeQuery(insertQuery, { operatorId, lancementCode });\n        \n        res.json({\n            message: 'Opération mise en pause',\n            operatorId: operatorId,\n            lancementCode: lancementCode,\n            status: 'PAUSE',\n            timestamp: new Date().toISOString()\n        });\n        \n    } catch (error) {\n        console.error(' Erreur pause:', error);\n        res.status(500).json({ \n            error: 'Erreur interne du serveur',\n            details: error.message\n        });\n    }\n});\n\n// POST /api/operations/resume - Reprendre\nrouter.post('/resume', async (req, res) => {\n    try {\n        const { operatorId } = req.body;\n        \n        if (!operatorId) {\n            return res.status(400).json({ error: 'operatorId requis' });\n        }\n        \n        // Vérifier qu'il y a une opération en pause\n        const checkQuery = `\n            SELECT TOP 1 CodeLanctImprod\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            WHERE OperatorCode = @operatorId \n            AND Ident = 'PAUSE'\n            AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n            ORDER BY DateCreation DESC\n        `;\n        \n        const pausedOp = await executeQuery(checkQuery, { operatorId });\n        \n        if (pausedOp.length === 0) {\n            return res.status(404).json({ \n                error: 'Aucune opération en pause pour cet opérateur' \n            });\n        }\n        \n        const lancementCode = pausedOp[0].CodeLanctImprod;\n        \n        // Insérer la reprise\n        const insertQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            (OperatorCode, CodeLanctImprod, CodeRubrique, Ident, Phase, Statut, HeureDebut, DateCreation)\n            VALUES (@operatorId, @lancementCode, @operatorId, 'REPRISE', 'REPRISE', 'ACTIF', GETDATE(), GETDATE())\n        `;\n        \n        await executeQuery(insertQuery, { operatorId, lancementCode });\n        \n        res.json({\n            message: ' Opération reprise',\n            operatorId: operatorId,\n            lancementCode: lancementCode,\n            status: 'REPRISE',\n            timestamp: new Date().toISOString()\n        });\n        \n    } catch (error) {\n        console.error(' Erreur reprise:', error);\n        res.status(500).json({ \n            error: 'Erreur interne du serveur',\n            details: error.message\n        });\n    }\n});\n\n// POST /api/operations/stop - Terminer (CALCULE LES DURÉES FINALES)\nrouter.post('/stop', async (req, res) => {\n    try {\n        console.log('🏁 Arrêt opération avec calcul des durées:', req.body);\n        const { operatorId } = req.body;\n        \n        if (!operatorId) {\n            return res.status(400).json({ error: 'operatorId requis' });\n        }\n        \n        // Vérifier qu'il y a une opération en cours\n        const checkQuery = `\n            SELECT TOP 1 CodeLanctImprod\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            WHERE OperatorCode = @operatorId \n            AND Ident IN ('DEBUT', 'REPRISE')\n            AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n            ORDER BY DateCreation DESC\n        `;\n        \n        const activeOp = await executeQuery(checkQuery, { operatorId });\n        \n        if (activeOp.length === 0) {\n            return res.status(404).json({ \n                error: 'Aucune opération en cours pour cet opérateur' \n            });\n        }\n        \n        const lancementCode = activeOp[0].CodeLanctImprod;\n        \n        // 1️⃣ CALCULER LES DURÉES TOTALES\n        console.log('📊 1. Calcul des durées...');\n        let totalDuration = 0;\n        let pauseDuration = 0;\n        let productiveDuration = 0;\n        let eventsCount = 0;\n        \n        try {\n            // Récupérer tous les événements de la journée pour cet opérateur/lancement\n            const eventsQuery = `\n                SELECT Ident, HeureDebut, HeureFin, DateCreation\n                FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n                WHERE OperatorCode = @operatorId \n                AND CodeLanctImprod = @lancementCode\n                AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n                ORDER BY DateCreation ASC\n            `;\n            \n            const events = await executeQuery(eventsQuery, { operatorId, lancementCode });\n            eventsCount = events.length + 1; // +1 pour l'événement FIN qu'on va ajouter\n            \n            // Calculer les durées (logique simplifiée - peut être améliorée)\n            if (events.length > 0) {\n                const startTime = new Date(events[0].DateCreation);\n                const endTime = new Date();\n                totalDuration = Math.floor((endTime - startTime) / 1000); // en secondes\n                \n                // Calculer temps de pause (nombre d'événements PAUSE * durée moyenne)\n                const pauseEvents = events.filter(e => e.Ident === 'PAUSE');\n                pauseDuration = pauseEvents.length * 300; // 5 minutes par pause (exemple)\n                \n                productiveDuration = totalDuration - pauseDuration;\n            }\n            \n            console.log(`📊 Durées calculées: Total=${totalDuration}s, Pause=${pauseDuration}s, Productif=${productiveDuration}s`);\n        } catch (error) {\n            console.log('⚠️ Erreur calcul durées:', error.message);\n        }\n        \n        // 2️⃣ ENREGISTRER ÉVÉNEMENT FIN dans ABHISTORIQUE_OPERATEURS\n        console.log('📝 2. Enregistrement événement FIN...');\n        const histoInsertQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            (OperatorCode, CodeLanctImprod, CodeRubrique, Ident, Phase, Statut, HeureDebut, HeureFin, DateCreation)\n            VALUES (@operatorId, @lancementCode, @operatorId, 'FIN', 'TERMINE', 'TERMINE', NULL, CAST(GETDATE() AS TIME), CAST(GETDATE() AS DATE))\n        `;\n        await executeQuery(histoInsertQuery, { operatorId, lancementCode });\n        console.log('✅ Événement FIN enregistré');\n        \n        // 3️⃣ METTRE À JOUR LES DURÉES FINALES dans ABTEMPS_OPERATEURS\n        console.log('📝 3. Mise à jour durées finales...');\n        try {\n            const tempsUpdateQuery = `\n                UPDATE [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]\n                SET EndTime = GETDATE(),\n                    TotalDuration = @totalDuration,\n                    PauseDuration = @pauseDuration,\n                    ProductiveDuration = @productiveDuration,\n                    EventsCount = @eventsCount\n                WHERE OperatorCode = @operatorId \n                AND LancementCode = @lancementCode\n                AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n            `;\n            \n            await executeQuery(tempsUpdateQuery, { \n                operatorId, \n                lancementCode, \n                totalDuration, \n                pauseDuration, \n                productiveDuration, \n                eventsCount \n            });\n            console.log('✅ Durées finales mises à jour');\n        } catch (error) {\n            console.log('⚠️ Erreur mise à jour durées:', error.message);\n        }\n        \n        // 4️⃣ FERMER LA SESSION si plus d'opérations actives\n        console.log('📝 4. Vérification fermeture session...');\n        try {\n            // Vérifier s'il reste des opérations actives pour cet opérateur\n            const activeOpsQuery = `\n                SELECT COUNT(*) as count\n                FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n                WHERE OperatorCode = @operatorId \n                AND Statut IN ('EN_COURS', 'EN_PAUSE')\n                AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n            `;\n            \n            const activeOpsCount = await executeQuery(activeOpsQuery, { operatorId });\n            \n            if (activeOpsCount[0].count === 0) {\n                // Fermer la session\n                const sessionCloseQuery = `\n                    UPDATE [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]\n                    SET LogoutTime = GETDATE(), SessionStatus = 'CLOSED'\n                    WHERE OperatorCode = @operatorId \n                    AND SessionStatus = 'ACTIVE'\n                    AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n                `;\n                \n                await executeQuery(sessionCloseQuery, { operatorId });\n                console.log('✅ Session fermée automatiquement');\n            } else {\n                console.log('✅ Session maintenue (autres opérations actives)');\n            }\n        } catch (error) {\n            console.log('⚠️ Erreur fermeture session:', error.message);\n        }\n        \n        console.log('🎯 Opération terminée avec succès dans les 3 tables');\n        \n        res.json({\n            message: '✅ Opération terminée avec succès (durées calculées)',\n            operatorId: operatorId,\n            lancementCode: lancementCode,\n            status: 'FIN',\n            timestamp: new Date().toISOString(),\n            durations: {\n                total: totalDuration,\n                pause: pauseDuration,\n                productive: productiveDuration,\n                events: eventsCount\n            },\n            tablesUpdated: ['ABHISTORIQUE_OPERATEURS', 'ABTEMPS_OPERATEURS', 'ABSESSIONS_OPERATEURS']\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur arrêt:', error);\n        res.status(500).json({ \n            error: 'Erreur interne du serveur',\n            details: error.message\n        });\n    }\n});\n\n// GET /api/operations/current/:operatorId - État actuel\nrouter.get('/current/:operatorId', async (req, res) => {\n    try {\n        const { operatorId } = req.params;\n        \n        // Chercher la dernière opération de l'opérateur\n        const query = `\n            SELECT TOP 1 *\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            WHERE OperatorCode = @operatorId \n            AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n            ORDER BY DateCreation DESC\n        `;\n        \n        const result = await executeQuery(query, { operatorId });\n        \n        if (result.length === 0) {\n            return res.json({\n                hasActiveOperation: false,\n                operation: null\n            });\n        }\n        \n        const lastOp = result[0];\n        const isActive = ['DEBUT', 'REPRISE'].includes(lastOp.Ident);\n        const isPaused = lastOp.Ident === 'PAUSE';\n        \n        res.json({\n            hasActiveOperation: isActive || isPaused,\n            operation: {\n                id: lastOp.NoEnreg,\n                operatorId: lastOp.CodeRubrique,\n                lancementCode: lastOp.CodeLanctImprod,\n                status: lastOp.Ident,\n                phase: lastOp.Phase,\n                timestamp: lastOp.HeureDebut,\n                isActive: isActive,\n                isPaused: isPaused\n            }\n        });\n        \n    } catch (error) {\n        console.error(' Erreur récupération:', error);\n        res.status(500).json({ \n            error: 'Erreur interne du serveur',\n            details: error.message\n        });\n    }\n});\n\n// POST /api/operations/create-session - Créer une session opérateur\nrouter.post('/create-session', async (req, res) => {\n    try {\n        const { operatorCode, deviceInfo = 'Tablette SEDI' } = req.body;\n        \n        if (!operatorCode) {\n            return res.status(400).json({ error: 'operatorCode requis' });\n        }\n        \n        // Insérer dans ABSESSIONS_OPERATEURS\n        const insertQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]\n            (OperatorCode, LoginTime, SessionStatus, DeviceInfo, DateCreation)\n            VALUES (@operatorCode, GETDATE(), 'ACTIVE', @deviceInfo, GETDATE())\n        `;\n        \n        await executeQuery(insertQuery, { operatorCode, deviceInfo });\n        \n        res.json({\n            message: '✅ Session créée avec succès',\n            operatorCode: operatorCode,\n            loginTime: new Date().toISOString(),\n            status: 'ACTIVE'\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur création session:', error);\n        res.status(500).json({ \n            error: 'Erreur création session',\n            details: error.message\n        });\n    }\n});\n\n// POST /api/operations/close-session - Fermer une session opérateur\nrouter.post('/close-session', async (req, res) => {\n    try {\n        const { operatorCode } = req.body;\n        \n        if (!operatorCode) {\n            return res.status(400).json({ error: 'operatorCode requis' });\n        }\n        \n        // Mettre à jour la session active\n        const updateQuery = `\n            UPDATE [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]\n            SET LogoutTime = GETDATE(), SessionStatus = 'CLOSED'\n            WHERE OperatorCode = @operatorCode \n            AND SessionStatus = 'ACTIVE'\n            AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n        `;\n        \n        await executeQuery(updateQuery, { operatorCode });\n        \n        res.json({\n            message: '✅ Session fermée avec succès',\n            operatorCode: operatorCode,\n            logoutTime: new Date().toISOString(),\n            status: 'CLOSED'\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur fermeture session:', error);\n        res.status(500).json({ \n            error: 'Erreur fermeture session',\n            details: error.message\n        });\n    }\n});\n\n// POST /api/operations/update-temps - Mettre à jour ABTEMPS_OPERATEURS\nrouter.post('/update-temps', async (req, res) => {\n    try {\n        const { \n            operatorCode, \n            lancementCode, \n            totalDuration = 0, \n            pauseDuration = 0, \n            productiveDuration = 0, \n            eventsCount = 1 \n        } = req.body;\n        \n        if (!operatorCode || !lancementCode) {\n            return res.status(400).json({ \n                error: 'operatorCode et lancementCode requis' \n            });\n        }\n        \n        // Vérifier si un enregistrement existe déjà pour aujourd'hui\n        const checkQuery = `\n            SELECT TOP 1 TempsId \n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]\n            WHERE OperatorCode = @operatorCode \n            AND LancementCode = @lancementCode\n            AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n        `;\n        \n        const existing = await executeQuery(checkQuery, { operatorCode, lancementCode });\n        \n        if (existing.length > 0) {\n            // Mettre à jour l'enregistrement existant\n            const updateQuery = `\n                UPDATE [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]\n                SET TotalDuration = @totalDuration,\n                    PauseDuration = @pauseDuration,\n                    ProductiveDuration = @productiveDuration,\n                    EventsCount = EventsCount + 1,\n                    EndTime = GETDATE()\n                WHERE TempsId = @tempsId\n            `;\n            \n            await executeQuery(updateQuery, { \n                totalDuration, \n                pauseDuration, \n                productiveDuration,\n                tempsId: existing[0].TempsId \n            });\n            \n            res.json({\n                message: '✅ Temps mis à jour avec succès',\n                action: 'UPDATE',\n                tempsId: existing[0].TempsId\n            });\n            \n        } else {\n            // Créer un nouvel enregistrement\n            const insertQuery = `\n                INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]\n                (OperatorCode, LancementCode, StartTime, EndTime, TotalDuration, PauseDuration, ProductiveDuration, EventsCount, DateCreation)\n                VALUES (@operatorCode, @lancementCode, GETDATE(), GETDATE(), @totalDuration, @pauseDuration, @productiveDuration, @eventsCount, GETDATE())\n            `;\n            \n            await executeQuery(insertQuery, { \n                operatorCode, \n                lancementCode, \n                totalDuration, \n                pauseDuration, \n                productiveDuration, \n                eventsCount \n            });\n            \n            res.json({\n                message: '✅ Nouveau temps créé avec succès',\n                action: 'INSERT',\n                operatorCode: operatorCode,\n                lancementCode: lancementCode\n            });\n        }\n        \n    } catch (error) {\n        console.error('❌ Erreur mise à jour temps:', error);\n        res.status(500).json({ \n            error: 'Erreur mise à jour temps',\n            details: error.message\n        });\n    }\n});\n\n// GET /api/operations/dashboard/:operatorId - Vue d'ensemble des 3 tables\nrouter.get('/dashboard/:operatorId', async (req, res) => {\n    try {\n        const { operatorId } = req.params;\n        console.log(`📊 Dashboard 3 tables pour opérateur ${operatorId}`);\n        \n        const dashboard = {};\n        \n        // 1️⃣ SESSION ACTIVE depuis ABSESSIONS_OPERATEURS\n        try {\n            const sessionQuery = `\n                SELECT TOP 1 SessionId, LoginTime, SessionStatus, DeviceInfo, DateCreation\n                FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]\n                WHERE OperatorCode = @operatorId \n                AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n                ORDER BY DateCreation DESC\n            `;\n            const session = await executeQuery(sessionQuery, { operatorId });\n            dashboard.session = session[0] || null;\n        } catch (error) {\n            dashboard.session = { error: error.message };\n        }\n        \n        // 2️⃣ ÉVÉNEMENTS DU JOUR depuis ABHISTORIQUE_OPERATEURS\n        try {\n            const eventsQuery = `\n                SELECT NoEnreg, CodeLanctImprod, Ident, Phase, Statut, HeureDebut, HeureFin, DateCreation\n                FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n                WHERE OperatorCode = @operatorId \n                AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n                ORDER BY DateCreation DESC\n            `;\n            const events = await executeQuery(eventsQuery, { operatorId });\n            dashboard.events = events;\n            dashboard.eventsCount = events.length;\n        } catch (error) {\n            dashboard.events = [];\n            dashboard.eventsError = error.message;\n        }\n        \n        // 3️⃣ SYNTHÈSE DES TEMPS depuis ABTEMPS_OPERATEURS\n        try {\n            const tempsQuery = `\n                SELECT TempsId, LancementCode, StartTime, EndTime, TotalDuration, PauseDuration, ProductiveDuration, EventsCount, DateCreation\n                FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABTEMPS_OPERATEURS]\n                WHERE OperatorCode = @operatorId \n                AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)\n                ORDER BY DateCreation DESC\n            `;\n            const temps = await executeQuery(tempsQuery, { operatorId });\n            dashboard.temps = temps;\n            \n            // Calculer totaux\n            dashboard.summary = {\n                totalOperations: temps.length,\n                totalDuration: temps.reduce((sum, t) => sum + (t.TotalDuration || 0), 0),\n                totalPause: temps.reduce((sum, t) => sum + (t.PauseDuration || 0), 0),\n                totalProductive: temps.reduce((sum, t) => sum + (t.ProductiveDuration || 0), 0),\n                totalEvents: temps.reduce((sum, t) => sum + (t.EventsCount || 0), 0)\n            };\n        } catch (error) {\n            dashboard.temps = [];\n            dashboard.tempsError = error.message;\n        }\n        \n        // 4️⃣ INFORMATIONS OPÉRATEUR depuis SEDI_ERP\n        try {\n            const operatorQuery = `\n                SELECT TOP 1 Coderessource, Designation1, Typeressource\n                FROM [SEDI_ERP].[dbo].[RESSOURC]\n                WHERE Coderessource = @operatorId\n            `;\n            const operator = await executeQuery(operatorQuery, { operatorId });\n            dashboard.operator = operator[0] || null;\n        } catch (error) {\n            dashboard.operator = { error: error.message };\n        }\n        \n        res.json({\n            message: '📊 Dashboard 3 tables généré avec succès',\n            operatorId: operatorId,\n            date: new Date().toISOString().split('T')[0],\n            dashboard: dashboard,\n            tablesUsed: ['ABSESSIONS_OPERATEURS', 'ABHISTORIQUE_OPERATEURS', 'ABTEMPS_OPERATEURS', 'RESSOURC']\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur dashboard:', error);\n        res.status(500).json({\n            error: 'Erreur génération dashboard',\n            details: error.message\n        });\n    }\n});\n\nmodule.exports = router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\routes\\operators.js","messages":[{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":9,"column":20,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":9,"endColumn":32,"fix":{"range":[372,384],"text":"{return null;}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":30,"column":36,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":30,"endColumn":48,"fix":{"range":[1183,1195],"text":"{return null;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":22,"suggestions":[{"fix":{"range":[1421,1468],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'processLancementEvents' is defined but never used.","line":45,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"processLancementEvents"},"fix":{"range":[1576,3776],"text":""},"desc":"Remove unused variable 'processLancementEvents'."}]},{"ruleId":"no-shadow","severity":2,"message":"'events' is already declared in the upper scope on line 45 column 33.","line":61,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":61,"endColumn":21},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":63,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":63,"endColumn":41,"fix":{"range":[2228,2235],"text":"{return;}"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":20,"suggestions":[{"fix":{"range":[3928,4000],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":24,"suggestions":[{"fix":{"range":[4529,4759],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":24,"suggestions":[{"fix":{"range":[4886,4951],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":140,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":140,"endColumn":22,"suggestions":[{"fix":{"range":[5160,5229],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":22,"suggestions":[{"fix":{"range":[6307,6379],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":226,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":226,"endColumn":22,"suggestions":[{"fix":{"range":[7625,7696],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":284,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":284,"endColumn":20,"suggestions":[{"fix":{"range":[9607,9663],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":22,"suggestions":[{"fix":{"range":[10053,10106],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'result' is assigned a value but never used.","line":325,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":325,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"result"},"fix":{"range":[10851,10908],"text":""},"desc":"Remove unused variable 'result'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":327,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":327,"endColumn":20,"suggestions":[{"fix":{"range":[10926,10983],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":335,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":335,"endColumn":22,"suggestions":[{"fix":{"range":[11133,11188],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":348,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":348,"endColumn":20,"suggestions":[{"fix":{"range":[11524,11592],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":365,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":365,"endColumn":22,"suggestions":[{"fix":{"range":[11998,12067],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":385,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":385,"endColumn":20,"suggestions":[{"fix":{"range":[12598,12663],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":389,"column":26,"nodeType":"CallExpression","messageId":"missingRadix","endLine":389,"endColumn":41,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[12776,12776],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":405,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":405,"endColumn":20,"suggestions":[{"fix":{"range":[13308,13361],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":413,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":413,"endColumn":22,"suggestions":[{"fix":{"range":[13499,13568],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":466,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":466,"endColumn":20,"suggestions":[{"fix":{"range":[15380,15460],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":480,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":480,"endColumn":22,"suggestions":[{"fix":{"range":[15799,15850],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":524,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":524,"endColumn":20,"suggestions":[{"fix":{"range":[17371,17455],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":538,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":538,"endColumn":22,"suggestions":[{"fix":{"range":[17787,17836],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":582,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":582,"endColumn":20,"suggestions":[{"fix":{"range":[19358,19436],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":596,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":596,"endColumn":22,"suggestions":[{"fix":{"range":[19764,19816],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":640,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":640,"endColumn":20,"suggestions":[{"fix":{"range":[21324,21403],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":654,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":654,"endColumn":22,"suggestions":[{"fix":{"range":[21740,21790],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":667,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":667,"endColumn":20,"suggestions":[{"fix":{"range":[22147,22230],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":697,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":697,"endColumn":20,"suggestions":[{"fix":{"range":[23430,23517],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":722,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":722,"endColumn":22,"suggestions":[{"fix":{"range":[24553,24638],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":735,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":735,"endColumn":20,"suggestions":[{"fix":{"range":[25022,25107],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":776,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":776,"endColumn":22,"suggestions":[{"fix":{"range":[26446,26529],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":3,"fixableWarningCount":0,"source":"// Routes pour la gestion des opérateurs\nconst express = require('express');\nconst router = express.Router();\nconst { executeQuery } = require('../config/database');\nconst TimeUtils = require('../utils/timeUtils');\n\n// Fonction utilitaire pour formater les dates/heures (format HH:mm seulement, fuseau horaire Paris)\nfunction formatDateTime(dateTime) {\n    if (!dateTime) return null;\n    \n    try {\n        // Si c'est déjà au format HH:mm ou HH:mm:ss, le retourner directement\n        if (typeof dateTime === 'string' && /^\\d{2}:\\d{2}(:\\d{2})?$/.test(dateTime)) {\n            const parts = dateTime.split(':');\n            return `${parts[0]}:${parts[1]}`; // Retourner juste HH:mm\n        }\n        \n        // Si c'est un objet Date, extraire l'heure avec fuseau horaire français\n        if (dateTime instanceof Date) {\n            return dateTime.toLocaleTimeString('fr-FR', {\n                timeZone: 'Europe/Paris',\n                hour: '2-digit',\n                minute: '2-digit',\n                hour12: false\n            });\n        }\n        \n        // Sinon, traiter comme une date complète\n        const date = new Date(dateTime);\n        if (isNaN(date.getTime())) return null;\n        \n        return date.toLocaleTimeString('fr-FR', {\n            timeZone: 'Europe/Paris',\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: false\n        });\n    } catch (error) {\n        console.error('Erreur formatage date:', error);\n        return null;\n    }\n}\n\n// Fonction pour traiter les événements et créer l'historique des lancements\nfunction processLancementEvents(events) {\n    const lancementGroups = {};\n    \n    // Grouper les événements par lancement\n    events.forEach(event => {\n        const key = `${event.CodeLanctImprod}_${event.CodeRubrique}`;\n        if (!lancementGroups[key]) {\n            lancementGroups[key] = [];\n        }\n        lancementGroups[key].push(event);\n    });\n    \n    const processedOperations = [];\n    \n    // Traiter chaque groupe de lancement\n    Object.keys(lancementGroups).forEach(key => {\n        const events = lancementGroups[key].sort((a, b) => new Date(a.DateCreation) - new Date(b.DateCreation));\n        \n        if (events.length === 0) return;\n        \n        const firstEvent = events[0];\n        const lastEvent = events[events.length - 1];\n        \n        // Trouver les événements DEBUT et FIN\n        const debutEvent = events.find(e => e.Ident === 'DEBUT');\n        const finEvent = events.find(e => e.Ident === 'FIN');\n        const pauseEvents = events.filter(e => e.Ident === 'PAUSE');\n        const repriseEvents = events.filter(e => e.Ident === 'REPRISE');\n        \n        // Déterminer le statut actuel\n        let status = 'En cours';\n        if (finEvent) {\n            status = 'Terminé';\n        } else if (pauseEvents.length > repriseEvents.length) {\n            // Il y a plus de pauses que de reprises, donc en pause\n            status = 'En pause';\n        }\n        \n        const operation = {\n            id: firstEvent.NoEnreg,\n            operatorCode: firstEvent.CodeRubrique,\n            lancementCode: firstEvent.CodeLanctImprod,\n            article: firstEvent.Article || 'N/A',\n            startTime: debutEvent && debutEvent.HeureDebut ? formatDateTime(debutEvent.HeureDebut) : null,\n            endTime: finEvent && finEvent.HeureFin ? formatDateTime(finEvent.HeureFin) : null,\n            status: status,\n            phase: firstEvent.Phase || 'PRODUCTION',\n            lastUpdate: lastEvent.DateCreation\n        };\n        \n        processedOperations.push(operation);\n    });\n    \n    // Trier par date du dernier événement (plus récent en premier)\n    return processedOperations.sort((a, b) => new Date(b.lastUpdate) - new Date(a.lastUpdate));\n}\n\n// Fonction pour valider et récupérer les informations d'un lancement depuis LCTE\nasync function validateLancement(codeLancement) {\n    try {\n        console.log(`🔍 Validation du lancement ${codeLancement} dans LCTE...`);\n        \n        const query = `\n            SELECT TOP 1 \n                [CodeLancement],\n                [CodeArticle],\n                [DesignationLct1],\n                [CodeModele],\n                [DesignationArt1],\n                [DesignationArt2]\n            FROM [SEDI_ERP].[dbo].[LCTE]\n            WHERE [CodeLancement] = '${codeLancement}'\n        `;\n        \n        const result = await executeQuery(query);\n        \n        if (result && result.length > 0) {\n            const lancement = result[0];\n            console.log(`✅ Lancement ${codeLancement} trouvé:`, {\n                CodeArticle: lancement.CodeArticle,\n                DesignationLct1: lancement.DesignationLct1,\n                CodeModele: lancement.CodeModele\n            });\n            return {\n                valid: true,\n                data: lancement\n            };\n        } else {\n            console.log(`❌ Lancement ${codeLancement} non trouvé dans LCTE`);\n            return {\n                valid: false,\n                error: `Le numéro de lancement ${codeLancement} n'existe pas dans la base de données`\n            };\n        }\n    } catch (error) {\n        console.error('❌ Erreur lors de la validation du lancement:', error);\n        return {\n            valid: false,\n            error: 'Erreur lors de la validation du lancement'\n        };\n    }\n}\n\n// GET /api/operators/:code - Récupérer un opérateur par son code\nrouter.get('/:code', async (req, res) => {\n    try {\n        const { code } = req.params;\n        \n        const query = `\n            SELECT TOP 1\n                Typeressource,\n                Coderessource,\n                Designation1\n            FROM [SEDI_ERP].[dbo].[RESSOURC]\n            WHERE Coderessource = @code\n        `;\n        \n        const operators = await executeQuery(query, { code });\n        \n        if (operators.length === 0) {\n            return res.status(404).json({ \n                error: 'Opérateur non trouvé' \n            });\n        }\n        \n        const operator = operators[0];\n        \n        res.json({\n            id: operator.Coderessource,\n            code: operator.Coderessource,\n            nom: operator.Designation1,\n            type: operator.Typeressource,\n            actif: true\n        });\n        \n    } catch (error) {\n        console.error('Erreur lors de la récupération de l\\'opérateur:', error);\n        res.status(500).json({ \n            error: 'Erreur interne du serveur',\n            details: error.message \n        });\n    }\n});\n\n// GET /api/operators - Récupérer tous les opérateurs\nrouter.get('/', async (req, res) => {\n    try {\n        const { search, limit = 100 } = req.query;\n        \n        let query = `\n            SELECT TOP ${limit}\n                Typeressource,\n                Coderessource,\n                Designation1\n            FROM [SEDI_ERP].[dbo].[RESSOURC]\n            WHERE 1=1\n        `;\n        \n        const params = {};\n        \n        // Filtre de recherche\n        if (search) {\n            query += ` AND (Coderessource LIKE @search OR Designation1 LIKE @search)`;\n            params.search = `%${search}%`;\n        }\n        \n        query += ` ORDER BY Coderessource`;\n        \n        const operators = await executeQuery(query, params);\n        \n        const formattedOperators = operators.map(operator => ({\n            id: operator.Coderessource,\n            code: operator.Coderessource,\n            nom: operator.Designation1,\n            type: operator.Typeressource,\n            actif: true\n        }));\n        \n        res.json(formattedOperators);\n        \n    } catch (error) {\n        console.error('Erreur lors de la récupération des opérateurs:', error);\n        res.status(500).json({ \n            error: 'Erreur interne du serveur',\n            details: error.message \n        });\n    }\n});\n\n// POST /api/operators/login - Connexion d'un opérateur avec session\nrouter.post('/login', async (req, res) => {\n    try {\n        const { code } = req.body;\n        \n        if (!code) {\n            return res.status(400).json({ \n                error: 'Code opérateur requis' \n            });\n        }\n        \n        // Vérifier l'existence de l'opérateur dans SEDI_ERP\n        const operatorQuery = `\n            SELECT TOP 1\n                Typeressource,\n                Coderessource,\n                Designation1\n            FROM [SEDI_ERP].[dbo].[RESSOURC]\n            WHERE Coderessource = @code\n        `;\n        \n        const operators = await executeQuery(operatorQuery, { code });\n        \n        if (operators.length === 0) {\n            return res.status(401).json({ \n                error: 'Code opérateur invalide' \n            });\n        }\n        \n        const operator = operators[0];\n        \n        // Fermer toute session active existante\n        const closeActiveSessionQuery = `\n            UPDATE [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]\n            SET LogoutTime = GETDATE(), SessionStatus = 'CLOSED'\n            WHERE OperatorCode = @code AND SessionStatus = 'ACTIVE'\n        `;\n        \n        await executeQuery(closeActiveSessionQuery, { code });\n        \n        // Créer une nouvelle session\n        const createSessionQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]\n            (OperatorCode, LoginTime, SessionStatus, DeviceInfo)\n            VALUES (@code, GETDATE(), 'ACTIVE', @deviceInfo)\n        `;\n        \n        const deviceInfo = req.headers['user-agent'] || 'Unknown Device';\n        await executeQuery(createSessionQuery, { code, deviceInfo });\n        \n        console.log(`✅ Session créée pour l'opérateur ${code}`);\n        \n        res.json({\n            success: true,\n            operator: {\n                id: operator.Coderessource,\n                code: operator.Coderessource,\n                nom: operator.Designation1,\n                type: operator.Typeressource,\n                actif: true,\n                sessionActive: true\n            }\n        });\n        \n    } catch (error) {\n        console.error('Erreur lors de la connexion:', error);\n        res.status(500).json({ \n            error: 'Erreur interne du serveur',\n            details: error.message \n        });\n    }\n});\n\n// POST /api/operators/logout - Déconnexion d'un opérateur\nrouter.post('/logout', async (req, res) => {\n    try {\n        const { code } = req.body;\n        \n        if (!code) {\n            return res.status(400).json({ \n                error: 'Code opérateur requis' \n            });\n        }\n        \n        // Fermer la session active\n        const logoutQuery = `\n            UPDATE [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]\n            SET LogoutTime = GETDATE(), SessionStatus = 'CLOSED'\n            WHERE OperatorCode = @code AND SessionStatus = 'ACTIVE'\n        `;\n        \n        const result = await executeQuery(logoutQuery, { code });\n        \n        console.log(`✅ Session fermée pour l'opérateur ${code}`);\n        \n        res.json({\n            success: true,\n            message: 'Déconnexion réussie'\n        });\n        \n    } catch (error) {\n        console.error('Erreur lors de la déconnexion:', error);\n        res.status(500).json({ \n            error: 'Erreur interne du serveur',\n            details: error.message \n        });\n    }\n});\n\n// GET /api/operators/lancement/:code - Valider un lancement pour un opérateur\nrouter.get('/lancement/:code', async (req, res) => {\n    try {\n        const { code } = req.params;\n        \n        console.log(`🔍 Validation du lancement ${code} pour opérateur...`);\n        \n        const validation = await validateLancement(code);\n        \n        if (validation.valid) {\n            res.json({\n                success: true,\n                data: validation.data\n            });\n        } else {\n            res.status(404).json({\n                success: false,\n                error: validation.error\n            });\n        }\n        \n    } catch (error) {\n        console.error('❌ Erreur lors de la validation du lancement:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur serveur lors de la validation du lancement'\n        });\n    }\n});\n\n// GET /api/operators/lancements/search - Rechercher des lancements pour un opérateur\nrouter.get('/lancements/search', async (req, res) => {\n    try {\n        const { term, limit = 10 } = req.query;\n        \n        if (!term || term.length < 2) {\n            return res.json({\n                success: true,\n                data: []\n            });\n        }\n        \n        console.log(`🔍 Recherche de lancements avec le terme: ${term}`);\n        \n        const searchTerm = `%${term}%`;\n        const query = `\n            SELECT TOP ${parseInt(limit)} \n                [CodeLancement],\n                [CodeArticle],\n                [DesignationLct1],\n                [CodeModele],\n                [DesignationArt1],\n                [DesignationArt2]\n            FROM [SEDI_ERP].[dbo].[LCTE]\n            WHERE [CodeLancement] LIKE '${searchTerm}'\n               OR [DesignationLct1] LIKE '${searchTerm}'\n               OR [CodeArticle] LIKE '${searchTerm}'\n            ORDER BY [CodeLancement]\n        `;\n        \n        const result = await executeQuery(query);\n        \n        console.log(`✅ ${result.length} lancements trouvés`);\n        \n        res.json({\n            success: true,\n            data: result || []\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur lors de la recherche de lancements:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur serveur lors de la recherche'\n        });\n    }\n});\n\n// POST /api/operators/start - Démarrer un lancement\nrouter.post('/start', async (req, res) => {\n    try {\n        const { operatorId, lancementCode } = req.body;\n        \n        if (!operatorId || !lancementCode) {\n            return res.status(400).json({\n                success: false,\n                error: 'operatorId et lancementCode requis'\n            });\n        }\n        \n        // Obtenir l'heure française actuelle\n        const { time: currentTime, date: currentDate } = TimeUtils.getCurrentDateTime();\n        \n        TimeUtils.log(`🚀 Démarrage lancement ${lancementCode} par opérateur ${operatorId} à ${currentTime}`);\n        \n        // Valider le lancement dans LCTE\n        const validation = await validateLancement(lancementCode);\n        if (!validation.valid) {\n            return res.status(400).json({\n                success: false,\n                error: validation.error\n            });\n        }\n        \n        // Enregistrer l'événement DEBUT dans ABHISTORIQUE_OPERATEURS avec l'heure française\n        const insertQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            (OperatorCode, CodeLanctImprod, CodeRubrique, Ident, Phase, Statut, HeureDebut, HeureFin, DateCreation)\n            VALUES (\n                '${operatorId}',\n                '${lancementCode}',\n                'PRODUCTION',\n                'DEBUT',\n                'PRODUCTION',\n                'EN_COURS',\n                CAST('${currentTime}' AS TIME),\n                NULL,\n                CAST('${currentDate}' AS DATE)\n            )\n        `;\n        \n        await executeQuery(insertQuery);\n        \n        console.log(`✅ Lancement ${lancementCode} démarré par opérateur ${operatorId}`);\n        \n        res.json({\n            success: true,\n            message: 'Lancement démarré avec succès',\n            data: {\n                operatorId,\n                lancementCode,\n                action: 'DEBUT',\n                timestamp: new Date().toISOString()\n            }\n        });\n        \n    } catch (error) {\n        console.error(' Erreur lors du démarrage:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur serveur lors du démarrage'\n        });\n    }\n});\n\n// POST /api/operators/pause - Mettre en pause un lancement\nrouter.post('/pause', async (req, res) => {\n    try {\n        const { operatorId, lancementCode } = req.body;\n        \n        if (!operatorId || !lancementCode) {\n            return res.status(400).json({\n                success: false,\n                error: 'operatorId et lancementCode requis'\n            });\n        }\n        \n        // Obtenir l'heure française actuelle\n        const { time: currentTime, date: currentDate } = TimeUtils.getCurrentDateTime();\n        \n        TimeUtils.log(`⏸️ Pause lancement ${lancementCode} par opérateur ${operatorId} à ${currentTime}`);\n        \n        // Enregistrer l'événement PAUSE dans ABHISTORIQUE_OPERATEURS avec l'heure française\n        const insertQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            (OperatorCode, CodeLanctImprod, CodeRubrique, Ident, Phase, Statut, HeureDebut, HeureFin, DateCreation)\n            VALUES (\n                '${operatorId}',\n                '${lancementCode}',\n                'PRODUCTION',\n                'PAUSE',\n                'PRODUCTION',\n                'EN_PAUSE',\n                CAST('${currentTime}' AS TIME),\n                NULL,\n                CAST('${currentDate}' AS DATE)\n            )\n        `;\n        \n        await executeQuery(insertQuery);\n        \n        console.log(` Lancement ${lancementCode} mis en pause par opérateur ${operatorId}`);\n        \n        res.json({\n            success: true,\n            message: 'Lancement mis en pause',\n            data: {\n                operatorId,\n                lancementCode,\n                action: 'PAUSE',\n                timestamp: new Date().toISOString()\n            }\n        });\n        \n    } catch (error) {\n        console.error('Erreur lors de la pause:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur serveur lors de la pause'\n        });\n    }\n});\n\n// POST /api/operators/resume - Reprendre un lancement\nrouter.post('/resume', async (req, res) => {\n    try {\n        const { operatorId, lancementCode } = req.body;\n        \n        if (!operatorId || !lancementCode) {\n            return res.status(400).json({\n                success: false,\n                error: 'operatorId et lancementCode requis'\n            });\n        }\n        \n        // Obtenir l'heure française actuelle\n        const { time: currentTime, date: currentDate } = TimeUtils.getCurrentDateTime();\n        \n        TimeUtils.log(`▶️ Reprise lancement ${lancementCode} par opérateur ${operatorId} à ${currentTime}`);\n        \n        // Enregistrer l'événement REPRISE dans ABHISTORIQUE_OPERATEURS avec l'heure française\n        const insertQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            (OperatorCode, CodeLanctImprod, CodeRubrique, Ident, Phase, Statut, HeureDebut, HeureFin, DateCreation)\n            VALUES (\n                '${operatorId}',\n                '${lancementCode}',\n                'PRODUCTION',\n                'REPRISE',\n                'PRODUCTION',\n                'EN_COURS',\n                CAST('${currentTime}' AS TIME),\n                NULL,\n                CAST('${currentDate}' AS DATE)\n            )\n        `;\n        \n        await executeQuery(insertQuery);\n        \n        console.log(` Lancement ${lancementCode} repris par opérateur ${operatorId}`);\n        \n        res.json({\n            success: true,\n            message: 'Lancement repris',\n            data: {\n                operatorId,\n                lancementCode,\n                action: 'REPRISE',\n                timestamp: new Date().toISOString()\n            }\n        });\n        \n    } catch (error) {\n        console.error(' Erreur lors de la reprise:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur serveur lors de la reprise'\n        });\n    }\n});\n\n// POST /api/operators/stop - Terminer un lancement\nrouter.post('/stop', async (req, res) => {\n    try {\n        const { operatorId, lancementCode } = req.body;\n        \n        if (!operatorId || !lancementCode) {\n            return res.status(400).json({\n                success: false,\n                error: 'operatorId et lancementCode requis'\n            });\n        }\n        \n        // Obtenir l'heure française actuelle\n        const { time: currentTime, date: currentDate } = TimeUtils.getCurrentDateTime();\n        \n        TimeUtils.log(`🏁 Arrêt lancement ${lancementCode} par opérateur ${operatorId} à ${currentTime}`);\n        \n        // Enregistrer l'événement FIN dans ABHISTORIQUE_OPERATEURS avec l'heure française\n        const insertQuery = `\n            INSERT INTO [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS]\n            (OperatorCode, CodeLanctImprod, CodeRubrique, Ident, Phase, Statut, HeureDebut, HeureFin, DateCreation)\n            VALUES (\n                '${operatorId}',\n                '${lancementCode}',\n                'PRODUCTION',\n                'FIN',\n                'PRODUCTION',\n                'TERMINE',\n                NULL,\n                CAST('${currentTime}' AS TIME),\n                CAST('${currentDate}' AS DATE)\n            )\n        `;\n        \n        await executeQuery(insertQuery);\n        \n        console.log(` Lancement ${lancementCode} terminé par opérateur ${operatorId}`);\n        \n        res.json({\n            success: true,\n            message: 'Lancement terminé avec succès',\n            data: {\n                operatorId,\n                lancementCode,\n                action: 'FIN',\n                timestamp: new Date().toISOString()\n            }\n        });\n        \n    } catch (error) {\n        console.error(' Erreur lors de l\\'arrêt:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur serveur lors de l\\'arrêt'\n        });\n    }\n});\n\n// GET /api/operators/:operatorCode/operations - Récupérer l'historique d'un opérateur\nrouter.get('/:operatorCode/operations', async (req, res) => {\n    try {\n        const { operatorCode } = req.params;\n        \n        console.log(`🔍 Récupération de l'historique pour l'opérateur ${operatorCode}...`);\n        \n        // Récupérer tous les événements de cet opérateur depuis ABHISTORIQUE_OPERATEURS avec la phase depuis abetemps\n        const eventsQuery = `\n            SELECT \n                h.NoEnreg,\n                h.Ident,\n                h.CodeLanctImprod,\n                COALESCE(\n                    (SELECT TOP 1 a.Phase \n                     FROM [SEDI_ERP].[GPSQL].[abetemps] a \n                     WHERE a.CodeLanctImprod = h.CodeLanctImprod \n                     ORDER BY a.NoEnreg DESC), \n                    h.Phase, \n                    'PRODUCTION'\n                ) as Phase,\n                h.CodeRubrique,\n                h.Statut,\n                h.HeureDebut,\n                h.HeureFin,\n                h.DateCreation,\n                l.DesignationLct1 as Article,\n                l.DesignationLct2 as ArticleDetail\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS] h\n            LEFT JOIN [SEDI_ERP].[dbo].[LCTE] l ON l.CodeLancement = h.CodeLanctImprod\n            WHERE h.OperatorCode = '${operatorCode}'\n            ORDER BY h.DateCreation DESC, h.NoEnreg DESC\n        `;\n        \n        const events = await executeQuery(eventsQuery);\n        console.log(`📊 ${events.length} événements trouvés pour l'opérateur ${operatorCode}`);\n        \n        // Utiliser la fonction qui garde les pauses séparées\n        const { processLancementEventsWithPauses } = require('./admin');\n        const formattedOperations = processLancementEventsWithPauses(events).map(operation => ({\n            id: operation.id,\n            operatorCode: operation.operatorCode,\n            lancementCode: operation.lancementCode,\n            article: operation.article,\n            startTime: operation.startTime,\n            endTime: operation.endTime,\n            status: operation.status,\n            statusCode: operation.statusCode || (operation.status === 'Terminé' ? 'TERMINE' : \n                       operation.status === 'En pause' ? 'PAUSE' : 'EN_COURS'),\n            phase: operation.phase,\n            type: operation.type // Ajouter le type pour distinguer les pauses\n        }));\n        \n        res.json({\n            success: true,\n            operations: formattedOperations,\n            count: formattedOperations.length\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur lors de la récupération de l\\'historique opérateur:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur serveur lors de la récupération de l\\'historique'\n        });\n    }\n});\n\n// GET /api/operations/current/:operatorCode - Récupérer l'opération en cours d'un opérateur\nrouter.get('/current/:operatorCode', async (req, res) => {\n    try {\n        const { operatorCode } = req.params;\n        \n        console.log(`🔍 Recherche d'opération en cours pour l'opérateur ${operatorCode}...`);\n        \n        // Chercher la dernière opération non terminée\n        const query = `\n            SELECT TOP 1\n                h.CodeLanctImprod,\n                h.Ident,\n                h.Statut,\n                h.HeureDebut,\n                h.DateCreation,\n                l.DesignationLct1 as Article\n            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABHISTORIQUE_OPERATEURS] h\n            LEFT JOIN [SEDI_ERP].[dbo].[LCTE] l ON l.CodeLancement = h.CodeLanctImprod\n            WHERE h.OperatorCode = '${operatorCode}'\n              AND h.Statut IN ('EN_COURS', 'EN_PAUSE')\n            ORDER BY h.DateCreation DESC, h.NoEnreg DESC\n        `;\n        \n        const result = await executeQuery(query);\n        \n        if (result.length === 0) {\n            return res.json({\n                success: true,\n                data: null\n            });\n        }\n        \n        const operation = result[0];\n        \n        res.json({\n            success: true,\n            data: {\n                lancementCode: operation.CodeLanctImprod,\n                article: operation.Article || 'N/A',\n                status: operation.Statut,\n                startTime: operation.HeureDebut ? formatDateTime(operation.HeureDebut) : null,\n                lastEvent: operation.Ident\n            }\n        });\n        \n    } catch (error) {\n        console.error('❌ Erreur lors de la récupération de l\\'opération en cours:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Erreur serveur lors de la récupération de l\\'opération en cours'\n        });\n    }\n});\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\scripts\\create-comments-table.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":20,"suggestions":[{"fix":{"range":[660,712],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":27,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":27,"endColumn":20,"suggestions":[{"fix":{"range":[721,760],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":20,"suggestions":[{"fix":{"range":[769,807],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":20,"suggestions":[{"fix":{"range":[867,902],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":24,"suggestions":[{"fix":{"range":[1327,1393],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":20,"suggestions":[{"fix":{"range":[1441,1510],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":20,"suggestions":[{"fix":{"range":[2230,2286],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":20,"suggestions":[{"fix":{"range":[2331,2371],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":28,"suggestions":[{"fix":{"range":[3310,3352],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":28,"suggestions":[{"fix":{"range":[3399,3475],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":20,"suggestions":[{"fix":{"range":[3566,3623],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":28,"suggestions":[{"fix":{"range":[4672,4727],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":28,"suggestions":[{"fix":{"range":[4774,4860],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":20,"suggestions":[{"fix":{"range":[4902,4963],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":20,"suggestions":[{"fix":{"range":[5009,5048],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":20,"suggestions":[{"fix":{"range":[5422,5464],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":138,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":138,"endColumn":20,"suggestions":[{"fix":{"range":[5677,5767],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":141,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":141,"endColumn":22,"suggestions":[{"fix":{"range":[5807,5873],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":142,"column":9,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":142,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":24,"suggestions":[{"fix":{"range":[5979,6014],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":154,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":154,"endColumn":20,"suggestions":[{"fix":{"range":[6104,6148],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":155,"column":9,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":155,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":158,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":158,"endColumn":22,"suggestions":[{"fix":{"range":[6211,6252],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":159,"column":9,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":159,"endColumn":24}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Script pour créer la table des commentaires opérateurs\n * Usage: node scripts/create-comments-table.js\n */\n\nconst sql = require('mssql');\nrequire('dotenv').config();\n\nconst config = {\n    server: process.env.DB_SERVER || 'SERVEURERP',\n    database: 'SEDI_APP_INDEPENDANTE', // Forcer la base SEDI_APP_INDEPENDANTE\n    user: process.env.DB_USER || 'QUALITE',\n    password: process.env.DB_PASSWORD || 'QUALITE',\n    options: {\n        encrypt: process.env.DB_ENCRYPT === 'true',\n        trustServerCertificate: process.env.DB_TRUST_CERT === 'true'\n    }\n};\n\nasync function createCommentsTable() {\n    let pool;\n    \n    try {\n        console.log('🔗 Connexion à la base de données...');\n        console.log('Serveur:', config.server);\n        console.log('Base:', config.database);\n        \n        pool = await sql.connect(config);\n        console.log('✅ Connexion établie');\n        \n        // Vérifier si la table existe déjà\n        const checkTableQuery = `\n            SELECT COUNT(*) as count \n            FROM INFORMATION_SCHEMA.TABLES \n            WHERE TABLE_NAME = 'AB_COMMENTAIRES_OPERATEURS'\n        `;\n        \n        const result = await pool.request().query(checkTableQuery);\n        const tableExists = result.recordset[0].count > 0;\n        \n        if (tableExists) {\n            console.log('ℹ️ La table AB_COMMENTAIRES_OPERATEURS existe déjà');\n            return;\n        }\n        \n        console.log('📋 Création de la table AB_COMMENTAIRES_OPERATEURS...');\n        \n        // Créer la table\n        const createTableQuery = `\n            CREATE TABLE [dbo].[AB_COMMENTAIRES_OPERATEURS](\n                [Id] [int] IDENTITY(1,1) NOT NULL,\n                [OperatorCode] [nvarchar](50) NOT NULL,\n                [OperatorName] [nvarchar](100) NOT NULL,\n                [LancementCode] [nvarchar](50) NOT NULL,\n                [Comment] [nvarchar](max) NOT NULL,\n                [Timestamp] [datetime2](7) NOT NULL,\n                [CreatedAt] [datetime2](7) NOT NULL DEFAULT (GETDATE()),\n                CONSTRAINT [PK_AB_COMMENTAIRES_OPERATEURS] PRIMARY KEY CLUSTERED ([Id] ASC)\n            );\n        `;\n        \n        await pool.request().query(createTableQuery);\n        console.log('✅ Table AB_COMMENTAIRES_OPERATEURS créée');\n        \n        // Créer les index\n        console.log('📊 Création des index...');\n        \n        const indexes = [\n            {\n                name: 'IX_AB_COMMENTAIRES_OPERATEURS_OperatorCode',\n                query: 'CREATE NONCLUSTERED INDEX [IX_AB_COMMENTAIRES_OPERATEURS_OperatorCode] ON [dbo].[AB_COMMENTAIRES_OPERATEURS] ([OperatorCode] ASC);'\n            },\n            {\n                name: 'IX_AB_COMMENTAIRES_OPERATEURS_LancementCode',\n                query: 'CREATE NONCLUSTERED INDEX [IX_AB_COMMENTAIRES_OPERATEURS_LancementCode] ON [dbo].[AB_COMMENTAIRES_OPERATEURS] ([LancementCode] ASC);'\n            },\n            {\n                name: 'IX_AB_COMMENTAIRES_OPERATEURS_CreatedAt',\n                query: 'CREATE NONCLUSTERED INDEX [IX_AB_COMMENTAIRES_OPERATEURS_CreatedAt] ON [dbo].[AB_COMMENTAIRES_OPERATEURS] ([CreatedAt] DESC);'\n            }\n        ];\n        \n        for (const index of indexes) {\n            try {\n                await pool.request().query(index.query);\n                console.log(`✅ Index ${index.name} créé`);\n            } catch (error) {\n                console.log(`⚠️ Index ${index.name} existe déjà ou erreur:`, error.message);\n            }\n        }\n        \n        // Ajouter les contraintes de validation\n        console.log('🔒 Ajout des contraintes de validation...');\n        \n        const constraints = [\n            {\n                name: 'CK_AB_COMMENTAIRES_OPERATEURS_Comment_NotEmpty',\n                query: 'ALTER TABLE [dbo].[AB_COMMENTAIRES_OPERATEURS] ADD CONSTRAINT [CK_AB_COMMENTAIRES_OPERATEURS_Comment_NotEmpty] CHECK (LEN(TRIM([Comment])) > 0);'\n            },\n            {\n                name: 'CK_AB_COMMENTAIRES_OPERATEURS_OperatorCode_NotEmpty',\n                query: 'ALTER TABLE [dbo].[AB_COMMENTAIRES_OPERATEURS] ADD CONSTRAINT [CK_AB_COMMENTAIRES_OPERATEURS_OperatorCode_NotEmpty] CHECK (LEN(TRIM([OperatorCode])) > 0);'\n            },\n            {\n                name: 'CK_AB_COMMENTAIRES_OPERATEURS_LancementCode_NotEmpty',\n                query: 'ALTER TABLE [dbo].[AB_COMMENTAIRES_OPERATEURS] ADD CONSTRAINT [CK_AB_COMMENTAIRES_OPERATEURS_LancementCode_NotEmpty] CHECK (LEN(TRIM([LancementCode])) > 0);'\n            }\n        ];\n        \n        for (const constraint of constraints) {\n            try {\n                await pool.request().query(constraint.query);\n                console.log(`✅ Contrainte ${constraint.name} ajoutée`);\n            } catch (error) {\n                console.log(`⚠️ Contrainte ${constraint.name} existe déjà ou erreur:`, error.message);\n            }\n        }\n        \n        console.log('🎉 Table des commentaires créée avec succès !');\n        \n        // Test d'insertion\n        console.log('🧪 Test d\\'insertion...');\n        const testInsertQuery = `\n            INSERT INTO [dbo].[AB_COMMENTAIRES_OPERATEURS] \n            (OperatorCode, OperatorName, LancementCode, Comment, Timestamp)\n            VALUES \n            ('TEST001', 'Test Opérateur', 'LT2501145', 'Commentaire de test automatique', GETDATE());\n        `;\n        \n        await pool.request().query(testInsertQuery);\n        console.log('✅ Test d\\'insertion réussi');\n        \n        // Vérifier l'insertion\n        const countQuery = 'SELECT COUNT(*) as count FROM [dbo].[AB_COMMENTAIRES_OPERATEURS]';\n        const countResult = await pool.request().query(countQuery);\n        console.log(`📊 Nombre de commentaires dans la table: ${countResult.recordset[0].count}`);\n        \n    } catch (error) {\n        console.error('❌ Erreur lors de la création de la table:', error);\n        process.exit(1);\n    } finally {\n        if (pool) {\n            await pool.close();\n            console.log('🔌 Connexion fermée');\n        }\n    }\n}\n\n// Exécuter le script\ncreateCommentsTable()\n    .then(() => {\n        console.log('✅ Script terminé avec succès');\n        process.exit(0);\n    })\n    .catch(error => {\n        console.error('❌ Erreur fatale:', error);\n        process.exit(1);\n    });\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\scripts\\test-comments.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":16,"suggestions":[{"fix":{"range":[254,306],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":13,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":13,"endColumn":16,"suggestions":[{"fix":{"range":[311,603],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":24,"suggestions":[{"fix":{"range":[1368,1425],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":24,"suggestions":[{"fix":{"range":[1438,1490],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":24,"suggestions":[{"fix":{"range":[1503,1560],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":22,"suggestions":[{"fix":{"range":[1716,1781],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":20,"suggestions":[{"fix":{"range":[1799,1840],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":20,"suggestions":[{"fix":{"range":[1849,1924],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":20,"suggestions":[{"fix":{"range":[1933,1990],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":20,"suggestions":[{"fix":{"range":[1999,2063],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":16,"suggestions":[{"fix":{"range":[2142,2197],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":68,"column":38,"nodeType":"Identifier","messageId":"undef","endLine":68,"endColumn":43},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":20,"suggestions":[{"fix":{"range":[2518,2550],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":82,"column":39,"nodeType":"Identifier","messageId":"undef","endLine":82,"endColumn":44},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":96,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":96,"endColumn":20,"suggestions":[{"fix":{"range":[3342,3395],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":99,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":99,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":24,"suggestions":[{"fix":{"range":[3636,3715],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":22,"suggestions":[{"fix":{"range":[3795,3841],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":20,"suggestions":[{"fix":{"range":[3850,3891],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":20,"suggestions":[{"fix":{"range":[3900,3962],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":20,"suggestions":[{"fix":{"range":[3971,4028],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":20,"suggestions":[{"fix":{"range":[4037,4103],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":16,"suggestions":[{"fix":{"range":[4163,4225],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":16,"suggestions":[{"fix":{"range":[4338,4376],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":16,"suggestions":[{"fix":{"range":[4381,4437],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":125,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":125,"endColumn":16,"suggestions":[{"fix":{"range":[4442,4494],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":128,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":128,"endColumn":20,"suggestions":[{"fix":{"range":[4540,4600],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":20,"suggestions":[{"fix":{"range":[4609,4680],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":20,"suggestions":[{"fix":{"range":[4702,4776],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":132,"column":9,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":132,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'promise' is defined but never used.","line":137,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":137,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"promise"},"fix":{"range":[4888,4897],"text":""},"desc":"Remove unused variable 'promise'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":138,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":138,"endColumn":18,"suggestions":[{"fix":{"range":[4908,4953],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":139,"column":5,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":139,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":18,"suggestions":[{"fix":{"range":[5030,5071],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":145,"column":5,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":145,"endColumn":20}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Script de test pour les commentaires opérateurs\n * Usage: node scripts/test-comments.js\n */\n\nrequire('dotenv').config();\nconst emailService = require('../services/emailService');\n\nasync function testEmailConfiguration() {\n    console.log('🧪 Test de la configuration email...');\n    console.log('Configuration:', {\n        EMAIL_DISABLED: process.env.EMAIL_DISABLED,\n        EMAIL_USE_HTTP: process.env.EMAIL_USE_HTTP,\n        EMAIL_FALLBACK_SERVICE: process.env.EMAIL_FALLBACK_SERVICE,\n        FORMSPREE_URL: process.env.FORMSPREE_URL ? 'Configuré' : 'Non configuré'\n    });\n\n    try {\n        // Test d'envoi d'email via le service\n        const testCommentData = {\n            operatorCode: 'TEST001',\n            operatorName: 'Test Opérateur',\n            lancementCode: 'LT2501145',\n            comment: 'Test de configuration email - Commentaire automatique',\n            timestamp: new Date().toLocaleString('fr-FR', {\n                timeZone: 'Europe/Paris',\n                year: 'numeric',\n                month: '2-digit',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit'\n            })\n        };\n        \n        const result = await emailService.sendCommentNotification(testCommentData);\n        \n        if (result.success) {\n            console.log('✅ Email de test envoyé:', result.messageId);\n            console.log('📧 Destination: boutard@sedi-ati.com');\n            console.log('📧 Service: Formspree (sans mot de passe)');\n            return true;\n        } else {\n            throw new Error(result.error || 'Erreur inconnue');\n        }\n        \n    } catch (error) {\n        console.error('❌ Erreur de configuration email:', error.message);\n        \n        console.log('\\n💡 Solutions possibles:');\n        console.log('1. Vérifiez la configuration Formspree dans le fichier .env');\n        console.log('2. Vérifiez que FORMSPREE_URL est correct');\n        console.log('3. Vérifiez que EMAIL_FALLBACK_SERVICE=formspree');\n        \n        return false;\n    }\n}\n\nasync function testCommentAPI() {\n    console.log('\\n🧪 Test de l\\'API des commentaires...');\n    \n    const baseUrl = process.env.API_URL || 'http://localhost:3001';\n    \n    try {\n        // Test de santé de l'API\n        const healthResponse = await fetch(`${baseUrl}/api/health`);\n        if (!healthResponse.ok) {\n            throw new Error(`API non accessible: ${healthResponse.status}`);\n        }\n        console.log('✅ API accessible');\n        \n        // Test d'ajout de commentaire\n        const commentData = {\n            operatorCode: 'TEST001',\n            operatorName: 'Test Opérateur',\n            lancementCode: 'LT2501145',\n            comment: 'Commentaire de test automatique'\n        };\n        \n        const commentResponse = await fetch(`${baseUrl}/api/comments`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(commentData)\n        });\n        \n        if (!commentResponse.ok) {\n            const error = await commentResponse.json();\n            throw new Error(`Erreur API: ${error.error || commentResponse.statusText}`);\n        }\n        \n        const result = await commentResponse.json();\n        console.log('✅ Commentaire ajouté:', result.message);\n        \n        // Test de récupération des commentaires\n        const getResponse = await fetch(`${baseUrl}/api/comments/operator/TEST001`);\n        if (getResponse.ok) {\n            const comments = await getResponse.json();\n            console.log('✅ Commentaires récupérés:', comments.data.length, 'commentaires');\n        }\n        \n        return true;\n        \n    } catch (error) {\n        console.error('❌ Erreur API:', error.message);\n        console.log('\\n💡 Solutions possibles:');\n        console.log('1. Vérifiez que le serveur backend est démarré');\n        console.log('2. Vérifiez l\\'URL de l\\'API dans API_URL');\n        console.log('3. Vérifiez la configuration de la base de données');\n        return false;\n    }\n}\n\nasync function main() {\n    console.log('🚀 Démarrage des tests des commentaires SEDI\\n');\n    \n    const emailTest = await testEmailConfiguration();\n    const apiTest = await testCommentAPI();\n    \n    console.log('\\n📊 Résumé des tests:');\n    console.log(`Email: ${emailTest ? '✅ OK' : '❌ ÉCHEC'}`);\n    console.log(`API: ${apiTest ? '✅ OK' : '❌ ÉCHEC'}`);\n    \n    if (emailTest && apiTest) {\n        console.log('\\n🎉 Tous les tests sont passés avec succès!');\n        console.log('Les commentaires opérateurs sont prêts à être utilisés.');\n    } else {\n        console.log('\\n⚠️ Certains tests ont échoué. Vérifiez la configuration.');\n        process.exit(1);\n    }\n}\n\n// Gestion des erreurs non capturées\nprocess.on('unhandledRejection', (reason, promise) => {\n    console.error('❌ Erreur non gérée:', reason);\n    process.exit(1);\n});\n\n// Exécuter les tests\nmain().catch(error => {\n    console.error('❌ Erreur fatale:', error);\n    process.exit(1);\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\server.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'dbConfig' is assigned a value but never used.","line":8,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"dbConfig"},"fix":{"range":[212,258],"text":""},"desc":"Remove unused variable 'dbConfig'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'next' is defined but never used.","line":137,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":137,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"next"},"fix":{"range":[4178,4184],"text":""},"desc":"Remove unused variable 'next'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":138,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":138,"endColumn":18,"suggestions":[{"fix":{"range":[4195,4233],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":20,"suggestions":[{"fix":{"range":[5182,5250],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":20,"suggestions":[{"fix":{"range":[5259,5329],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":165,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":165,"endColumn":20,"suggestions":[{"fix":{"range":[5338,5399],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":168,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":168,"endColumn":16,"suggestions":[{"fix":{"range":[5421,5479],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":16,"suggestions":[{"fix":{"range":[5546,5584],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":176,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":176,"endColumn":24,"suggestions":[{"fix":{"range":[5644,5686],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":177,"column":13,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":177,"endColumn":28},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":180,"column":9,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":180,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":16,"suggestions":[{"fix":{"range":[5810,5848],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":24,"suggestions":[{"fix":{"range":[5908,5950],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":189,"column":13,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":189,"endColumn":28},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":192,"column":9,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":192,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":28,"suggestions":[{"fix":{"range":[6247,6289],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nconst rateLimit = require('express-rate-limit');\nrequire('dotenv').config();\n\nconst dbConfig = require('./config/database');\nconst operatorRoutes = require('./routes/operators');\nconst lancementRoutes = require('./routes/lancements');\nconst operationRoutes = require('./routes/operations');\nconst adminRoutes = require('./routes/admin');\nconst authRoutes = require('./routes/auth');\nconst commentRoutes = require('./routes/comments');\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\n// Middleware de sécurité\napp.use(helmet());\n\n// Ensure CORS headers are present on all responses (including errors)\n// and reply to OPTIONS preflight requests even if later middleware/errors occur.\napp.use((req, res, next) => {\n    const origin = req.headers.origin;\n    if (origin) {\n        // Echo back the origin so browsers accept credentialed responses\n        res.setHeader('Access-Control-Allow-Origin', origin);\n        // Inform caches that response varies by origin\n        res.setHeader('Vary', 'Origin');\n    }\n    res.setHeader('Access-Control-Allow-Credentials', 'true');\n    res.setHeader('Access-Control-Allow-Methods', 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n\n    if (req.method === 'OPTIONS') {\n        // short-circuit preflight\n        return res.status(204).end();\n    }\n\n    next();\n});\n\napp.use(cors({\n    origin: [\n        'http://localhost:8080',\n        'http://127.0.0.1:8080',\n        'http://localhost:3001',\n        'http://127.0.0.1:3001',\n        'http://192.168.1.26:8080',\n        'http://192.168.1.26:3001',\n        process.env.FRONTEND_URL\n    ].filter(Boolean),\n    credentials: true\n}));\n\n// Rate limiting - plus permissif en développement\nconst limiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: process.env.NODE_ENV === 'production' ? 100 : 1000, // 100 en prod, 1000 en dev\n    message: {\n        error: 'Trop de requêtes, veuillez patienter',\n        retryAfter: Math.ceil(15 * 60 * 1000 / 1000) // en secondes\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n    skip: (req) => {\n        // Skip rate limiting pour les requêtes de santé\n        return req.path === '/api/health';\n    }\n});\napp.use(limiter);\n\n// Middleware de parsing\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true }));\n\n// Logging\napp.use(morgan('combined'));\n\n// Rate limiting spécifique pour les routes admin (plus permissif)\nconst adminLimiter = rateLimit({\n    windowMs: 1 * 60 * 1000, // 1 minute\n    max: process.env.NODE_ENV === 'production' ? 200 : 500, // 200 en prod, 500 en dev\n    message: {\n        error: 'Trop de requêtes admin, veuillez patienter',\n        retryAfter: 60\n    },\n    skip: (req) => {\n        // Skip pour les requêtes de santé et les requêtes de lecture\n        return req.path === '/api/health' || req.method === 'GET';\n    }\n});\n\n// Routes\napp.use('/api/auth', authRoutes);\napp.use('/api/operators', operatorRoutes);\napp.use('/api/lancements', lancementRoutes);\napp.use('/api/operations', operationRoutes);\napp.use('/api/comments', commentRoutes);\napp.use('/api/admin', adminLimiter, adminRoutes);\n\n// Route de santé\napp.get('/api/health', (req, res) => {\n    res.json({ \n        status: 'OK', \n        timestamp: new Date().toISOString(),\n        uptime: process.uptime()\n    });\n});\n\n// Route racine\napp.get('/', (req, res) => {\n    res.json({ \n        message: 'SEDI Tablette API',\n        version: '1.0.0',\n        endpoints: {\n            health: '/api/health',\n            operators: '/api/operators',\n            lancements: '/api/lancements',\n            operations: '/api/operations',\n            comments: '/api/comments',\n            admin: '/api/admin'\n        }\n    });\n});\n\n// Gestion des erreurs 404\napp.use('*', (req, res) => {\n    res.status(404).json({ \n        error: 'Endpoint non trouvé',\n        path: req.originalUrl\n    });\n});\n\n// Gestion globale des erreurs\napp.use((err, req, res, next) => {\n    console.error('Erreur serveur:', err);\n    \n    res.status(err.status || 500).json({\n        error: process.env.NODE_ENV === 'production' \n            ? 'Erreur interne du serveur' \n            : err.message,\n        ...(process.env.NODE_ENV !== 'production' && { stack: err.stack })\n    });\n});\n\n// Démarrage du serveur (seulement si ce n'est pas un test)\n// Vérifier NODE_ENV au moment de l'exécution, pas de l'import\nconst shouldStartServer = () => {\n    // Ne pas démarrer le serveur si NODE_ENV est 'test' ou si on est dans un contexte de test\n    return process.env.NODE_ENV !== 'test' && \n           process.env.NODE_ENV !== 'testing' &&\n           !process.env.JEST_WORKER_ID && // Jest utilise cette variable\n           !process.argv.some(arg => arg.includes('jest')); // Vérifier si jest est dans les arguments\n};\n\n// Stocker la référence du serveur pour pouvoir le fermer proprement\nlet server = null;\n\nif (shouldStartServer()) {\n    server = app.listen(PORT, () => {\n        console.log(`🚀 Serveur SEDI Tablette démarré sur le port ${PORT}`);\n        console.log(`📊 Interface admin: http://localhost:${PORT}/api/admin`);\n        console.log(`🔍 Santé: http://localhost:${PORT}/api/health`);\n    });\n} else {\n    console.log('🧪 Mode test détecté - Serveur non démarré');\n}\n\n// Gestion propre de l'arrêt\nprocess.on('SIGTERM', () => {\n    console.log('🛑 Arrêt du serveur...');\n    if (server) {\n        server.close(() => {\n            console.log('✅ Serveur fermé proprement');\n            process.exit(0);\n        });\n    } else {\n        process.exit(0);\n    }\n});\n\nprocess.on('SIGINT', () => {\n    console.log('🛑 Arrêt du serveur...');\n    if (server) {\n        server.close(() => {\n            console.log('✅ Serveur fermé proprement');\n            process.exit(0);\n        });\n    } else {\n        process.exit(0);\n    }\n});\n\n// Fonction pour fermer le serveur proprement (utile pour les tests)\nconst closeServer = () => {\n    return new Promise((resolve) => {\n        if (server) {\n            server.close(() => {\n                console.log('✅ Serveur fermé proprement');\n                resolve();\n            });\n        } else {\n            resolve();\n        }\n    });\n};\n\nmodule.exports = { app, closeServer };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\services\\cacheService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\services\\emailService.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":13,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":13,"endColumn":24,"suggestions":[{"fix":{"range":[364,427],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":20,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":24,"suggestions":[{"fix":{"range":[631,694],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":28,"column":19,"nodeType":"CallExpression","messageId":"missingRadix","endLine":28,"endColumn":50,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[995,995],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'success' is defined but never used.","line":40,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"success"},"fix":{"range":[1374,1383],"text":""},"desc":"Remove unused variable 'success'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":30,"suggestions":[{"fix":{"range":[1431,1488],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":28,"suggestions":[{"fix":{"range":[1526,1575],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":28,"suggestions":[{"fix":{"range":[1802,2212],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":24,"suggestions":[{"fix":{"range":[5744,5805],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":26,"suggestions":[{"fix":{"range":[5924,5987],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":26,"suggestions":[{"fix":{"range":[9529,9585],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":236,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":236,"endColumn":24,"suggestions":[{"fix":{"range":[11034,11091],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":239,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":239,"endColumn":26,"suggestions":[{"fix":{"range":[11197,11268],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const nodemailer = require('nodemailer');\nconst webhookEmailService = require('./webhookEmailService');\n\nclass EmailService {\n    constructor() {\n        this.transporter = null;\n        this.initializeTransporter();\n    }\n\n    initializeTransporter() {\n        // Vérifier si l'email est désactivé\n        if (process.env.EMAIL_DISABLED === 'true') {\n            console.log('📧 Email désactivé - mode simulation uniquement');\n            this.transporter = null;\n            return;\n        }\n\n        // Vérifier si on utilise un service d'email HTTP (sans SMTP)\n        if (process.env.EMAIL_USE_HTTP === 'true') {\n            console.log('📧 Configuration email HTTP (sans mot de passe)');\n            this.transporter = null; // Pas de transporter SMTP\n            return;\n        }\n\n        // Configuration SMTP classique\n        this.transporter = nodemailer.createTransport({\n            host: process.env.SMTP_HOST || 'smtp.gmail.com',\n            port: parseInt(process.env.SMTP_PORT) || 587,\n            secure: false,\n            auth: {\n                user: process.env.SMTP_USER || 'boutard@sedi-ati.com',\n                pass: process.env.SMTP_PASS || process.env.SMTP_PASSWORD\n            },\n            tls: {\n                rejectUnauthorized: false\n            }\n        });\n\n        // Vérifier la configuration\n        this.transporter.verify((error, success) => {\n            if (error) {\n                console.error('❌ Erreur de configuration email:', error);\n            } else {\n                console.log('✅ Serveur email configuré et prêt');\n            }\n        });\n    }\n\n    async sendCommentNotification(commentData) {\n        try {\n            // Si l'email est désactivé, simuler l'envoi\n            if (process.env.EMAIL_DISABLED === 'true') {\n                console.log('📧 [SIMULATION] Email de commentaire:', {\n                    to: 'boutard@sedi-ati.com',\n                    subject: `[SEDI] Nouveau commentaire - Opérateur ${commentData.operatorCode}`,\n                    operator: commentData.operatorName,\n                    lancement: commentData.lancementCode,\n                    comment: commentData.comment.substring(0, 100) + '...'\n                });\n                return { success: true, messageId: 'simulation-' + Date.now() };\n            }\n\n            // Si on utilise HTTP au lieu de SMTP\n            if (process.env.EMAIL_USE_HTTP === 'true') {\n                return await this.sendEmailViaHTTP(commentData);\n            }\n\n            const { operatorCode, operatorName, lancementCode, comment, timestamp } = commentData;\n            \n            const mailOptions = {\n                from: process.env.SMTP_FROM || 'boutard@sedi-ati.com',\n                to: 'boutard@sedi-ati.com',\n                subject: `[SEDI] Nouveau commentaire - Opérateur ${operatorCode}`,\n                html: `\n                    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n                        <h2 style=\"color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px;\">\n                            📝 Nouveau Commentaire SEDI\n                        </h2>\n                        \n                        <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                            <h3 style=\"color: #2c3e50; margin-top: 0;\">Détails du commentaire</h3>\n                            \n                            <table style=\"width: 100%; border-collapse: collapse;\">\n                                <tr>\n                                    <td style=\"padding: 8px 0; font-weight: bold; color: #555; width: 150px;\">Opérateur :</td>\n                                    <td style=\"padding: 8px 0; color: #2c3e50;\">${operatorName} (${operatorCode})</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"padding: 8px 0; font-weight: bold; color: #555;\">Code Lancement :</td>\n                                    <td style=\"padding: 8px 0; color: #2c3e50;\">${lancementCode}</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"padding: 8px 0; font-weight: bold; color: #555;\">Date/Heure :</td>\n                                    <td style=\"padding: 8px 0; color: #2c3e50;\">${timestamp}</td>\n                                </tr>\n                            </table>\n                        </div>\n                        \n                        <div style=\"background-color: #e8f4fd; padding: 20px; border-left: 4px solid #3498db; margin: 20px 0;\">\n                            <h3 style=\"color: #2c3e50; margin-top: 0;\">Commentaire :</h3>\n                            <p style=\"color: #2c3e50; font-size: 16px; line-height: 1.6; margin: 0; white-space: pre-wrap;\">${comment}</p>\n                        </div>\n                        \n                        <div style=\"background-color: #f1f2f6; padding: 15px; border-radius: 5px; margin-top: 20px; font-size: 14px; color: #666;\">\n                            <p style=\"margin: 0;\">\n                                <strong>Note :</strong> Ce commentaire a été automatiquement envoyé depuis l'interface tablette SEDI.\n                            </p>\n                        </div>\n                    </div>\n                `,\n                text: `\nNouveau commentaire SEDI\n\nOpérateur: ${operatorName} (${operatorCode})\nCode Lancement: ${lancementCode}\nDate/Heure: ${timestamp}\n\nCommentaire:\n${comment}\n\n---\nCe commentaire a été automatiquement envoyé depuis l'interface tablette SEDI.\n                `\n            };\n\n            const result = await this.transporter.sendMail(mailOptions);\n            console.log('✅ Email envoyé avec succès:', result.messageId);\n            return { success: true, messageId: result.messageId };\n            \n        } catch (error) {\n            console.error('❌ Erreur lors de l\\'envoi de l\\'email:', error);\n            return { success: false, error: error.message };\n        }\n    }\n\n    // Méthode pour envoyer des emails via HTTP (sans mot de passe)\n    async sendEmailViaHTTP(commentData) {\n        try {\n            const { operatorCode, operatorName, lancementCode, comment, timestamp } = commentData;\n            \n            // Utiliser un service d'email gratuit comme EmailJS ou un webhook\n            const emailData = {\n                to: 'boutard@sedi-ati.com',\n                subject: `[SEDI] Nouveau commentaire - Opérateur ${operatorCode}`,\n                html: `\n                    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n                        <h2 style=\"color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px;\">\n                            📝 Nouveau Commentaire SEDI\n                        </h2>\n                        \n                        <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                            <h3 style=\"color: #2c3e50; margin-top: 0;\">Détails du commentaire</h3>\n                            \n                            <table style=\"width: 100%; border-collapse: collapse;\">\n                                <tr>\n                                    <td style=\"padding: 8px 0; font-weight: bold; color: #555; width: 150px;\">Opérateur :</td>\n                                    <td style=\"padding: 8px 0; color: #2c3e50;\">${operatorName} (${operatorCode})</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"padding: 8px 0; font-weight: bold; color: #555;\">Code Lancement :</td>\n                                    <td style=\"padding: 8px 0; color: #2c3e50;\">${lancementCode}</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"padding: 8px 0; font-weight: bold; color: #555;\">Date/Heure :</td>\n                                    <td style=\"padding: 8px 0; color: #2c3e50;\">${timestamp}</td>\n                                </tr>\n                            </table>\n                        </div>\n                        \n                        <div style=\"background-color: #e8f4fd; padding: 20px; border-left: 4px solid #3498db; margin: 20px 0;\">\n                            <h3 style=\"color: #2c3e50; margin-top: 0;\">Commentaire :</h3>\n                            <p style=\"color: #2c3e50; font-size: 16px; line-height: 1.6; margin: 0; white-space: pre-wrap;\">${comment}</p>\n                        </div>\n                        \n                        <div style=\"background-color: #f1f2f6; padding: 15px; border-radius: 5px; margin-top: 20px; font-size: 14px; color: #666;\">\n                            <p style=\"margin: 0;\">\n                                <strong>Note :</strong> Ce commentaire a été automatiquement envoyé depuis l'interface tablette SEDI.\n                            </p>\n                        </div>\n                    </div>\n                `,\n                text: `\nNouveau commentaire SEDI\n\nOpérateur: ${operatorName} (${operatorCode})\nCode Lancement: ${lancementCode}\nDate/Heure: ${timestamp}\n\nCommentaire:\n${comment}\n\n---\nCe commentaire a été automatiquement envoyé depuis l'interface tablette SEDI.\n                `\n            };\n\n            // Utiliser le service webhook pour envoyer l'email\n            return await webhookEmailService.sendEmail(emailData);\n\n        } catch (error) {\n            console.error('❌ Erreur lors de l\\'envoi HTTP:', error);\n            return { success: false, error: error.message };\n        }\n    }\n\n    async sendTestEmail() {\n        try {\n            // Si on utilise HTTP\n            if (process.env.EMAIL_USE_HTTP === 'true') {\n                return await this.sendEmailViaHTTP({\n                    operatorCode: 'TEST',\n                    operatorName: 'Test Opérateur',\n                    lancementCode: 'LT2501145',\n                    comment: 'Ceci est un email de test pour vérifier la configuration email de SEDI.',\n                    timestamp: new Date().toLocaleString('fr-FR', {\n                        timeZone: 'Europe/Paris',\n                        year: 'numeric',\n                        month: '2-digit',\n                        day: '2-digit',\n                        hour: '2-digit',\n                        minute: '2-digit',\n                        second: '2-digit'\n                    })\n                });\n            }\n\n            const mailOptions = {\n                from: process.env.SMTP_FROM || 'boutard@sedi-ati.com',\n                to: 'boutard@sedi-ati.com',\n                subject: '[SEDI] Test de configuration email',\n                text: 'Ceci est un email de test pour vérifier la configuration email de SEDI.',\n                html: '<p>Ceci est un email de test pour vérifier la configuration email de SEDI.</p>'\n            };\n\n            const result = await this.transporter.sendMail(mailOptions);\n            console.log('✅ Email de test envoyé:', result.messageId);\n            return { success: true, messageId: result.messageId };\n        } catch (error) {\n            console.error('❌ Erreur lors de l\\'envoi de l\\'email de test:', error);\n            return { success: false, error: error.message };\n        }\n    }\n}\n\nmodule.exports = new EmailService();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\services\\webhookEmailService.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":21,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":21,"endColumn":26,"suggestions":[{"fix":{"range":[662,709],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":28,"suggestions":[{"fix":{"range":[1556,1607],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":26,"suggestions":[{"fix":{"range":[1873,1914],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":28,"suggestions":[{"fix":{"range":[3078,3157],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":28,"suggestions":[{"fix":{"range":[3980,4042],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":26,"suggestions":[{"fix":{"range":[4265,4307],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":24,"suggestions":[{"fix":{"range":[4320,4365],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":130,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":130,"endColumn":28,"suggestions":[{"fix":{"range":[4730,4804],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":28,"suggestions":[{"fix":{"range":[5987,6050],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":171,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":171,"endColumn":26,"suggestions":[{"fix":{"range":[6347,6390],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":172,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":172,"endColumn":24,"suggestions":[{"fix":{"range":[6403,6448],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":183,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":183,"endColumn":28,"suggestions":[{"fix":{"range":[6751,6822],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":202,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":202,"endColumn":28,"suggestions":[{"fix":{"range":[7452,7516],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":209,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":209,"endColumn":26,"suggestions":[{"fix":{"range":[7743,7787],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":210,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":210,"endColumn":24,"suggestions":[{"fix":{"range":[7800,7845],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":216,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":216,"endColumn":20,"suggestions":[{"fix":{"range":[7946,7990],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":20,"suggestions":[{"fix":{"range":[7999,8034],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":218,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":218,"endColumn":20,"suggestions":[{"fix":{"range":[8043,8088],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":20,"suggestions":[{"fix":{"range":[8097,8165],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":220,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":220,"endColumn":20,"suggestions":[{"fix":{"range":[8174,8228],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":24,"suggestions":[{"fix":{"range":[9080,9130],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":250,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":250,"endColumn":26,"suggestions":[{"fix":{"range":[9266,9318],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":256,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":256,"endColumn":20,"suggestions":[{"fix":{"range":[9435,9470],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":257,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":257,"endColumn":20,"suggestions":[{"fix":{"range":[9479,9522],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":258,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":258,"endColumn":20,"suggestions":[{"fix":{"range":[9531,9559],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":259,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":259,"endColumn":20,"suggestions":[{"fix":{"range":[9568,9601],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":260,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":260,"endColumn":20,"suggestions":[{"fix":{"range":[9610,9653],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":261,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":261,"endColumn":20,"suggestions":[{"fix":{"range":[9662,9719],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":262,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":262,"endColumn":20,"suggestions":[{"fix":{"range":[9728,9756],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":20,"suggestions":[{"fix":{"range":[9765,9793],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":20,"suggestions":[{"fix":{"range":[9802,9837],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Service pour envoyer des emails via webhook HTTP (sans mot de passe)\nconst fetch = require('node-fetch');\n\nclass WebhookEmailService {\n    constructor() {\n        this.webhookUrl = process.env.EMAIL_WEBHOOK_URL;\n        this.fallbackService = process.env.EMAIL_FALLBACK_SERVICE || 'log';\n    }\n\n    async sendEmail(emailData) {\n        try {\n            // Si un webhook est configuré, l'utiliser\n            if (this.webhookUrl) {\n                return await this.sendViaWebhook(emailData);\n            }\n\n            // Sinon, utiliser un service de fallback\n            return await this.sendViaFallback(emailData);\n\n        } catch (error) {\n            console.error(' Erreur webhook email:', error);\n            return { success: false, error: error.message };\n        }\n    }\n\n    async sendViaWebhook(emailData) {\n        try {\n            const response = await fetch(this.webhookUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'User-Agent': 'SEDI-Tablette/1.0'\n                },\n                body: JSON.stringify({\n                    to: emailData.to,\n                    subject: emailData.subject,\n                    html: emailData.html,\n                    text: emailData.text,\n                    from: 'SEDI Tablette <noreply@sedi-ati.com>',\n                    timestamp: new Date().toISOString()\n                })\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n                console.log('✅ Email envoyé via webhook:', result);\n                return { success: true, messageId: result.messageId || 'webhook-' + Date.now() };\n            } else {\n                throw new Error(`Webhook error: ${response.status} ${response.statusText}`);\n            }\n\n        } catch (error) {\n            console.error(' Erreur webhook:', error);\n            throw error;\n        }\n    }\n\n    async sendViaFallback(emailData) {\n        switch (this.fallbackService) {\n            case 'emailjs':\n                return await this.sendViaEmailJS(emailData);\n            case 'formspree':\n                return await this.sendViaFormspree(emailData);\n            case 'sendgrid':\n                return await this.sendViaSendGrid(emailData);\n            case 'log':\n                return this.logEmail(emailData);\n            case 'file':\n                return this.saveToFile(emailData);\n            case 'console':\n                return this.consoleEmail(emailData);\n            default:\n                return this.logEmail(emailData);\n        }\n    }\n\n    // Envoi via EmailJS (service gratuit - VRAIS emails)\n    async sendViaEmailJS(emailData) {\n        try {\n            const emailjsUrl = 'https://api.emailjs.com/api/v1.0/email/send';\n            const serviceId = process.env.EMAILJS_SERVICE_ID;\n            const templateId = process.env.EMAILJS_TEMPLATE_ID;\n            const publicKey = process.env.EMAILJS_PUBLIC_KEY;\n\n            if (!serviceId || !templateId || !publicKey) {\n                console.log('⚠️ Configuration EmailJS manquante, utilisation du mode console');\n                return this.consoleEmail(emailData);\n            }\n\n            const response = await fetch(emailjsUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    service_id: serviceId,\n                    template_id: templateId,\n                    user_id: publicKey,\n                    template_params: {\n                        to_email: emailData.to,\n                        from_name: 'SEDI Tablette',\n                        subject: emailData.subject,\n                        message: emailData.text,\n                        html_message: emailData.html\n                    }\n                })\n            });\n\n            if (response.ok) {\n                console.log('✅ Email envoyé via EmailJS vers:', emailData.to);\n                return { success: true, messageId: 'emailjs-' + Date.now() };\n            } else {\n                throw new Error(`EmailJS error: ${response.status}`);\n            }\n\n        } catch (error) {\n            console.error('❌ Erreur EmailJS:', error);\n            console.log('🔄 Fallback vers mode console');\n            return this.consoleEmail(emailData);\n        }\n    }\n\n    // Envoi via SendGrid (service gratuit - VRAIS emails)\n    async sendViaSendGrid(emailData) {\n        try {\n            const sendgridUrl = 'https://api.sendgrid.com/v3/mail/send';\n            const apiKey = process.env.SENDGRID_API_KEY;\n            \n            if (!apiKey) {\n                console.log('⚠️ Clé API SendGrid manquante, utilisation du mode console');\n                return this.consoleEmail(emailData);\n            }\n\n            const response = await fetch(sendgridUrl, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${apiKey}`,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    personalizations: [{\n                        to: [{ email: emailData.to }],\n                        subject: emailData.subject\n                    }],\n                    from: {\n                        email: process.env.SENDGRID_FROM_EMAIL || 'noreply@sedi-ati.com',\n                        name: process.env.SENDGRID_FROM_NAME || 'SEDI Tablette'\n                    },\n                    content: [\n                        {\n                            type: 'text/plain',\n                            value: emailData.text\n                        },\n                        {\n                            type: 'text/html',\n                            value: emailData.html\n                        }\n                    ]\n                })\n            });\n\n            if (response.ok) {\n                console.log('✅ Email envoyé via SendGrid vers:', emailData.to);\n                return { success: true, messageId: 'sendgrid-' + Date.now() };\n            } else {\n                const errorText = await response.text();\n                throw new Error(`SendGrid error: ${response.status} - ${errorText}`);\n            }\n\n        } catch (error) {\n            console.error('❌ Erreur SendGrid:', error);\n            console.log('🔄 Fallback vers mode console');\n            return this.consoleEmail(emailData);\n        }\n    }\n\n    // Envoi via Formspree (service gratuit - VRAIS emails)\n    async sendViaFormspree(emailData) {\n        try {\n            const formspreeUrl = process.env.FORMSPREE_URL;\n            \n            if (!formspreeUrl) {\n                console.log('⚠️ URL Formspree manquante, utilisation du mode console');\n                return this.consoleEmail(emailData);\n            }\n            \n            const response = await fetch(formspreeUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    email: emailData.to,\n                    subject: emailData.subject,\n                    message: emailData.text,\n                    _replyto: 'noreply@sedi-ati.com',\n                    _cc: 'boutard@sedi-ati.com'\n                })\n            });\n\n            if (response.ok) {\n                console.log('✅ Email envoyé via Formspree vers:', emailData.to);\n                return { success: true, messageId: 'formspree-' + Date.now() };\n            } else {\n                throw new Error(`Formspree error: ${response.status}`);\n            }\n\n        } catch (error) {\n            console.error('❌ Erreur Formspree:', error);\n            console.log('🔄 Fallback vers mode console');\n            return this.consoleEmail(emailData);\n        }\n    }\n\n    logEmail(emailData) {\n        console.log(' [LOG] Email de commentaire:');\n        console.log('  To:', emailData.to);\n        console.log('  Subject:', emailData.subject);\n        console.log('  Content:', emailData.text.substring(0, 200) + '...');\n        console.log('  Timestamp:', new Date().toISOString());\n        \n        return { success: true, messageId: 'log-' + Date.now() };\n    }\n\n    async saveToFile(emailData) {\n        const fs = require('fs').promises;\n        const path = require('path');\n        \n        try {\n            const emailDir = path.join(__dirname, '../logs/emails');\n            await fs.mkdir(emailDir, { recursive: true });\n            \n            const filename = `email_${Date.now()}.json`;\n            const filepath = path.join(emailDir, filename);\n            \n            const emailRecord = {\n                timestamp: new Date().toISOString(),\n                to: emailData.to,\n                subject: emailData.subject,\n                html: emailData.html,\n                text: emailData.text\n            };\n            \n            await fs.writeFile(filepath, JSON.stringify(emailRecord, null, 2));\n            console.log('✅ Email sauvegardé dans:', filepath);\n            \n            return { success: true, messageId: 'file-' + Date.now() };\n            \n        } catch (error) {\n            console.error(' Erreur sauvegarde fichier:', error);\n            return { success: false, error: error.message };\n        }\n    }\n\n    consoleEmail(emailData) {\n        console.log('\\n' + '='.repeat(80));\n        console.log('📧 NOUVEAU COMMENTAIRE SEDI');\n        console.log('='.repeat(80));\n        console.log('To:', emailData.to);\n        console.log('Subject:', emailData.subject);\n        console.log('Time:', new Date().toLocaleString('fr-FR'));\n        console.log('-'.repeat(80));\n        console.log(emailData.text);\n        console.log('='.repeat(80) + '\\n');\n        \n        return { success: true, messageId: 'console-' + Date.now() };\n    }\n}\n\nmodule.exports = new WebhookEmailService();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\test-email-production.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":5,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":5,"endColumn":16,"suggestions":[{"fix":{"range":[148,195],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":17,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":20,"suggestions":[{"fix":{"range":[550,591],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":21,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":21,"endColumn":24,"suggestions":[{"fix":{"range":[727,771],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":24,"suggestions":[{"fix":{"range":[785,820],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":24,"suggestions":[{"fix":{"range":[852,896],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":24,"suggestions":[{"fix":{"range":[910,950],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":22,"suggestions":[{"fix":{"range":[1004,1058],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-process-exit","severity":2,"message":"Don't use process.exit(); throw an error instead.","line":32,"column":5,"nodeType":"CallExpression","messageId":"noProcessExit","endLine":32,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Script de test pour l'envoi d'email en production\r\nconst emailService = require('./services/emailService');\r\n\r\nasync function testEmail() {\r\n    console.log('🧪 Test de l\\'envoi d\\'email...');\r\n    \r\n    try {\r\n        // Test d'envoi d'un commentaire\r\n        const commentData = {\r\n            operatorCode: 'TEST001',\r\n            operatorName: 'Test Opérateur',\r\n            lancementCode: 'LT123456',\r\n            comment: 'Test d\\'envoi d\\'email depuis la production',\r\n            timestamp: new Date().toISOString()\r\n        };\r\n\r\n        console.log('📧 Envoi du test email...');\r\n        const result = await emailService.sendCommentNotification(commentData);\r\n        \r\n        if (result.success) {\r\n            console.log('✅ Email envoyé avec succès !');\r\n            console.log('📋 Détails:', result);\r\n        } else {\r\n            console.log('❌ Échec de l\\'envoi d\\'email');\r\n            console.log('📋 Erreur:', result.error);\r\n        }\r\n        \r\n    } catch (error) {\r\n        console.error('💥 Erreur lors du test email:', error);\r\n    }\r\n    \r\n    process.exit(0);\r\n}\r\n\r\n// Lancer le test\r\ntestEmail();\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\test-email-simple.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":14,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":14,"endColumn":16,"suggestions":[{"fix":{"range":[320,396],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":16,"suggestions":[{"fix":{"range":[401,611],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":20,"suggestions":[{"fix":{"range":[1307,1351],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":24,"suggestions":[{"fix":{"range":[1475,1524],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":24,"suggestions":[{"fix":{"range":[1537,1582],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":24,"suggestions":[{"fix":{"range":[1595,1661],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":24,"suggestions":[{"fix":{"range":[1674,1744],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":26,"suggestions":[{"fix":{"range":[1774,1832],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":22,"suggestions":[{"fix":{"range":[1874,1923],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Test simple pour les commentaires SEDI (sans mot de passe)\n * Usage: node test-email-simple.js\n */\n\n// Charger la configuration\nrequire('dotenv').config({ path: './config-email-simple.env' });\n\nconst emailService = require('./services/emailService');\n\nasync function testCommentEmail() {\n    console.log('🧪 Test d\\'envoi d\\'email de commentaire (sans mot de passe)');\n    console.log('Configuration:', {\n        EMAIL_DISABLED: process.env.EMAIL_DISABLED,\n        EMAIL_USE_HTTP: process.env.EMAIL_USE_HTTP,\n        EMAIL_FALLBACK_SERVICE: process.env.EMAIL_FALLBACK_SERVICE\n    });\n\n    try {\n        // Simuler un commentaire d'opérateur\n        const commentData = {\n            operatorCode: 'OP001',\n            operatorName: 'Jean Dupont',\n            lancementCode: 'LT2501145',\n            comment: 'Test de commentaire - Problème de qualité détecté sur la pièce #123. Vérification nécessaire avant continuation de la production.',\n            timestamp: new Date().toLocaleString('fr-FR', {\n                timeZone: 'Europe/Paris',\n                year: 'numeric',\n                month: '2-digit',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit'\n            })\n        };\n\n        console.log('\\n📝 Envoi du commentaire...');\n        const result = await emailService.sendCommentNotification(commentData);\n\n        if (result.success) {\n            console.log('✅ Commentaire envoyé avec succès!');\n            console.log('Message ID:', result.messageId);\n            console.log('\\n📧 L\\'email a été envoyé à: boutard@sedi-ati.com');\n            console.log('📧 Sujet: [SEDI] Nouveau commentaire - Opérateur OP001');\n        } else {\n            console.error('❌ Erreur lors de l\\'envoi:', result.error);\n        }\n\n    } catch (error) {\n        console.error('❌ Erreur fatale:', error.message);\n    }\n}\n\n// Exécuter le test\ntestCommentEmail();\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\tests\\basic.test.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":27,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":27,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\r\n\r\ndescribe('SEDI Tablette - Tests de base', () => {\r\n  it('should pass basic test', () => {\r\n    expect(1 + 1).toBe(2);\r\n  });\r\n\r\n  it('should test environment variables', () => {\r\n    expect(process.env.NODE_ENV).toBe('test');\r\n  });\r\n\r\n  it('should test mock functionality', () => {\r\n    const mockFn = vi.fn();\r\n    mockFn('test');\r\n    expect(mockFn).toHaveBeenCalledWith('test');\r\n  });\r\n});\r\n\r\ndescribe('SEDI Tablette - Tests de configuration', () => {\r\n  it('should have correct test environment', () => {\r\n    expect(process.env.NODE_ENV).toBe('test');\r\n    expect(process.env.VITEST_TIMEOUT).toBe('10000');\r\n  });\r\n\r\n  it('should have console mock configured', () => {\r\n    // Vérifier que console.log est mocké\r\n    expect(typeof console.log).toBe('function');\r\n  });\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\tests\\native-tests.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":78,"column":20,"nodeType":"MemberExpression","messageId":"unexpected","endLine":78,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Tests unitaires natifs pour SEDI Tablette v2\r\nconst { TestRunner, expect, mock } = require('./test-runner');\r\n\r\nconst runner = new TestRunner();\r\n\r\n// Tests de base\r\nrunner.describe('SEDI Tablette - Tests de base', () => {\r\n  runner.it('should pass basic arithmetic test', () => {\r\n    expect(1 + 1).toBe(2);\r\n    expect(2 * 3).toBe(6);\r\n    expect(10 / 2).toBe(5);\r\n  });\r\n\r\n  runner.it('should test string operations', () => {\r\n    expect('SEDI'.toLowerCase()).toBe('sedi');\r\n    expect('Tablette'.length).toBe(8);\r\n  });\r\n\r\n  runner.it('should test array operations', () => {\r\n    const arr = [1, 2, 3];\r\n    expect(arr.length).toBe(3);\r\n    expect(arr[0]).toBe(1);\r\n  });\r\n});\r\n\r\n// Tests de configuration\r\nrunner.describe('SEDI Tablette - Tests de configuration', () => {\r\n  runner.it('should have correct environment', () => {\r\n    expect(process.env.NODE_ENV || 'development').toBe('development');\r\n  });\r\n\r\n  runner.it('should have required modules', () => {\r\n    expect(typeof require).toBe('function');\r\n    expect(typeof module).toBe('object');\r\n  });\r\n});\r\n\r\n// Tests de mocks\r\nrunner.describe('SEDI Tablette - Tests de mocks', () => {\r\n  runner.it('should work with mocks', () => {\r\n    const mockFn = mock();\r\n    mockFn.mockReturnValue('test');\r\n    \r\n    const result = mockFn('arg1', 'arg2');\r\n    expect(result).toBe('test');\r\n    expect(mockFn).toHaveBeenCalled();\r\n    expect(mockFn).toHaveBeenCalledWith('arg1', 'arg2');\r\n  });\r\n});\r\n\r\n// Tests de validation\r\nrunner.describe('SEDI Tablette - Tests de validation', () => {\r\n  runner.it('should validate email format', () => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    expect(emailRegex.test('test@sedi.com')).toBe(true);\r\n    expect(emailRegex.test('invalid-email')).toBe(false);\r\n  });\r\n\r\n  runner.it('should validate date format', () => {\r\n    const date = new Date('2024-01-01');\r\n    expect(date.getFullYear()).toBe(2024);\r\n    expect(date.getMonth()).toBe(0); // Janvier = 0\r\n  });\r\n});\r\n\r\n// Tests de gestion d'erreurs\r\nrunner.describe('SEDI Tablette - Tests de gestion d\\'erreurs', () => {\r\n  runner.it('should handle errors correctly', () => {\r\n    const errorFunction = () => {\r\n      throw new Error('Test error');\r\n    };\r\n    \r\n    expect(errorFunction).toThrow('Test error');\r\n  });\r\n});\r\n\r\n// Lancer les tests\r\nrunner.run().catch(console.error);\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\tests\\test-runner.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'assert' is assigned a value but never used.","line":4,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"assert"},"fix":{"range":[108,141],"text":""},"desc":"Remove unused variable 'assert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fs' is assigned a value but never used.","line":5,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"fs"},"fix":{"range":[143,168],"text":""},"desc":"Remove unused variable 'fs'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'path' is assigned a value but never used.","line":6,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"path"},"fix":{"range":[170,199],"text":""},"desc":"Remove unused variable 'path'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TEST_CONFIG' is assigned a value but never used.","line":9,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"TEST_CONFIG"},"fix":{"range":[231,292],"text":""},"desc":"Remove unused variable 'TEST_CONFIG'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":16,"suggestions":[{"fix":{"range":[496,524],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":16,"suggestions":[{"fix":{"range":[626,686],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":20,"suggestions":[{"fix":{"range":[753,785],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":20,"suggestions":[{"fix":{"range":[870,902],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":20,"suggestions":[{"fix":{"range":[912,957],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":16,"suggestions":[{"fix":{"range":[1109,1147],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":16,"suggestions":[{"fix":{"range":[1153,1197],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":16,"suggestions":[{"fix":{"range":[1203,1247],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":16,"suggestions":[{"fix":{"range":[1253,1296],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":16,"suggestions":[{"fix":{"range":[1302,1408],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fn' is defined but never used.","line":100,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"fn"},"fix":{"range":[2765,2767],"text":""},"desc":"Remove unused variable 'fn'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Tests unitaires natifs Node.js pour SEDI Tablette v2\r\n// Alternative simple et efficace à Jest/Vitest\r\n\r\nconst assert = require('assert');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\n// Configuration des tests\r\nconst TEST_CONFIG = {\r\n  timeout: 10000,\r\n  verbose: true\r\n};\r\n\r\n// Classe de test simple\r\nclass TestRunner {\r\n  constructor() {\r\n    this.tests = [];\r\n    this.passed = 0;\r\n    this.failed = 0;\r\n    this.startTime = Date.now();\r\n  }\r\n\r\n  describe(name, fn) {\r\n    console.log(`\\n📋 ${name}`);\r\n    fn();\r\n  }\r\n\r\n  it(name, fn) {\r\n    this.tests.push({ name, fn });\r\n  }\r\n\r\n  async run() {\r\n    console.log('🚀 Démarrage des tests SEDI Tablette v2...\\n');\r\n    \r\n    for (const test of this.tests) {\r\n      try {\r\n        console.log(`  ✓ ${test.name}`);\r\n        await test.fn();\r\n        this.passed++;\r\n      } catch (error) {\r\n        console.log(`  ❌ ${test.name}`);\r\n        console.log(`     Erreur: ${error.message}`);\r\n        this.failed++;\r\n      }\r\n    }\r\n\r\n    this.printSummary();\r\n  }\r\n\r\n  printSummary() {\r\n    const duration = Date.now() - this.startTime;\r\n    console.log(`\\n📊 Résumé des tests:`);\r\n    console.log(`   ✅ Réussis: ${this.passed}`);\r\n    console.log(`   ❌ Échoués: ${this.failed}`);\r\n    console.log(`   ⏱️  Durée: ${duration}ms`);\r\n    console.log(`   📈 Taux de réussite: ${((this.passed / (this.passed + this.failed)) * 100).toFixed(1)}%`);\r\n  }\r\n}\r\n\r\n// Fonctions d'assertion\r\nconst expect = (actual) => ({\r\n  toBe: (expected) => {\r\n    if (actual !== expected) {\r\n      throw new Error(`Expected ${actual} to be ${expected}`);\r\n    }\r\n  },\r\n  toEqual: (expected) => {\r\n    if (JSON.stringify(actual) !== JSON.stringify(expected)) {\r\n      throw new Error(`Expected ${JSON.stringify(actual)} to equal ${JSON.stringify(expected)}`);\r\n    }\r\n  },\r\n  toThrow: (expectedError) => {\r\n    try {\r\n      if (typeof actual === 'function') {\r\n        actual();\r\n      }\r\n      throw new Error('Expected function to throw an error');\r\n    } catch (error) {\r\n      if (expectedError && !error.message.includes(expectedError)) {\r\n        throw new Error(`Expected error message to contain \"${expectedError}\", got \"${error.message}\"`);\r\n      }\r\n    }\r\n  },\r\n  toHaveBeenCalled: () => {\r\n    if (!actual.called) {\r\n      throw new Error('Expected function to have been called');\r\n    }\r\n  },\r\n  toHaveBeenCalledWith: (...args) => {\r\n    if (!actual.called || !actual.calledWith) {\r\n      throw new Error('Expected function to have been called');\r\n    }\r\n    if (JSON.stringify(actual.calledWith) !== JSON.stringify(args)) {\r\n      throw new Error(`Expected function to have been called with ${JSON.stringify(args)}, got ${JSON.stringify(actual.calledWith)}`);\r\n    }\r\n  }\r\n});\r\n\r\n// Mock simple\r\nconst mock = (fn) => {\r\n  const mockFn = (...args) => {\r\n    mockFn.called = true;\r\n    mockFn.calledWith = args;\r\n    return mockFn.returnValue;\r\n  };\r\n  mockFn.called = false;\r\n  mockFn.calledWith = null;\r\n  mockFn.returnValue = undefined;\r\n  mockFn.mockReturnValue = (value) => {\r\n    mockFn.returnValue = value;\r\n    return mockFn;\r\n  };\r\n  return mockFn;\r\n};\r\n\r\n// Export pour utilisation\r\nmodule.exports = { TestRunner, expect, mock };\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\tests\\vitest.setup.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":14,"column":37,"nodeType":"MemberExpression","messageId":"unexpected","endLine":14,"endColumn":48},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":10,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":17,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":18,"column":10,"nodeType":"MemberExpression","messageId":"unexpected","endLine":18,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":22,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":3},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":24,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":18,"suggestions":[{"fix":{"range":[648,701],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":26,"column":21,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":26,"endColumn":32,"fix":{"range":[723,734],"text":"{callback();}"}},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":28,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":18},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":22,"suggestions":[{"fix":{"range":[794,828],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":30,"column":19,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":30,"endColumn":24,"fix":{"range":[848,853],"text":"{cb();}"}},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":34,"column":10,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":35,"column":10,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":36,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":36,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":37,"column":10,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":38,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":40,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":44,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":44,"endColumn":3},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":45,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":45,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":46,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":46,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":47,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":47,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":51,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":51,"endColumn":3},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":52,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":52,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":53,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":53,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":56,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":3},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":57,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":57,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'beforeEach' is not defined.","line":61,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":61,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":63,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":63,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'afterEach' is not defined.","line":66,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":66,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'vi' is not defined.","line":68,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":68,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'afterAll' is not defined.","line":72,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":72,"endColumn":9},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":14,"suggestions":[{"fix":{"range":[1940,1991],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":2,"fixableWarningCount":0,"source":"// Configuration Vitest pour SEDI Tablette v2\r\n// Ce fichier s'exécute avant chaque test\r\n\r\n// Définir l'environnement de test\r\nprocess.env.NODE_ENV = 'test';\r\n\r\n// Configuration des timeouts\r\nprocess.env.VITEST_TIMEOUT = '10000';\r\n\r\n// Configuration des mocks globaux\r\nglobal.console = {\r\n  ...console,\r\n  // Réduire le bruit des console.log pendant les tests\r\n  log: process.env.VITEST_VERBOSE ? console.log : () => {},\r\n  warn: console.warn,\r\n  error: console.error,\r\n  info: console.info,\r\n  debug: console.debug\r\n};\r\n\r\n// Mock des modules problématiques\r\nvi.mock('../server', () => ({\r\n  app: {\r\n    listen: vi.fn((port, callback) => {\r\n      console.log(`Mock server listening on port ${port}`);\r\n      if (callback) callback();\r\n      return {\r\n        close: vi.fn((cb) => {\r\n          console.log('Mock server closed');\r\n          if (cb) cb();\r\n        })\r\n      };\r\n    }),\r\n    use: vi.fn(),\r\n    get: vi.fn(),\r\n    post: vi.fn(),\r\n    put: vi.fn(),\r\n    delete: vi.fn()\r\n  },\r\n  closeServer: vi.fn(() => Promise.resolve())\r\n}));\r\n\r\n// Mock de la base de données pour les tests\r\nvi.mock('../config/database', () => ({\r\n  executeQuery: vi.fn(() => Promise.resolve([])),\r\n  executeNonQuery: vi.fn(() => Promise.resolve({ rowsAffected: 1 })),\r\n  closeConnection: vi.fn(() => Promise.resolve())\r\n}));\r\n\r\n// Mock des services email\r\nvi.mock('../services/emailService', () => ({\r\n  sendEmail: vi.fn(() => Promise.resolve({ success: true })),\r\n  sendEmailWithTemplate: vi.fn(() => Promise.resolve({ success: true }))\r\n}));\r\n\r\nvi.mock('../services/webhookEmailService', () => ({\r\n  sendWebhookEmail: vi.fn(() => Promise.resolve({ success: true }))\r\n}));\r\n\r\n// Configuration des tests\r\nbeforeEach(() => {\r\n  // Nettoyer les mocks avant chaque test\r\n  vi.clearAllMocks();\r\n});\r\n\r\nafterEach(() => {\r\n  // Nettoyer après chaque test\r\n  vi.restoreAllMocks();\r\n});\r\n\r\n// Configuration globale\r\nafterAll(async () => {\r\n  // Nettoyage final\r\n  console.log('🧪 Tests terminés - Nettoyage final');\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\utils\\timeUtils.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'moment' is assigned a value but never used.","line":2,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"moment"},"fix":{"range":[55,88],"text":""},"desc":"Remove unused variable 'moment'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":20,"suggestions":[{"fix":{"range":[1609,1649],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Utilitaires pour la gestion du temps local français\nconst moment = require('moment');\n\nclass TimeUtils {\n    /**\n     * Obtenir l'heure actuelle en format français (Europe/Paris)\n     * @returns {string} Heure au format HH:mm\n     */\n    static getCurrentTime() {\n        const now = new Date();\n        // Utiliser toLocaleTimeString avec fuseau horaire français (Europe/Paris)\n        const timeString = now.toLocaleTimeString(\"fr-FR\", {\n            timeZone: \"Europe/Paris\",\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: false\n        });\n        \n        return timeString;\n    }\n\n    /**\n     * Obtenir la date actuelle en format français\n     * @returns {string} Date au format YYYY-MM-DD\n     */\n    static getCurrentDate() {\n        const now = new Date();\n        // Utiliser toLocaleDateString avec fuseau horaire français (Europe/Paris)\n        const dateString = now.toLocaleDateString(\"fr-CA\", {\n            timeZone: \"Europe/Paris\"\n        });\n        \n        return dateString; // Format YYYY-MM-DD\n    }\n\n    /**\n     * Obtenir la date et l'heure actuelles en format français\n     * @returns {object} {time: string, date: string, datetime: string}\n     */\n    static getCurrentDateTime() {\n        const time = this.getCurrentTime();\n        const date = this.getCurrentDate();\n        const datetime = `${date} ${time}`;\n        \n        return { time, date, datetime };\n    }\n\n    /**\n     * Logger avec timestamp français\n     * @param {string} message \n     */\n    static log(message) {\n        const { datetime } = this.getCurrentDateTime();\n        console.log(`[${datetime}] ${message}`);\n    }\n}\n\nmodule.exports = TimeUtils;\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\utils\\validationUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]},{"filePath":"X:\\Production\\4_Public\\DEV (ne pas toucher)\\tablettev2\\backend\\vitest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}},{"ruleId":"wrap-iife","replacedBy":["@stylistic/wrap-iife"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"wrap-iife","url":"https://eslint.style/rules/wrap-iife"}}]}},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"],"info":{"message":"This rule was renamed.","url":"https://eslint.org/blog/2018/07/eslint-v5.1.0-released/","deprecatedSince":"5.1.0","availableUntil":"11.0.0","replacedBy":[{"rule":{"name":"no-shadow","url":"https://eslint.org/docs/rules/no-shadow"}}]}},{"ruleId":"handle-callback-err","replacedBy":["n/handle-callback-err"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"handle-callback-err","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"}}]}},{"ruleId":"no-mixed-requires","replacedBy":["n/no-mixed-requires"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-mixed-requires","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"}}]}},{"ruleId":"no-new-require","replacedBy":["n/no-new-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-new-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"}}]}},{"ruleId":"no-path-concat","replacedBy":["n/no-path-concat"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-path-concat","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"}}]}},{"ruleId":"no-process-exit","replacedBy":["n/no-process-exit"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-process-exit","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"}}]}},{"ruleId":"no-restricted-modules","replacedBy":["n/no-restricted-require"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-restricted-require","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"}}]}},{"ruleId":"no-sync","replacedBy":["n/no-sync"],"info":{"message":"Node.js rules were moved out of ESLint core.","url":"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules","deprecatedSince":"7.0.0","availableUntil":"11.0.0","replacedBy":[{"message":"eslint-plugin-n now maintains deprecated Node.js-related rules.","plugin":{"name":"eslint-plugin-n","url":"https://github.com/eslint-community/eslint-plugin-n"},"rule":{"name":"no-sync","url":"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"}}]}}]}]