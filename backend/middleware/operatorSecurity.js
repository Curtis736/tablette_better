// Middleware de s√©curit√© pour les op√©rateurs
const { executeQuery } = require('../config/database');

/**
 * Middleware pour valider qu'un op√©rateur est connect√© et autoris√©
 */
async function validateOperatorSession(req, res, next) {
    try {
        const { operatorId } = req.body;
        
        if (!operatorId) {
            return res.status(400).json({
                success: false,
                error: 'Code op√©rateur requis',
                security: 'OPERATOR_ID_REQUIRED'
            });
        }

        // V√©rifier que l'op√©rateur existe dans RESSOURC
        const operatorQuery = `
            SELECT TOP 1 Coderessource, Designation1, Typeressource
            FROM [SEDI_ERP].[dbo].[RESSOURC]
            WHERE Coderessource = @operatorId
        `;
        
        const operators = await executeQuery(operatorQuery, { operatorId });
        
        if (operators.length === 0) {
            return res.status(401).json({
                success: false,
                error: 'Op√©rateur non trouv√© dans la base de donn√©es',
                security: 'OPERATOR_NOT_FOUND'
            });
        }

        // V√©rifier que l'op√©rateur a une session active
        const sessionQuery = `
            SELECT TOP 1 SessionId, LoginTime, SessionStatus, DeviceInfo
            FROM [SEDI_APP_INDEPENDANTE].[dbo].[ABSESSIONS_OPERATEURS]
            WHERE OperatorCode = @operatorId 
            AND SessionStatus = 'ACTIVE'
            AND CAST(DateCreation AS DATE) = CAST(GETDATE() AS DATE)
            ORDER BY DateCreation DESC
        `;
        
        const activeSessions = await executeQuery(sessionQuery, { operatorId });
        
        if (activeSessions.length === 0) {
            return res.status(401).json({
                success: false,
                error: 'Op√©rateur non connect√© ou session expir√©e',
                security: 'SESSION_REQUIRED'
            });
        }

        // Ajouter les informations de s√©curit√© √† la requ√™te
        req.security = {
            operatorId: operatorId,
            operatorInfo: operators[0],
            sessionInfo: activeSessions[0],
            timestamp: new Date().toISOString(),
            validated: true
        };

        console.log(`üîí S√©curit√© valid√©e pour l'op√©rateur ${operatorId}`);
        next();

    } catch (error) {
        console.error('‚ùå Erreur lors de la validation de s√©curit√©:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur de s√©curit√© lors de la validation',
            security: 'VALIDATION_ERROR'
        });
    }
}

/**
 * Middleware pour valider qu'un op√©rateur ne peut pas modifier les donn√©es d'un autre
 */
async function validateDataOwnership(req, res, next) {
    try {
        const { operatorId } = req.body;
        const { operatorCode } = req.params;
        
        // Si on a un operatorCode dans les param√®tres, v√©rifier la coh√©rence
        if (operatorCode && operatorCode !== operatorId) {
            console.log(`üö® TENTATIVE D'ACC√àS NON AUTORIS√â: ${operatorId} essaie d'acc√©der aux donn√©es de ${operatorCode}`);
            
            return res.status(403).json({
                success: false,
                error: 'Acc√®s non autoris√© aux donn√©es d\'un autre op√©rateur',
                security: 'DATA_OWNERSHIP_VIOLATION'
            });
        }

        next();

    } catch (error) {
        console.error('‚ùå Erreur lors de la validation de propri√©t√© des donn√©es:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur de s√©curit√© lors de la validation de propri√©t√©',
            security: 'OWNERSHIP_VALIDATION_ERROR'
        });
    }
}

/**
 * Middleware pour logger les actions sensibles
 */
function logSecurityAction(req, res, next) {
    const originalSend = res.send;
    
    res.send = function(data) {
        // Logger les actions sensibles
        if (req.security && req.security.validated) {
            console.log(`üîç Action s√©curis√©e: ${req.method} ${req.path} par op√©rateur ${req.security.operatorId}`);
        }
        
        return originalSend.call(this, data);
    };
    
    next();
}

module.exports = {
    validateOperatorSession,
    validateDataOwnership,
    logSecurityAction
};




