name: SEDI Tablette CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement de déploiement'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: 'sedi-tablette'
  BACKEND_IMAGE: 'sedi-backend'
  FRONTEND_IMAGE: 'sedi-frontend'

jobs:
  # ========================================
  # JOB 1: VALIDATION ET TESTS
  # ========================================
  validate-and-test:
    name: Validation & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Pour avoir l'historique complet
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci --prefer-offline --no-audit
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit
    
    - name: Lint backend code
      run: |
        cd backend
        npm run lint || echo "Linting non configuré"
    
    - name: Run backend tests
      run: |
        cd backend
        npm run test:ci
    
    - name: Run security tests
      run: |
        cd backend
        npm run test:security
    
    - name: Run performance tests
      run: |
        cd backend
        npm run test:performance
    
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
    
    - name: Build Docker images
      run: |
        cd docker
        docker-compose build --no-cache --parallel
    
    - name: Test Docker containers
      run: |
        cd docker
        docker-compose up -d
        echo "Attente du démarrage des services..."
        sleep 30
        
        echo "Test de connectivité backend..."
        curl -f http://localhost:3000/api/health || exit 1
        
        echo "Test de connectivité frontend..."
        curl -f http://localhost/ || exit 1
        
        echo "Test des endpoints API..."
        curl -f http://localhost:3000/api/admin || echo "Admin endpoint accessible"
        
        echo "Tous les tests de conteneurs réussis"
        docker-compose down
    
    - name: Generate version tag
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "version=v$(date +'%Y%m%d')-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        fi
    
    - name: Test summary
      run: |
        echo "## Résumé des tests" >> $GITHUB_STEP_SUMMARY
        echo "- Tests backend: Réussis" >> $GITHUB_STEP_SUMMARY
        echo "- Tests Docker: Réussis" >> $GITHUB_STEP_SUMMARY
        echo "- Connectivité API: Validée" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY

  # ========================================
  # JOB 2: DÉPLOIEMENT STAGING
  # ========================================
  deploy-staging:
    name: Déploiement Staging
    needs: validate-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: 
      name: staging
      url: http://192.168.1.25
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Deploy to staging
      run: |
        echo "Déploiement sur environnement STAGING..."
        echo "Date: $(date)"
        echo "Commit: ${{ github.sha }}"
        echo "Auteur: ${{ github.actor }}"
        
        # Exécution du script de déploiement
        chmod +x docker/deploy-ci-cd.sh
        ./docker/deploy-ci-cd.sh staging
    
    - name: Post-deployment tests
      run: |
        echo "Exécution des tests post-déploiement..."
        # Tests spécifiques à l'environnement staging
        curl -f http://192.168.1.25:3000/api/health || exit 1
        curl -f http://192.168.1.25/ || exit 1
        echo "Tests post-déploiement réussis"
    
    - name: Notify staging deployment
      run: |
        echo "Notification du déploiement staging..."
        # Ici vous pouvez ajouter des notifications (Slack, Teams, etc.)
        echo "✅ SEDI Tablette déployé avec succès en staging !"
        echo "🌐 URL: http://192.168.1.25"

  # ========================================
  # JOB 3: DÉPLOIEMENT PRODUCTION
  # ========================================
  deploy-production:
    name: Déploiement Production
    needs: validate-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/tags/v*' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: 
      name: production
      url: http://192.168.1.26
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Deploy to production
      run: |
        echo "Déploiement sur environnement PRODUCTION..."
        echo "Date: $(date)"
        echo "Commit: ${{ github.sha }}"
        echo "Auteur: ${{ github.actor }}"
        echo "Version: ${{ needs.validate-and-test.outputs.version }}"
        
        # Exécution du script de déploiement
        chmod +x docker/deploy-ci-cd.sh
        ./docker/deploy-ci-cd.sh production
    
    - name: Post-deployment health checks
      run: |
        echo "Vérification de la santé des services..."
        
        # Attendre que les services soient prêts
        sleep 30
        
        # Tests de santé
        echo "Test backend health..."
        curl -f http://192.168.1.26:3000/api/health || exit 1
        
        echo "Test frontend health..."
        curl -f http://192.168.1.26/ || exit 1
        
        echo "Tous les tests de santé réussis"
    
    - name: Deployment metrics
      run: |
        echo "## Métriques de déploiement" >> $GITHUB_STEP_SUMMARY
        echo "- Durée: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- Déployé par: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: http://192.168.1.26:3000" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: http://192.168.1.26" >> $GITHUB_STEP_SUMMARY
    
    - name: Notify production deployment
      run: |
        echo "Notification du déploiement production..."
        echo "✅ SEDI Tablette déployé avec succès en production !"
        echo "🌐 URL: http://192.168.1.26"
        # Ici vous pouvez ajouter des notifications (Slack, Teams, etc.)

  # ========================================
  # JOB 4: NETTOYAGE ET MAINTENANCE
  # ========================================
  cleanup:
    name: Nettoyage
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()  # S'exécute même en cas d'échec
    
    steps:
    - name: Cleanup Docker images
      run: |
        echo "Nettoyage des images Docker locales..."
        docker system prune -f || true
    
    - name: Pipeline summary
      run: |
        echo "## Résumé du pipeline CI/CD" >> $GITHUB_STEP_SUMMARY
        echo "- Validation: ${{ needs.validate-and-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Staging: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Production: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Nettoyage: Terminé" >> $GITHUB_STEP_SUMMARY
