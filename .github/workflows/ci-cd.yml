name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run backend tests
      run: |
        cd backend
        npm run test:ci
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        
    - name: Check frontend build
      run: |
        cd frontend
        npm run start &
        sleep 5
        curl -f http://localhost:8080 || exit 1
        pkill -f "http-server"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Run security audit
      run: |
        cd backend
        npm audit --audit-level=moderate
        
    - name: Run frontend security audit
      run: |
        cd frontend
        npm ci
        npm audit --audit-level=moderate

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Check package.json syntax
      run: |
        cd backend
        node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"
        cd ../frontend
        node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"
        
    - name: Validate Jest configuration
      run: |
        cd backend
        node -e "require('./jest.config.js')"

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test, security, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        cd ../frontend
        npm ci
        
    - name: Build backend
      run: |
        cd backend
        npm run start &
        sleep 3
        curl -f http://localhost:3001/api/health || exit 1
        pkill -f "node server.js"
        
    - name: Build frontend
      run: |
        cd frontend
        npm run start &
        sleep 3
        curl -f http://localhost:8080 || exit 1
        pkill -f "http-server"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, security, lint, build]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.test.result == 'success' && needs.security.result == 'success' && needs.lint.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "‚úÖ All checks passed successfully!"
        echo "üéâ CI/CD Pipeline completed successfully"
        
    - name: Notify Failure
      if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' || needs.lint.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "‚ùå Some checks failed:"
        echo "Test: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Build: ${{ needs.build.result }}"
        exit 1